// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: github.com/kralicky/protocompile/ast/ast.proto

package ast

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Token represents a single lexed token.
type Token int32

const (
	Token_Unknown Token = 0
	// TokenError indicates an invalid token. It is returned from query
	// functions when no valid token satisfies the request.
	Token_Error Token = -1
)

// Enum value maps for Token.
var (
	Token_name = map[int32]string{
		0:  "Unknown",
		-1: "Error",
	}
	Token_value = map[string]int32{
		"Unknown": 0,
		"Error":   -1,
	}
)

func (x Token) Enum() *Token {
	p := new(Token)
	*p = x
	return p
}

func (x Token) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Token) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_kralicky_protocompile_ast_ast_proto_enumTypes[0].Descriptor()
}

func (Token) Type() protoreflect.EnumType {
	return &file_github_com_kralicky_protocompile_ast_ast_proto_enumTypes[0]
}

func (x Token) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Token.Descriptor instead.
func (Token) EnumDescriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{0}
}

type FileInfo_PositionEncoding int32

const (
	FileInfo_PositionEncodingByteOffset       FileInfo_PositionEncoding = 0
	FileInfo_PositionEncodingProtocCompatible FileInfo_PositionEncoding = 1
)

// Enum value maps for FileInfo_PositionEncoding.
var (
	FileInfo_PositionEncoding_name = map[int32]string{
		0: "PositionEncodingByteOffset",
		1: "PositionEncodingProtocCompatible",
	}
	FileInfo_PositionEncoding_value = map[string]int32{
		"PositionEncodingByteOffset":       0,
		"PositionEncodingProtocCompatible": 1,
	}
)

func (x FileInfo_PositionEncoding) Enum() *FileInfo_PositionEncoding {
	p := new(FileInfo_PositionEncoding)
	*p = x
	return p
}

func (x FileInfo_PositionEncoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileInfo_PositionEncoding) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_kralicky_protocompile_ast_ast_proto_enumTypes[1].Descriptor()
}

func (FileInfo_PositionEncoding) Type() protoreflect.EnumType {
	return &file_github_com_kralicky_protocompile_ast_ast_proto_enumTypes[1]
}

func (x FileInfo_PositionEncoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileInfo_PositionEncoding.Descriptor instead.
func (FileInfo_PositionEncoding) EnumDescriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{0, 0}
}

// FileInfo contains information about the contents of a source file, including
// details about comments and items. A lexer accumulates these details as it
// scans the file contents. This allows efficient representation of things like
// source positions.
type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the source file.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The raw contents of the source file.
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// The offsets for each line in the file. The value is the zero-based byte
	// offset for a given line. The line is given by its index. So the value at
	// index 0 is the offset for the first line (which is always zero). The
	// value at index 1 is the offset at which the second line begins. Etc.
	Lines []int32 `protobuf:"varint,3,rep,packed,name=lines,proto3" json:"lines,omitempty"`
	// The info for every comment in the file. This is empty if the file has no
	// comments. The first entry corresponds to the first comment in the file,
	// and so on.
	Comments []*FileInfo_CommentInfo `protobuf:"bytes,4,rep,name=comments,proto3" json:"comments,omitempty"`
	// The info for every lexed item in the file. The last item in the slice
	// corresponds to the EOF, so every file (even an empty one) should have at
	// least one entry. This includes all terminal symbols (tokens) in the AST
	// as well as all comments.
	ItemList []*FileInfo_ItemSpan `protobuf:"bytes,5,rep,name=itemList,proto3" json:"itemList,omitempty"`
	// Document version, if provided by the resolver. The value is not used for
	// any purpose other than to allow the caller to attach version information
	// to the file for use in external tooling.
	Version          int32                     `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	PositionEncoding FileInfo_PositionEncoding `protobuf:"varint,7,opt,name=positionEncoding,proto3,enum=ast.FileInfo_PositionEncoding" json:"positionEncoding,omitempty"`
	// zero-length-token counts, used for validation.
	ZeroLengthTokenCount            int32 `protobuf:"varint,8,opt,name=zeroLengthTokenCount,proto3" json:"zeroLengthTokenCount,omitempty"`
	ZeroLengthTokenConsecutiveCount int32 `protobuf:"varint,9,opt,name=zeroLengthTokenConsecutiveCount,proto3" json:"zeroLengthTokenConsecutiveCount,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{0}
}

func (x *FileInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileInfo) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FileInfo) GetLines() []int32 {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *FileInfo) GetComments() []*FileInfo_CommentInfo {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *FileInfo) GetItemList() []*FileInfo_ItemSpan {
	if x != nil {
		return x.ItemList
	}
	return nil
}

func (x *FileInfo) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *FileInfo) GetPositionEncoding() FileInfo_PositionEncoding {
	if x != nil {
		return x.PositionEncoding
	}
	return FileInfo_PositionEncodingByteOffset
}

func (x *FileInfo) GetZeroLengthTokenCount() int32 {
	if x != nil {
		return x.ZeroLengthTokenCount
	}
	return 0
}

func (x *FileInfo) GetZeroLengthTokenConsecutiveCount() int32 {
	if x != nil {
		return x.ZeroLengthTokenConsecutiveCount
	}
	return 0
}

type FileElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Val:
	//
	//	*FileElement_Import
	//	*FileElement_Package
	//	*FileElement_Option
	//	*FileElement_Message
	//	*FileElement_Enum
	//	*FileElement_Extend
	//	*FileElement_Service
	//	*FileElement_Err
	Val isFileElement_Val `protobuf_oneof:"val"`
}

func (x *FileElement) Reset() {
	*x = FileElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileElement) ProtoMessage() {}

func (x *FileElement) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileElement.ProtoReflect.Descriptor instead.
func (*FileElement) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{1}
}

func (m *FileElement) GetVal() isFileElement_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (x *FileElement) GetImport() *ImportNode {
	if x, ok := x.GetVal().(*FileElement_Import); ok {
		return x.Import
	}
	return nil
}

func (x *FileElement) GetPackage() *PackageNode {
	if x, ok := x.GetVal().(*FileElement_Package); ok {
		return x.Package
	}
	return nil
}

func (x *FileElement) GetOption() *OptionNode {
	if x, ok := x.GetVal().(*FileElement_Option); ok {
		return x.Option
	}
	return nil
}

func (x *FileElement) GetMessage() *MessageNode {
	if x, ok := x.GetVal().(*FileElement_Message); ok {
		return x.Message
	}
	return nil
}

func (x *FileElement) GetEnum() *EnumNode {
	if x, ok := x.GetVal().(*FileElement_Enum); ok {
		return x.Enum
	}
	return nil
}

func (x *FileElement) GetExtend() *ExtendNode {
	if x, ok := x.GetVal().(*FileElement_Extend); ok {
		return x.Extend
	}
	return nil
}

func (x *FileElement) GetService() *ServiceNode {
	if x, ok := x.GetVal().(*FileElement_Service); ok {
		return x.Service
	}
	return nil
}

func (x *FileElement) GetErr() *ErrorNode {
	if x, ok := x.GetVal().(*FileElement_Err); ok {
		return x.Err
	}
	return nil
}

type isFileElement_Val interface {
	isFileElement_Val()
}

type FileElement_Import struct {
	Import *ImportNode `protobuf:"bytes,1,opt,name=import,proto3,oneof"`
}

type FileElement_Package struct {
	Package *PackageNode `protobuf:"bytes,2,opt,name=package,proto3,oneof"`
}

type FileElement_Option struct {
	Option *OptionNode `protobuf:"bytes,3,opt,name=option,proto3,oneof"`
}

type FileElement_Message struct {
	Message *MessageNode `protobuf:"bytes,4,opt,name=message,proto3,oneof"`
}

type FileElement_Enum struct {
	Enum *EnumNode `protobuf:"bytes,5,opt,name=enum,proto3,oneof"`
}

type FileElement_Extend struct {
	Extend *ExtendNode `protobuf:"bytes,6,opt,name=extend,proto3,oneof"`
}

type FileElement_Service struct {
	Service *ServiceNode `protobuf:"bytes,7,opt,name=service,proto3,oneof"`
}

type FileElement_Err struct {
	Err *ErrorNode `protobuf:"bytes,8,opt,name=err,proto3,oneof"`
}

func (*FileElement_Import) isFileElement_Val() {}

func (*FileElement_Package) isFileElement_Val() {}

func (*FileElement_Option) isFileElement_Val() {}

func (*FileElement_Message) isFileElement_Val() {}

func (*FileElement_Enum) isFileElement_Val() {}

func (*FileElement_Extend) isFileElement_Val() {}

func (*FileElement_Service) isFileElement_Val() {}

func (*FileElement_Err) isFileElement_Val() {}

// SyntaxNode represents a syntax declaration, which if present must be
// the first non-comment content. Example:
//
//	syntax = "proto2";
//
// Files that don't have a syntax node are assumed to use proto2 syntax.
type SyntaxNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword   *IdentNode       `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Equals    *RuneNode        `protobuf:"bytes,2,opt,name=equals,proto3" json:"equals,omitempty"`
	Syntax    *StringValueNode `protobuf:"bytes,3,opt,name=syntax,proto3" json:"syntax,omitempty"`
	Semicolon *RuneNode        `protobuf:"bytes,4,opt,name=semicolon,proto3" json:"semicolon,omitempty"`
}

func (x *SyntaxNode) Reset() {
	*x = SyntaxNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyntaxNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntaxNode) ProtoMessage() {}

func (x *SyntaxNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntaxNode.ProtoReflect.Descriptor instead.
func (*SyntaxNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{2}
}

func (x *SyntaxNode) GetKeyword() *IdentNode {
	if x != nil {
		return x.Keyword
	}
	return nil
}

func (x *SyntaxNode) GetEquals() *RuneNode {
	if x != nil {
		return x.Equals
	}
	return nil
}

func (x *SyntaxNode) GetSyntax() *StringValueNode {
	if x != nil {
		return x.Syntax
	}
	return nil
}

func (x *SyntaxNode) GetSemicolon() *RuneNode {
	if x != nil {
		return x.Semicolon
	}
	return nil
}

// IdentNode represents a simple, unqualified identifier. These are used to name
// elements declared in a protobuf file or to refer to elements. Example:
//
//	foobar
type IdentNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     Token  `protobuf:"varint,1,opt,name=token,proto3,enum=ast.Token" json:"token,omitempty"`
	Val       string `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
	IsKeyword bool   `protobuf:"varint,3,opt,name=isKeyword,proto3" json:"isKeyword,omitempty"`
}

func (x *IdentNode) Reset() {
	*x = IdentNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentNode) ProtoMessage() {}

func (x *IdentNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentNode.ProtoReflect.Descriptor instead.
func (*IdentNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{3}
}

func (x *IdentNode) GetToken() Token {
	if x != nil {
		return x.Token
	}
	return Token_Unknown
}

func (x *IdentNode) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

func (x *IdentNode) GetIsKeyword() bool {
	if x != nil {
		return x.IsKeyword
	}
	return false
}

// EmptyDeclNode represents an empty declaration in protobuf source.
// These amount to extra semicolons, with no actual content preceding
// the semicolon.
type EmptyDeclNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Semicolon *RuneNode `protobuf:"bytes,1,opt,name=semicolon,proto3" json:"semicolon,omitempty"`
}

func (x *EmptyDeclNode) Reset() {
	*x = EmptyDeclNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyDeclNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyDeclNode) ProtoMessage() {}

func (x *EmptyDeclNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyDeclNode.ProtoReflect.Descriptor instead.
func (*EmptyDeclNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{4}
}

func (x *EmptyDeclNode) GetSemicolon() *RuneNode {
	if x != nil {
		return x.Semicolon
	}
	return nil
}

// CompoundIdentNode represents a qualified identifier. A qualified identifier
// has at least one dot and possibly multiple identifier names (all separated by
// dots). If the identifier has a leading dot, then it is a *fully* qualified
// identifier. Example:
//
//	.com.foobar.Baz
type CompoundIdentNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Components []*IdentNode `protobuf:"bytes,1,rep,name=components,proto3" json:"components,omitempty"`
	Dots       []*RuneNode  `protobuf:"bytes,2,rep,name=dots,proto3" json:"dots,omitempty"`
}

func (x *CompoundIdentNode) Reset() {
	*x = CompoundIdentNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompoundIdentNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundIdentNode) ProtoMessage() {}

func (x *CompoundIdentNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundIdentNode.ProtoReflect.Descriptor instead.
func (*CompoundIdentNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{5}
}

func (x *CompoundIdentNode) GetComponents() []*IdentNode {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *CompoundIdentNode) GetDots() []*RuneNode {
	if x != nil {
		return x.Dots
	}
	return nil
}

// EditionNode represents an edition declaration, which if present must be
// the first non-comment content. Example:
//
//	edition = "2023";
//
// Files may include either an edition node or a syntax node, but not both.
// If neither are present, the file is assumed to use proto2 syntax.
type EditionNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword   *IdentNode       `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Equals    *RuneNode        `protobuf:"bytes,2,opt,name=equals,proto3" json:"equals,omitempty"`
	Edition   *StringValueNode `protobuf:"bytes,3,opt,name=edition,proto3" json:"edition,omitempty"`
	Semicolon *RuneNode        `protobuf:"bytes,4,opt,name=semicolon,proto3" json:"semicolon,omitempty"`
}

func (x *EditionNode) Reset() {
	*x = EditionNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditionNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditionNode) ProtoMessage() {}

func (x *EditionNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditionNode.ProtoReflect.Descriptor instead.
func (*EditionNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{6}
}

func (x *EditionNode) GetKeyword() *IdentNode {
	if x != nil {
		return x.Keyword
	}
	return nil
}

func (x *EditionNode) GetEquals() *RuneNode {
	if x != nil {
		return x.Equals
	}
	return nil
}

func (x *EditionNode) GetEdition() *StringValueNode {
	if x != nil {
		return x.Edition
	}
	return nil
}

func (x *EditionNode) GetSemicolon() *RuneNode {
	if x != nil {
		return x.Semicolon
	}
	return nil
}

// ImportNode represents an import statement. Example:
//
//	import "google/protobuf/empty.proto";
type ImportNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword   *IdentNode       `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Public    *IdentNode       `protobuf:"bytes,2,opt,name=public,proto3" json:"public,omitempty"`
	Weak      *IdentNode       `protobuf:"bytes,3,opt,name=weak,proto3" json:"weak,omitempty"`
	Name      *StringValueNode `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Semicolon *RuneNode        `protobuf:"bytes,5,opt,name=semicolon,proto3" json:"semicolon,omitempty"`
}

func (x *ImportNode) Reset() {
	*x = ImportNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportNode) ProtoMessage() {}

func (x *ImportNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportNode.ProtoReflect.Descriptor instead.
func (*ImportNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{7}
}

func (x *ImportNode) GetKeyword() *IdentNode {
	if x != nil {
		return x.Keyword
	}
	return nil
}

func (x *ImportNode) GetPublic() *IdentNode {
	if x != nil {
		return x.Public
	}
	return nil
}

func (x *ImportNode) GetWeak() *IdentNode {
	if x != nil {
		return x.Weak
	}
	return nil
}

func (x *ImportNode) GetName() *StringValueNode {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ImportNode) GetSemicolon() *RuneNode {
	if x != nil {
		return x.Semicolon
	}
	return nil
}

// PackageNode represents a package declaration. Example:
//
//	package foobar.com;
type PackageNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword   *IdentNode      `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Name      *IdentValueNode `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Semicolon *RuneNode       `protobuf:"bytes,3,opt,name=semicolon,proto3" json:"semicolon,omitempty"`
}

func (x *PackageNode) Reset() {
	*x = PackageNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageNode) ProtoMessage() {}

func (x *PackageNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageNode.ProtoReflect.Descriptor instead.
func (*PackageNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{8}
}

func (x *PackageNode) GetKeyword() *IdentNode {
	if x != nil {
		return x.Keyword
	}
	return nil
}

func (x *PackageNode) GetName() *IdentValueNode {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *PackageNode) GetSemicolon() *RuneNode {
	if x != nil {
		return x.Semicolon
	}
	return nil
}

// UintLiteralNode represents a simple integer literal with no sign character.
type UintLiteralNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token Token `protobuf:"varint,1,opt,name=token,proto3,enum=ast.Token" json:"token,omitempty"`
	// Val is the numeric value indicated by the literal
	Val uint64 `protobuf:"varint,2,opt,name=val,proto3" json:"val,omitempty"`
	// Raw is the original string representation of the literal
	Raw string `protobuf:"bytes,3,opt,name=raw,proto3" json:"raw,omitempty"`
}

func (x *UintLiteralNode) Reset() {
	*x = UintLiteralNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UintLiteralNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UintLiteralNode) ProtoMessage() {}

func (x *UintLiteralNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UintLiteralNode.ProtoReflect.Descriptor instead.
func (*UintLiteralNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{9}
}

func (x *UintLiteralNode) GetToken() Token {
	if x != nil {
		return x.Token
	}
	return Token_Unknown
}

func (x *UintLiteralNode) GetVal() uint64 {
	if x != nil {
		return x.Val
	}
	return 0
}

func (x *UintLiteralNode) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

// OptionNode represents the declaration of a single option for an element.
// It is used both for normal option declarations (start with "option" keyword
// and end with semicolon) and for compact options found in fields, enum values,
// and extension ranges. Example:
//
//	option (custom.option) = "foo";
type OptionNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword   *IdentNode      `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"` // absent for compact options
	Name      *OptionNameNode `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Equals    *RuneNode       `protobuf:"bytes,3,opt,name=equals,proto3" json:"equals,omitempty"`
	Val       *ValueNode      `protobuf:"bytes,4,opt,name=val,proto3" json:"val,omitempty"`
	Semicolon *RuneNode       `protobuf:"bytes,5,opt,name=semicolon,proto3" json:"semicolon,omitempty"` // for compact options, this is actually a comma
}

func (x *OptionNode) Reset() {
	*x = OptionNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionNode) ProtoMessage() {}

func (x *OptionNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionNode.ProtoReflect.Descriptor instead.
func (*OptionNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{10}
}

func (x *OptionNode) GetKeyword() *IdentNode {
	if x != nil {
		return x.Keyword
	}
	return nil
}

func (x *OptionNode) GetName() *OptionNameNode {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *OptionNode) GetEquals() *RuneNode {
	if x != nil {
		return x.Equals
	}
	return nil
}

func (x *OptionNode) GetVal() *ValueNode {
	if x != nil {
		return x.Val
	}
	return nil
}

func (x *OptionNode) GetSemicolon() *RuneNode {
	if x != nil {
		return x.Semicolon
	}
	return nil
}

// NegativeIntLiteralNode represents an integer literal with a negative (-) sign.
type NegativeIntLiteralNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minus *RuneNode        `protobuf:"bytes,1,opt,name=minus,proto3" json:"minus,omitempty"`
	Uint  *UintLiteralNode `protobuf:"bytes,2,opt,name=uint,proto3" json:"uint,omitempty"`
}

func (x *NegativeIntLiteralNode) Reset() {
	*x = NegativeIntLiteralNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NegativeIntLiteralNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NegativeIntLiteralNode) ProtoMessage() {}

func (x *NegativeIntLiteralNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NegativeIntLiteralNode.ProtoReflect.Descriptor instead.
func (*NegativeIntLiteralNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{11}
}

func (x *NegativeIntLiteralNode) GetMinus() *RuneNode {
	if x != nil {
		return x.Minus
	}
	return nil
}

func (x *NegativeIntLiteralNode) GetUint() *UintLiteralNode {
	if x != nil {
		return x.Uint
	}
	return nil
}

// FloatLiteralNode represents a floating point numeric literal.
type FloatLiteralNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token Token `protobuf:"varint,1,opt,name=token,proto3,enum=ast.Token" json:"token,omitempty"`
	// Val is the numeric value indicated by the literal
	Val float64 `protobuf:"fixed64,2,opt,name=val,proto3" json:"val,omitempty"`
	// Raw is the original string representation of the literal
	Raw string `protobuf:"bytes,3,opt,name=raw,proto3" json:"raw,omitempty"`
}

func (x *FloatLiteralNode) Reset() {
	*x = FloatLiteralNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatLiteralNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatLiteralNode) ProtoMessage() {}

func (x *FloatLiteralNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatLiteralNode.ProtoReflect.Descriptor instead.
func (*FloatLiteralNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{12}
}

func (x *FloatLiteralNode) GetToken() Token {
	if x != nil {
		return x.Token
	}
	return Token_Unknown
}

func (x *FloatLiteralNode) GetVal() float64 {
	if x != nil {
		return x.Val
	}
	return 0
}

func (x *FloatLiteralNode) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

// RuneNode represents a single rune in protobuf source. Runes
// are typically collected into items, but some runes stand on
// their own, such as punctuation/symbols like commas, semicolons,
// equals signs, open and close symbols (braces, brackets, angles,
// and parentheses), and periods/dots.
// TODO: make this more compact; if runes don't have attributed comments
// then we don't need a Token to represent them and only need an offset
// into the file's contents.
type RuneNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token Token `protobuf:"varint,1,opt,name=token,proto3,enum=ast.Token" json:"token,omitempty"`
	Rune  int32 `protobuf:"varint,2,opt,name=rune,proto3" json:"rune,omitempty"`
	// Virtual is true if this rune is not actually present in the source file,
	// but is instead injected by the lexer to satisfy certain grammar rules.
	Virtual bool `protobuf:"varint,3,opt,name=virtual,proto3" json:"virtual,omitempty"`
}

func (x *RuneNode) Reset() {
	*x = RuneNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuneNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuneNode) ProtoMessage() {}

func (x *RuneNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuneNode.ProtoReflect.Descriptor instead.
func (*RuneNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{13}
}

func (x *RuneNode) GetToken() Token {
	if x != nil {
		return x.Token
	}
	return Token_Unknown
}

func (x *RuneNode) GetRune() int32 {
	if x != nil {
		return x.Rune
	}
	return 0
}

func (x *RuneNode) GetVirtual() bool {
	if x != nil {
		return x.Virtual
	}
	return false
}

// StringValueNode is an AST node that represents a string literal.
// Such a node can be a single literal (*StringLiteralNode) or a
// concatenation of multiple literals (*CompoundStringLiteralNode).
type StringValueNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Val:
	//
	//	*StringValueNode_StringLiteral
	//	*StringValueNode_CompoundStringLiteral
	Val isStringValueNode_Val `protobuf_oneof:"val"`
}

func (x *StringValueNode) Reset() {
	*x = StringValueNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringValueNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringValueNode) ProtoMessage() {}

func (x *StringValueNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringValueNode.ProtoReflect.Descriptor instead.
func (*StringValueNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{14}
}

func (m *StringValueNode) GetVal() isStringValueNode_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (x *StringValueNode) GetStringLiteral() *StringLiteralNode {
	if x, ok := x.GetVal().(*StringValueNode_StringLiteral); ok {
		return x.StringLiteral
	}
	return nil
}

func (x *StringValueNode) GetCompoundStringLiteral() *CompoundStringLiteralNode {
	if x, ok := x.GetVal().(*StringValueNode_CompoundStringLiteral); ok {
		return x.CompoundStringLiteral
	}
	return nil
}

type isStringValueNode_Val interface {
	isStringValueNode_Val()
}

type StringValueNode_StringLiteral struct {
	StringLiteral *StringLiteralNode `protobuf:"bytes,1,opt,name=stringLiteral,proto3,oneof"`
}

type StringValueNode_CompoundStringLiteral struct {
	CompoundStringLiteral *CompoundStringLiteralNode `protobuf:"bytes,2,opt,name=compoundStringLiteral,proto3,oneof"`
}

func (*StringValueNode_StringLiteral) isStringValueNode_Val() {}

func (*StringValueNode_CompoundStringLiteral) isStringValueNode_Val() {}

type ErrorNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err *IdentNode `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *ErrorNode) Reset() {
	*x = ErrorNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorNode) ProtoMessage() {}

func (x *ErrorNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorNode.ProtoReflect.Descriptor instead.
func (*ErrorNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{15}
}

func (x *ErrorNode) GetErr() *IdentNode {
	if x != nil {
		return x.Err
	}
	return nil
}

// StringLiteralNode represents a simple string literal. Example:
//
//	"proto2"
type StringLiteralNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token Token `protobuf:"varint,1,opt,name=token,proto3,enum=ast.Token" json:"token,omitempty"`
	// Val is the actual string value that the literal indicates.
	Val string `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *StringLiteralNode) Reset() {
	*x = StringLiteralNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringLiteralNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringLiteralNode) ProtoMessage() {}

func (x *StringLiteralNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringLiteralNode.ProtoReflect.Descriptor instead.
func (*StringLiteralNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{16}
}

func (x *StringLiteralNode) GetToken() Token {
	if x != nil {
		return x.Token
	}
	return Token_Unknown
}

func (x *StringLiteralNode) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

// CompoundStringLiteralNode represents a compound string literal, which is
// the concatenaton of adjacent string literals. Example:
//
//	"this "  "is"   " all one "   "string"
type CompoundStringLiteralNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements []*StringValueNode `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
}

func (x *CompoundStringLiteralNode) Reset() {
	*x = CompoundStringLiteralNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompoundStringLiteralNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundStringLiteralNode) ProtoMessage() {}

func (x *CompoundStringLiteralNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundStringLiteralNode.ProtoReflect.Descriptor instead.
func (*CompoundStringLiteralNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{17}
}

func (x *CompoundStringLiteralNode) GetElements() []*StringValueNode {
	if x != nil {
		return x.Elements
	}
	return nil
}

// IdentValueNode is an AST node that represents an identifier.
type IdentValueNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Val:
	//
	//	*IdentValueNode_Ident
	//	*IdentValueNode_CompoundIdent
	Val isIdentValueNode_Val `protobuf_oneof:"val"`
}

func (x *IdentValueNode) Reset() {
	*x = IdentValueNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentValueNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentValueNode) ProtoMessage() {}

func (x *IdentValueNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentValueNode.ProtoReflect.Descriptor instead.
func (*IdentValueNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{18}
}

func (m *IdentValueNode) GetVal() isIdentValueNode_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (x *IdentValueNode) GetIdent() *IdentNode {
	if x, ok := x.GetVal().(*IdentValueNode_Ident); ok {
		return x.Ident
	}
	return nil
}

func (x *IdentValueNode) GetCompoundIdent() *CompoundIdentNode {
	if x, ok := x.GetVal().(*IdentValueNode_CompoundIdent); ok {
		return x.CompoundIdent
	}
	return nil
}

type isIdentValueNode_Val interface {
	isIdentValueNode_Val()
}

type IdentValueNode_Ident struct {
	Ident *IdentNode `protobuf:"bytes,1,opt,name=ident,proto3,oneof"`
}

type IdentValueNode_CompoundIdent struct {
	CompoundIdent *CompoundIdentNode `protobuf:"bytes,2,opt,name=compoundIdent,proto3,oneof"`
}

func (*IdentValueNode_Ident) isIdentValueNode_Val() {}

func (*IdentValueNode_CompoundIdent) isIdentValueNode_Val() {}

// OptionNameNode represents an option name or even a traversal through message
// types to name a nested option field. Example:
//
//	(foo.bar).baz.(bob)
type OptionNameNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parts []*FieldReferenceNode `protobuf:"bytes,1,rep,name=parts,proto3" json:"parts,omitempty"`
	// Dots represent the separating '.' characters between name parts. The
	// length of this slice must be exactly len(Parts)-1, each item in Parts
	// having a corresponding item in this slice *except the last* (since a
	// trailing dot is not allowed).
	//
	// These do *not* include dots that are inside of an extension name. For
	// example: (foo.bar).baz.(bob) has three parts:
	//  1. (foo.bar)  - an extension name
	//  2. baz        - a regular field in foo.bar
	//  3. (bob)      - an extension field in baz
	//
	// Note that the dot in foo.bar will thus not be present in Dots but is
	// instead in Parts[0].
	Dots []*RuneNode `protobuf:"bytes,2,rep,name=dots,proto3" json:"dots,omitempty"`
}

func (x *OptionNameNode) Reset() {
	*x = OptionNameNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionNameNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionNameNode) ProtoMessage() {}

func (x *OptionNameNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionNameNode.ProtoReflect.Descriptor instead.
func (*OptionNameNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{19}
}

func (x *OptionNameNode) GetParts() []*FieldReferenceNode {
	if x != nil {
		return x.Parts
	}
	return nil
}

func (x *OptionNameNode) GetDots() []*RuneNode {
	if x != nil {
		return x.Dots
	}
	return nil
}

// FieldReferenceNode is a reference to a field name. It can indicate a regular
// field (simple unqualified name), an extension field (possibly-qualified name
// that is enclosed either in brackets or parentheses), or an "any" type
// reference (a type URL in the form "server.host/fully.qualified.Name" that is
// enclosed in brackets).
//
// Extension names are used in options to refer to custom options (which are
// actually extensions), in which case the name is enclosed in parentheses "("
// and ")". They can also be used to refer to extension fields of options.
//
// Extension names are also used in message literals to set extension fields,
// in which case the name is enclosed in square brackets "[" and "]".
//
// "Any" type references can only be used in message literals, and are not
// allowed in option names. They are always enclosed in square brackets. An
// "any" type reference is distinguished from an extension name by the presence
// of a slash, which must be present in an "any" type reference and must be
// absent in an extension name.
//
// Examples:
//
//	foobar
//	(foo.bar)
//	[foo.bar]
//	[type.googleapis.com/foo.bar]
type FieldReferenceNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Open      *RuneNode       `protobuf:"bytes,1,opt,name=open,proto3" json:"open,omitempty"`           // only present for extension names and "any" type references
	UrlPrefix *IdentValueNode `protobuf:"bytes,2,opt,name=urlPrefix,proto3" json:"urlPrefix,omitempty"` // only present for "any" type references
	Slash     *RuneNode       `protobuf:"bytes,3,opt,name=slash,proto3" json:"slash,omitempty"`         // only present for "any" type references
	Name      *IdentValueNode `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Comma     *RuneNode       `protobuf:"bytes,5,opt,name=comma,proto3" json:"comma,omitempty"`         // only present for extension names and "any" type references
	Close     *RuneNode       `protobuf:"bytes,6,opt,name=close,proto3" json:"close,omitempty"`         // only present for extension names and "any" type references
	Semicolon *RuneNode       `protobuf:"bytes,7,opt,name=semicolon,proto3" json:"semicolon,omitempty"` // only present for extension names and "any" type references
}

func (x *FieldReferenceNode) Reset() {
	*x = FieldReferenceNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldReferenceNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldReferenceNode) ProtoMessage() {}

func (x *FieldReferenceNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldReferenceNode.ProtoReflect.Descriptor instead.
func (*FieldReferenceNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{20}
}

func (x *FieldReferenceNode) GetOpen() *RuneNode {
	if x != nil {
		return x.Open
	}
	return nil
}

func (x *FieldReferenceNode) GetUrlPrefix() *IdentValueNode {
	if x != nil {
		return x.UrlPrefix
	}
	return nil
}

func (x *FieldReferenceNode) GetSlash() *RuneNode {
	if x != nil {
		return x.Slash
	}
	return nil
}

func (x *FieldReferenceNode) GetName() *IdentValueNode {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *FieldReferenceNode) GetComma() *RuneNode {
	if x != nil {
		return x.Comma
	}
	return nil
}

func (x *FieldReferenceNode) GetClose() *RuneNode {
	if x != nil {
		return x.Close
	}
	return nil
}

func (x *FieldReferenceNode) GetSemicolon() *RuneNode {
	if x != nil {
		return x.Semicolon
	}
	return nil
}

// ValueNode is an AST node that represents a literal value.
//
// It also includes references (e.g. IdentifierValueNode), which can be
// used as values in some contexts, such as describing the default value
// for a field, which can refer to an enum value.
//
// This also allows NoSourceNode to be used in place of a real value node
// for some usages.
type ValueNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Val:
	//
	//	*ValueNode_Ident
	//	*ValueNode_CompoundIdent
	//	*ValueNode_StringLiteral
	//	*ValueNode_CompoundStringLiteral
	//	*ValueNode_UintLiteral
	//	*ValueNode_NegativeIntLiteral
	//	*ValueNode_FloatLiteral
	//	*ValueNode_SpecialFloatLiteral
	//	*ValueNode_SignedFloatLiteral
	//	*ValueNode_ArrayLiteral
	//	*ValueNode_MessageLiteral
	Val isValueNode_Val `protobuf_oneof:"val"`
}

func (x *ValueNode) Reset() {
	*x = ValueNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueNode) ProtoMessage() {}

func (x *ValueNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueNode.ProtoReflect.Descriptor instead.
func (*ValueNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{21}
}

func (m *ValueNode) GetVal() isValueNode_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (x *ValueNode) GetIdent() *IdentNode {
	if x, ok := x.GetVal().(*ValueNode_Ident); ok {
		return x.Ident
	}
	return nil
}

func (x *ValueNode) GetCompoundIdent() *CompoundIdentNode {
	if x, ok := x.GetVal().(*ValueNode_CompoundIdent); ok {
		return x.CompoundIdent
	}
	return nil
}

func (x *ValueNode) GetStringLiteral() *StringLiteralNode {
	if x, ok := x.GetVal().(*ValueNode_StringLiteral); ok {
		return x.StringLiteral
	}
	return nil
}

func (x *ValueNode) GetCompoundStringLiteral() *CompoundStringLiteralNode {
	if x, ok := x.GetVal().(*ValueNode_CompoundStringLiteral); ok {
		return x.CompoundStringLiteral
	}
	return nil
}

func (x *ValueNode) GetUintLiteral() *UintLiteralNode {
	if x, ok := x.GetVal().(*ValueNode_UintLiteral); ok {
		return x.UintLiteral
	}
	return nil
}

func (x *ValueNode) GetNegativeIntLiteral() *NegativeIntLiteralNode {
	if x, ok := x.GetVal().(*ValueNode_NegativeIntLiteral); ok {
		return x.NegativeIntLiteral
	}
	return nil
}

func (x *ValueNode) GetFloatLiteral() *FloatLiteralNode {
	if x, ok := x.GetVal().(*ValueNode_FloatLiteral); ok {
		return x.FloatLiteral
	}
	return nil
}

func (x *ValueNode) GetSpecialFloatLiteral() *SpecialFloatLiteralNode {
	if x, ok := x.GetVal().(*ValueNode_SpecialFloatLiteral); ok {
		return x.SpecialFloatLiteral
	}
	return nil
}

func (x *ValueNode) GetSignedFloatLiteral() *SignedFloatLiteralNode {
	if x, ok := x.GetVal().(*ValueNode_SignedFloatLiteral); ok {
		return x.SignedFloatLiteral
	}
	return nil
}

func (x *ValueNode) GetArrayLiteral() *ArrayLiteralNode {
	if x, ok := x.GetVal().(*ValueNode_ArrayLiteral); ok {
		return x.ArrayLiteral
	}
	return nil
}

func (x *ValueNode) GetMessageLiteral() *MessageLiteralNode {
	if x, ok := x.GetVal().(*ValueNode_MessageLiteral); ok {
		return x.MessageLiteral
	}
	return nil
}

type isValueNode_Val interface {
	isValueNode_Val()
}

type ValueNode_Ident struct {
	Ident *IdentNode `protobuf:"bytes,1,opt,name=ident,proto3,oneof"`
}

type ValueNode_CompoundIdent struct {
	CompoundIdent *CompoundIdentNode `protobuf:"bytes,2,opt,name=compoundIdent,proto3,oneof"`
}

type ValueNode_StringLiteral struct {
	StringLiteral *StringLiteralNode `protobuf:"bytes,3,opt,name=stringLiteral,proto3,oneof"`
}

type ValueNode_CompoundStringLiteral struct {
	CompoundStringLiteral *CompoundStringLiteralNode `protobuf:"bytes,4,opt,name=compoundStringLiteral,proto3,oneof"`
}

type ValueNode_UintLiteral struct {
	UintLiteral *UintLiteralNode `protobuf:"bytes,5,opt,name=uintLiteral,proto3,oneof"`
}

type ValueNode_NegativeIntLiteral struct {
	NegativeIntLiteral *NegativeIntLiteralNode `protobuf:"bytes,6,opt,name=negativeIntLiteral,proto3,oneof"`
}

type ValueNode_FloatLiteral struct {
	FloatLiteral *FloatLiteralNode `protobuf:"bytes,7,opt,name=floatLiteral,proto3,oneof"`
}

type ValueNode_SpecialFloatLiteral struct {
	SpecialFloatLiteral *SpecialFloatLiteralNode `protobuf:"bytes,8,opt,name=specialFloatLiteral,proto3,oneof"`
}

type ValueNode_SignedFloatLiteral struct {
	SignedFloatLiteral *SignedFloatLiteralNode `protobuf:"bytes,9,opt,name=signedFloatLiteral,proto3,oneof"`
}

type ValueNode_ArrayLiteral struct {
	ArrayLiteral *ArrayLiteralNode `protobuf:"bytes,10,opt,name=arrayLiteral,proto3,oneof"`
}

type ValueNode_MessageLiteral struct {
	MessageLiteral *MessageLiteralNode `protobuf:"bytes,11,opt,name=messageLiteral,proto3,oneof"`
}

func (*ValueNode_Ident) isValueNode_Val() {}

func (*ValueNode_CompoundIdent) isValueNode_Val() {}

func (*ValueNode_StringLiteral) isValueNode_Val() {}

func (*ValueNode_CompoundStringLiteral) isValueNode_Val() {}

func (*ValueNode_UintLiteral) isValueNode_Val() {}

func (*ValueNode_NegativeIntLiteral) isValueNode_Val() {}

func (*ValueNode_FloatLiteral) isValueNode_Val() {}

func (*ValueNode_SpecialFloatLiteral) isValueNode_Val() {}

func (*ValueNode_SignedFloatLiteral) isValueNode_Val() {}

func (*ValueNode_ArrayLiteral) isValueNode_Val() {}

func (*ValueNode_MessageLiteral) isValueNode_Val() {}

// SpecialFloatLiteralNode represents a special floating point numeric literal
// for "inf" and "nan" values.
type SpecialFloatLiteralNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword *IdentNode `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Val     float64    `protobuf:"fixed64,2,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *SpecialFloatLiteralNode) Reset() {
	*x = SpecialFloatLiteralNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecialFloatLiteralNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecialFloatLiteralNode) ProtoMessage() {}

func (x *SpecialFloatLiteralNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecialFloatLiteralNode.ProtoReflect.Descriptor instead.
func (*SpecialFloatLiteralNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{22}
}

func (x *SpecialFloatLiteralNode) GetKeyword() *IdentNode {
	if x != nil {
		return x.Keyword
	}
	return nil
}

func (x *SpecialFloatLiteralNode) GetVal() float64 {
	if x != nil {
		return x.Val
	}
	return 0
}

// SignedFloatLiteralNode represents a signed floating point number.
type SignedFloatLiteralNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sign  *RuneNode       `protobuf:"bytes,1,opt,name=sign,proto3" json:"sign,omitempty"`
	Float *FloatValueNode `protobuf:"bytes,2,opt,name=float,proto3" json:"float,omitempty"`
}

func (x *SignedFloatLiteralNode) Reset() {
	*x = SignedFloatLiteralNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedFloatLiteralNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedFloatLiteralNode) ProtoMessage() {}

func (x *SignedFloatLiteralNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedFloatLiteralNode.ProtoReflect.Descriptor instead.
func (*SignedFloatLiteralNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{23}
}

func (x *SignedFloatLiteralNode) GetSign() *RuneNode {
	if x != nil {
		return x.Sign
	}
	return nil
}

func (x *SignedFloatLiteralNode) GetFloat() *FloatValueNode {
	if x != nil {
		return x.Float
	}
	return nil
}

// ArrayLiteralNode represents an array literal, which is only allowed inside of
// a MessageLiteralNode, to indicate values for a repeated field. Example:
//
//	["foo", "bar", "baz"]
type ArrayLiteralNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenBracket  *RuneNode    `protobuf:"bytes,1,opt,name=openBracket,proto3" json:"openBracket,omitempty"`
	Elements     []*ValueNode `protobuf:"bytes,2,rep,name=elements,proto3" json:"elements,omitempty"`
	Commas       []*RuneNode  `protobuf:"bytes,3,rep,name=commas,proto3" json:"commas,omitempty"`
	CloseBracket *RuneNode    `protobuf:"bytes,4,opt,name=closeBracket,proto3" json:"closeBracket,omitempty"`
	Semicolon    *RuneNode    `protobuf:"bytes,5,opt,name=semicolon,proto3" json:"semicolon,omitempty"`
}

func (x *ArrayLiteralNode) Reset() {
	*x = ArrayLiteralNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArrayLiteralNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrayLiteralNode) ProtoMessage() {}

func (x *ArrayLiteralNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrayLiteralNode.ProtoReflect.Descriptor instead.
func (*ArrayLiteralNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{24}
}

func (x *ArrayLiteralNode) GetOpenBracket() *RuneNode {
	if x != nil {
		return x.OpenBracket
	}
	return nil
}

func (x *ArrayLiteralNode) GetElements() []*ValueNode {
	if x != nil {
		return x.Elements
	}
	return nil
}

func (x *ArrayLiteralNode) GetCommas() []*RuneNode {
	if x != nil {
		return x.Commas
	}
	return nil
}

func (x *ArrayLiteralNode) GetCloseBracket() *RuneNode {
	if x != nil {
		return x.CloseBracket
	}
	return nil
}

func (x *ArrayLiteralNode) GetSemicolon() *RuneNode {
	if x != nil {
		return x.Semicolon
	}
	return nil
}

// MessageLiteralNode represents a message literal, which is compatible with the
// protobuf text format and can be used for custom options with message types.
// Example:
//
//	{ foo:1 foo:2 foo:3 bar:<name:"abc" id:123> }
type MessageLiteralNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Open     *RuneNode           `protobuf:"bytes,1,opt,name=open,proto3" json:"open,omitempty"` // should be '{' or '<'
	Elements []*MessageFieldNode `protobuf:"bytes,2,rep,name=elements,proto3" json:"elements,omitempty"`
	// Separator characters between elements, which can be either ','
	// or ';' if present. This slice must be exactly len(Elements) in
	// length, with each item in Elements having one corresponding item
	// in Seps. Separators in message literals are optional, so a given
	// item in this slice may be nil to indicate absence of a separator.
	Seps      []*RuneNode `protobuf:"bytes,3,rep,name=seps,proto3" json:"seps,omitempty"`
	Close     *RuneNode   `protobuf:"bytes,4,opt,name=close,proto3" json:"close,omitempty"` // should be '}' or '>', depending on Open
	Semicolon *RuneNode   `protobuf:"bytes,5,opt,name=semicolon,proto3" json:"semicolon,omitempty"`
}

func (x *MessageLiteralNode) Reset() {
	*x = MessageLiteralNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageLiteralNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageLiteralNode) ProtoMessage() {}

func (x *MessageLiteralNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageLiteralNode.ProtoReflect.Descriptor instead.
func (*MessageLiteralNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{25}
}

func (x *MessageLiteralNode) GetOpen() *RuneNode {
	if x != nil {
		return x.Open
	}
	return nil
}

func (x *MessageLiteralNode) GetElements() []*MessageFieldNode {
	if x != nil {
		return x.Elements
	}
	return nil
}

func (x *MessageLiteralNode) GetSeps() []*RuneNode {
	if x != nil {
		return x.Seps
	}
	return nil
}

func (x *MessageLiteralNode) GetClose() *RuneNode {
	if x != nil {
		return x.Close
	}
	return nil
}

func (x *MessageLiteralNode) GetSemicolon() *RuneNode {
	if x != nil {
		return x.Semicolon
	}
	return nil
}

// FloatValueNode is an AST node that represents a numeric literal with
// a floating point, in scientific notation, or too large to fit in an
// int64 or uint64.
type FloatValueNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Val:
	//
	//	*FloatValueNode_FloatLiteral
	//	*FloatValueNode_SpecialFloatLiteral
	//	*FloatValueNode_UintLiteral
	Val isFloatValueNode_Val `protobuf_oneof:"val"`
}

func (x *FloatValueNode) Reset() {
	*x = FloatValueNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatValueNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatValueNode) ProtoMessage() {}

func (x *FloatValueNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatValueNode.ProtoReflect.Descriptor instead.
func (*FloatValueNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{26}
}

func (m *FloatValueNode) GetVal() isFloatValueNode_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (x *FloatValueNode) GetFloatLiteral() *FloatLiteralNode {
	if x, ok := x.GetVal().(*FloatValueNode_FloatLiteral); ok {
		return x.FloatLiteral
	}
	return nil
}

func (x *FloatValueNode) GetSpecialFloatLiteral() *SpecialFloatLiteralNode {
	if x, ok := x.GetVal().(*FloatValueNode_SpecialFloatLiteral); ok {
		return x.SpecialFloatLiteral
	}
	return nil
}

func (x *FloatValueNode) GetUintLiteral() *UintLiteralNode {
	if x, ok := x.GetVal().(*FloatValueNode_UintLiteral); ok {
		return x.UintLiteral
	}
	return nil
}

type isFloatValueNode_Val interface {
	isFloatValueNode_Val()
}

type FloatValueNode_FloatLiteral struct {
	FloatLiteral *FloatLiteralNode `protobuf:"bytes,1,opt,name=floatLiteral,proto3,oneof"`
}

type FloatValueNode_SpecialFloatLiteral struct {
	SpecialFloatLiteral *SpecialFloatLiteralNode `protobuf:"bytes,2,opt,name=specialFloatLiteral,proto3,oneof"`
}

type FloatValueNode_UintLiteral struct {
	UintLiteral *UintLiteralNode `protobuf:"bytes,3,opt,name=uintLiteral,proto3,oneof"`
}

func (*FloatValueNode_FloatLiteral) isFloatValueNode_Val() {}

func (*FloatValueNode_SpecialFloatLiteral) isFloatValueNode_Val() {}

func (*FloatValueNode_UintLiteral) isFloatValueNode_Val() {}

// MessageFieldNode represents a single field (name and value) inside of a
// message literal. Example:
//
//	foo:"bar"
type MessageFieldNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *FieldReferenceNode `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Sep represents the ':' separator between the name and value. If
	// the value is a message or list literal (and thus starts with '<',
	// '{', or '['), then the separator may be omitted and this field may
	// be nil.
	Sep       *RuneNode  `protobuf:"bytes,2,opt,name=sep,proto3" json:"sep,omitempty"`
	Val       *ValueNode `protobuf:"bytes,3,opt,name=val,proto3" json:"val,omitempty"`
	Semicolon *RuneNode  `protobuf:"bytes,4,opt,name=semicolon,proto3" json:"semicolon,omitempty"`
}

func (x *MessageFieldNode) Reset() {
	*x = MessageFieldNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageFieldNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageFieldNode) ProtoMessage() {}

func (x *MessageFieldNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageFieldNode.ProtoReflect.Descriptor instead.
func (*MessageFieldNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{27}
}

func (x *MessageFieldNode) GetName() *FieldReferenceNode {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *MessageFieldNode) GetSep() *RuneNode {
	if x != nil {
		return x.Sep
	}
	return nil
}

func (x *MessageFieldNode) GetVal() *ValueNode {
	if x != nil {
		return x.Val
	}
	return nil
}

func (x *MessageFieldNode) GetSemicolon() *RuneNode {
	if x != nil {
		return x.Semicolon
	}
	return nil
}

// CompactOptionsNode represents a compact options declaration, as used with
// fields, enum values, and extension ranges. Example:
//
//	[deprecated = true, json_name = "foo_bar"]
type CompactOptionsNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenBracket  *RuneNode     `protobuf:"bytes,1,opt,name=openBracket,proto3" json:"openBracket,omitempty"`
	Options      []*OptionNode `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
	CloseBracket *RuneNode     `protobuf:"bytes,3,opt,name=closeBracket,proto3" json:"closeBracket,omitempty"`
	Semicolon    *RuneNode     `protobuf:"bytes,4,opt,name=semicolon,proto3" json:"semicolon,omitempty"`
}

func (x *CompactOptionsNode) Reset() {
	*x = CompactOptionsNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactOptionsNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactOptionsNode) ProtoMessage() {}

func (x *CompactOptionsNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactOptionsNode.ProtoReflect.Descriptor instead.
func (*CompactOptionsNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{28}
}

func (x *CompactOptionsNode) GetOpenBracket() *RuneNode {
	if x != nil {
		return x.OpenBracket
	}
	return nil
}

func (x *CompactOptionsNode) GetOptions() []*OptionNode {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *CompactOptionsNode) GetCloseBracket() *RuneNode {
	if x != nil {
		return x.CloseBracket
	}
	return nil
}

func (x *CompactOptionsNode) GetSemicolon() *RuneNode {
	if x != nil {
		return x.Semicolon
	}
	return nil
}

// MessageDeclNode is a node in the AST that defines a message type. This
// includes normal message fields as well as implicit messages:
//   - *MessageNode
//   - *GroupNode (the group is a field and inline message type)
//   - *MapFieldNode (map fields implicitly define a MapEntry message type)
type MessageDeclNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Val:
	//
	//	*MessageDeclNode_Message
	//	*MessageDeclNode_Group
	//	*MessageDeclNode_MapField
	Val isMessageDeclNode_Val `protobuf_oneof:"val"`
}

func (x *MessageDeclNode) Reset() {
	*x = MessageDeclNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageDeclNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageDeclNode) ProtoMessage() {}

func (x *MessageDeclNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageDeclNode.ProtoReflect.Descriptor instead.
func (*MessageDeclNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{29}
}

func (m *MessageDeclNode) GetVal() isMessageDeclNode_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (x *MessageDeclNode) GetMessage() *MessageNode {
	if x, ok := x.GetVal().(*MessageDeclNode_Message); ok {
		return x.Message
	}
	return nil
}

func (x *MessageDeclNode) GetGroup() *GroupNode {
	if x, ok := x.GetVal().(*MessageDeclNode_Group); ok {
		return x.Group
	}
	return nil
}

func (x *MessageDeclNode) GetMapField() *MapFieldNode {
	if x, ok := x.GetVal().(*MessageDeclNode_MapField); ok {
		return x.MapField
	}
	return nil
}

type isMessageDeclNode_Val interface {
	isMessageDeclNode_Val()
}

type MessageDeclNode_Message struct {
	Message *MessageNode `protobuf:"bytes,1,opt,name=message,proto3,oneof"`
}

type MessageDeclNode_Group struct {
	Group *GroupNode `protobuf:"bytes,2,opt,name=group,proto3,oneof"`
}

type MessageDeclNode_MapField struct {
	MapField *MapFieldNode `protobuf:"bytes,3,opt,name=mapField,proto3,oneof"`
}

func (*MessageDeclNode_Message) isMessageDeclNode_Val() {}

func (*MessageDeclNode_Group) isMessageDeclNode_Val() {}

func (*MessageDeclNode_MapField) isMessageDeclNode_Val() {}

// MessageNode represents a message declaration. Example:
//
//	message Foo {
//	  string name = 1;
//	  repeated string labels = 2;
//	  bytes extra = 3;
//	}
type MessageNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword    *IdentNode        `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Name       *IdentNode        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OpenBrace  *RuneNode         `protobuf:"bytes,3,opt,name=openBrace,proto3" json:"openBrace,omitempty"`
	Decls      []*MessageElement `protobuf:"bytes,4,rep,name=decls,proto3" json:"decls,omitempty"`
	CloseBrace *RuneNode         `protobuf:"bytes,5,opt,name=closeBrace,proto3" json:"closeBrace,omitempty"`
	Semicolon  *RuneNode         `protobuf:"bytes,6,opt,name=semicolon,proto3" json:"semicolon,omitempty"`
}

func (x *MessageNode) Reset() {
	*x = MessageNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageNode) ProtoMessage() {}

func (x *MessageNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageNode.ProtoReflect.Descriptor instead.
func (*MessageNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{30}
}

func (x *MessageNode) GetKeyword() *IdentNode {
	if x != nil {
		return x.Keyword
	}
	return nil
}

func (x *MessageNode) GetName() *IdentNode {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *MessageNode) GetOpenBrace() *RuneNode {
	if x != nil {
		return x.OpenBrace
	}
	return nil
}

func (x *MessageNode) GetDecls() []*MessageElement {
	if x != nil {
		return x.Decls
	}
	return nil
}

func (x *MessageNode) GetCloseBrace() *RuneNode {
	if x != nil {
		return x.CloseBrace
	}
	return nil
}

func (x *MessageNode) GetSemicolon() *RuneNode {
	if x != nil {
		return x.Semicolon
	}
	return nil
}

// MessageElement is an interface implemented by all AST nodes that can
// appear in a message body.
type MessageElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Val:
	//
	//	*MessageElement_Option
	//	*MessageElement_Field
	//	*MessageElement_MapField
	//	*MessageElement_Oneof
	//	*MessageElement_Group
	//	*MessageElement_Message
	//	*MessageElement_Enum
	//	*MessageElement_Extend
	//	*MessageElement_ExtensionRange
	//	*MessageElement_Reserved
	//	*MessageElement_Empty
	Val isMessageElement_Val `protobuf_oneof:"val"`
}

func (x *MessageElement) Reset() {
	*x = MessageElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageElement) ProtoMessage() {}

func (x *MessageElement) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageElement.ProtoReflect.Descriptor instead.
func (*MessageElement) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{31}
}

func (m *MessageElement) GetVal() isMessageElement_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (x *MessageElement) GetOption() *OptionNode {
	if x, ok := x.GetVal().(*MessageElement_Option); ok {
		return x.Option
	}
	return nil
}

func (x *MessageElement) GetField() *FieldNode {
	if x, ok := x.GetVal().(*MessageElement_Field); ok {
		return x.Field
	}
	return nil
}

func (x *MessageElement) GetMapField() *MapFieldNode {
	if x, ok := x.GetVal().(*MessageElement_MapField); ok {
		return x.MapField
	}
	return nil
}

func (x *MessageElement) GetOneof() *OneofNode {
	if x, ok := x.GetVal().(*MessageElement_Oneof); ok {
		return x.Oneof
	}
	return nil
}

func (x *MessageElement) GetGroup() *GroupNode {
	if x, ok := x.GetVal().(*MessageElement_Group); ok {
		return x.Group
	}
	return nil
}

func (x *MessageElement) GetMessage() *MessageNode {
	if x, ok := x.GetVal().(*MessageElement_Message); ok {
		return x.Message
	}
	return nil
}

func (x *MessageElement) GetEnum() *EnumNode {
	if x, ok := x.GetVal().(*MessageElement_Enum); ok {
		return x.Enum
	}
	return nil
}

func (x *MessageElement) GetExtend() *ExtendNode {
	if x, ok := x.GetVal().(*MessageElement_Extend); ok {
		return x.Extend
	}
	return nil
}

func (x *MessageElement) GetExtensionRange() *ExtensionRangeNode {
	if x, ok := x.GetVal().(*MessageElement_ExtensionRange); ok {
		return x.ExtensionRange
	}
	return nil
}

func (x *MessageElement) GetReserved() *ReservedNode {
	if x, ok := x.GetVal().(*MessageElement_Reserved); ok {
		return x.Reserved
	}
	return nil
}

func (x *MessageElement) GetEmpty() *EmptyDeclNode {
	if x, ok := x.GetVal().(*MessageElement_Empty); ok {
		return x.Empty
	}
	return nil
}

type isMessageElement_Val interface {
	isMessageElement_Val()
}

type MessageElement_Option struct {
	Option *OptionNode `protobuf:"bytes,1,opt,name=option,proto3,oneof"`
}

type MessageElement_Field struct {
	Field *FieldNode `protobuf:"bytes,2,opt,name=field,proto3,oneof"`
}

type MessageElement_MapField struct {
	MapField *MapFieldNode `protobuf:"bytes,3,opt,name=mapField,proto3,oneof"`
}

type MessageElement_Oneof struct {
	Oneof *OneofNode `protobuf:"bytes,4,opt,name=oneof,proto3,oneof"`
}

type MessageElement_Group struct {
	Group *GroupNode `protobuf:"bytes,5,opt,name=group,proto3,oneof"`
}

type MessageElement_Message struct {
	Message *MessageNode `protobuf:"bytes,6,opt,name=message,proto3,oneof"`
}

type MessageElement_Enum struct {
	Enum *EnumNode `protobuf:"bytes,7,opt,name=enum,proto3,oneof"`
}

type MessageElement_Extend struct {
	Extend *ExtendNode `protobuf:"bytes,8,opt,name=extend,proto3,oneof"`
}

type MessageElement_ExtensionRange struct {
	ExtensionRange *ExtensionRangeNode `protobuf:"bytes,9,opt,name=extensionRange,proto3,oneof"`
}

type MessageElement_Reserved struct {
	Reserved *ReservedNode `protobuf:"bytes,10,opt,name=reserved,proto3,oneof"`
}

type MessageElement_Empty struct {
	Empty *EmptyDeclNode `protobuf:"bytes,11,opt,name=empty,proto3,oneof"`
}

func (*MessageElement_Option) isMessageElement_Val() {}

func (*MessageElement_Field) isMessageElement_Val() {}

func (*MessageElement_MapField) isMessageElement_Val() {}

func (*MessageElement_Oneof) isMessageElement_Val() {}

func (*MessageElement_Group) isMessageElement_Val() {}

func (*MessageElement_Message) isMessageElement_Val() {}

func (*MessageElement_Enum) isMessageElement_Val() {}

func (*MessageElement_Extend) isMessageElement_Val() {}

func (*MessageElement_ExtensionRange) isMessageElement_Val() {}

func (*MessageElement_Reserved) isMessageElement_Val() {}

func (*MessageElement_Empty) isMessageElement_Val() {}

// ExtendElement is an interface implemented by all AST nodes that can
// appear in an extend body.
type ExtendElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Val:
	//
	//	*ExtendElement_Field
	//	*ExtendElement_Group
	//	*ExtendElement_Empty
	Val isExtendElement_Val `protobuf_oneof:"val"`
}

func (x *ExtendElement) Reset() {
	*x = ExtendElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendElement) ProtoMessage() {}

func (x *ExtendElement) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendElement.ProtoReflect.Descriptor instead.
func (*ExtendElement) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{32}
}

func (m *ExtendElement) GetVal() isExtendElement_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (x *ExtendElement) GetField() *FieldNode {
	if x, ok := x.GetVal().(*ExtendElement_Field); ok {
		return x.Field
	}
	return nil
}

func (x *ExtendElement) GetGroup() *GroupNode {
	if x, ok := x.GetVal().(*ExtendElement_Group); ok {
		return x.Group
	}
	return nil
}

func (x *ExtendElement) GetEmpty() *EmptyDeclNode {
	if x, ok := x.GetVal().(*ExtendElement_Empty); ok {
		return x.Empty
	}
	return nil
}

type isExtendElement_Val interface {
	isExtendElement_Val()
}

type ExtendElement_Field struct {
	Field *FieldNode `protobuf:"bytes,1,opt,name=field,proto3,oneof"`
}

type ExtendElement_Group struct {
	Group *GroupNode `protobuf:"bytes,2,opt,name=group,proto3,oneof"`
}

type ExtendElement_Empty struct {
	Empty *EmptyDeclNode `protobuf:"bytes,3,opt,name=empty,proto3,oneof"`
}

func (*ExtendElement_Field) isExtendElement_Val() {}

func (*ExtendElement_Group) isExtendElement_Val() {}

func (*ExtendElement_Empty) isExtendElement_Val() {}

// FieldNode represents a normal field declaration (not groups or maps). It
// can represent extension fields as well as non-extension fields (both inside
// of messages and inside of one-ofs). Example:
//
//	optional string foo = 1;
type FieldNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label     *IdentNode          `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	FieldType *IdentValueNode     `protobuf:"bytes,2,opt,name=fieldType,proto3" json:"fieldType,omitempty"`
	Name      *IdentNode          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Equals    *RuneNode           `protobuf:"bytes,4,opt,name=equals,proto3" json:"equals,omitempty"`
	Tag       *UintLiteralNode    `protobuf:"bytes,5,opt,name=tag,proto3" json:"tag,omitempty"`
	Options   *CompactOptionsNode `protobuf:"bytes,6,opt,name=options,proto3" json:"options,omitempty"`
	Semicolon *RuneNode           `protobuf:"bytes,7,opt,name=semicolon,proto3" json:"semicolon,omitempty"`
}

func (x *FieldNode) Reset() {
	*x = FieldNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldNode) ProtoMessage() {}

func (x *FieldNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldNode.ProtoReflect.Descriptor instead.
func (*FieldNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{33}
}

func (x *FieldNode) GetLabel() *IdentNode {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *FieldNode) GetFieldType() *IdentValueNode {
	if x != nil {
		return x.FieldType
	}
	return nil
}

func (x *FieldNode) GetName() *IdentNode {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *FieldNode) GetEquals() *RuneNode {
	if x != nil {
		return x.Equals
	}
	return nil
}

func (x *FieldNode) GetTag() *UintLiteralNode {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *FieldNode) GetOptions() *CompactOptionsNode {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *FieldNode) GetSemicolon() *RuneNode {
	if x != nil {
		return x.Semicolon
	}
	return nil
}

// MapFieldNode represents a map field declaration. Example:
//
//	map<string,string> replacements = 3 [deprecated = true];
type MapFieldNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapType   *MapTypeNode        `protobuf:"bytes,1,opt,name=mapType,proto3" json:"mapType,omitempty"`
	Name      *IdentNode          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Equals    *RuneNode           `protobuf:"bytes,3,opt,name=equals,proto3" json:"equals,omitempty"`
	Tag       *UintLiteralNode    `protobuf:"bytes,4,opt,name=tag,proto3" json:"tag,omitempty"`
	Options   *CompactOptionsNode `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`
	Semicolon *RuneNode           `protobuf:"bytes,6,opt,name=semicolon,proto3" json:"semicolon,omitempty"`
}

func (x *MapFieldNode) Reset() {
	*x = MapFieldNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapFieldNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapFieldNode) ProtoMessage() {}

func (x *MapFieldNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapFieldNode.ProtoReflect.Descriptor instead.
func (*MapFieldNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{34}
}

func (x *MapFieldNode) GetMapType() *MapTypeNode {
	if x != nil {
		return x.MapType
	}
	return nil
}

func (x *MapFieldNode) GetName() *IdentNode {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *MapFieldNode) GetEquals() *RuneNode {
	if x != nil {
		return x.Equals
	}
	return nil
}

func (x *MapFieldNode) GetTag() *UintLiteralNode {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *MapFieldNode) GetOptions() *CompactOptionsNode {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *MapFieldNode) GetSemicolon() *RuneNode {
	if x != nil {
		return x.Semicolon
	}
	return nil
}

// OneofNode represents a one-of declaration. Example:
//
//	oneof query {
//	  string by_name = 2;
//	  Type by_type = 3;
//	  Address by_address = 4;
//	  Labels by_label = 5;
//	}
type OneofNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword    *IdentNode      `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Name       *IdentNode      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OpenBrace  *RuneNode       `protobuf:"bytes,3,opt,name=openBrace,proto3" json:"openBrace,omitempty"`
	Decls      []*OneofElement `protobuf:"bytes,4,rep,name=decls,proto3" json:"decls,omitempty"`
	CloseBrace *RuneNode       `protobuf:"bytes,5,opt,name=closeBrace,proto3" json:"closeBrace,omitempty"`
	Semicolon  *RuneNode       `protobuf:"bytes,6,opt,name=semicolon,proto3" json:"semicolon,omitempty"`
}

func (x *OneofNode) Reset() {
	*x = OneofNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneofNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneofNode) ProtoMessage() {}

func (x *OneofNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneofNode.ProtoReflect.Descriptor instead.
func (*OneofNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{35}
}

func (x *OneofNode) GetKeyword() *IdentNode {
	if x != nil {
		return x.Keyword
	}
	return nil
}

func (x *OneofNode) GetName() *IdentNode {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *OneofNode) GetOpenBrace() *RuneNode {
	if x != nil {
		return x.OpenBrace
	}
	return nil
}

func (x *OneofNode) GetDecls() []*OneofElement {
	if x != nil {
		return x.Decls
	}
	return nil
}

func (x *OneofNode) GetCloseBrace() *RuneNode {
	if x != nil {
		return x.CloseBrace
	}
	return nil
}

func (x *OneofNode) GetSemicolon() *RuneNode {
	if x != nil {
		return x.Semicolon
	}
	return nil
}

// GroupNode represents a group declaration, which doubles as a field and inline
// message declaration. It can represent extension fields as well as
// non-extension fields (both inside of messages and inside of one-ofs).
// Example:
//
//	optional group Key = 4 {
//	  optional uint64 id = 1;
//	  optional string name = 2;
//	}
type GroupNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label      *IdentNode          `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Keyword    *IdentNode          `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Name       *IdentNode          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Equals     *RuneNode           `protobuf:"bytes,4,opt,name=equals,proto3" json:"equals,omitempty"`
	Tag        *UintLiteralNode    `protobuf:"bytes,5,opt,name=tag,proto3" json:"tag,omitempty"`
	Options    *CompactOptionsNode `protobuf:"bytes,6,opt,name=options,proto3" json:"options,omitempty"`
	OpenBrace  *RuneNode           `protobuf:"bytes,7,opt,name=openBrace,proto3" json:"openBrace,omitempty"`
	Decls      []*MessageElement   `protobuf:"bytes,8,rep,name=decls,proto3" json:"decls,omitempty"`
	CloseBrace *RuneNode           `protobuf:"bytes,9,opt,name=closeBrace,proto3" json:"closeBrace,omitempty"`
	Semicolon  *RuneNode           `protobuf:"bytes,10,opt,name=semicolon,proto3" json:"semicolon,omitempty"`
}

func (x *GroupNode) Reset() {
	*x = GroupNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupNode) ProtoMessage() {}

func (x *GroupNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupNode.ProtoReflect.Descriptor instead.
func (*GroupNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{36}
}

func (x *GroupNode) GetLabel() *IdentNode {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *GroupNode) GetKeyword() *IdentNode {
	if x != nil {
		return x.Keyword
	}
	return nil
}

func (x *GroupNode) GetName() *IdentNode {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *GroupNode) GetEquals() *RuneNode {
	if x != nil {
		return x.Equals
	}
	return nil
}

func (x *GroupNode) GetTag() *UintLiteralNode {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *GroupNode) GetOptions() *CompactOptionsNode {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *GroupNode) GetOpenBrace() *RuneNode {
	if x != nil {
		return x.OpenBrace
	}
	return nil
}

func (x *GroupNode) GetDecls() []*MessageElement {
	if x != nil {
		return x.Decls
	}
	return nil
}

func (x *GroupNode) GetCloseBrace() *RuneNode {
	if x != nil {
		return x.CloseBrace
	}
	return nil
}

func (x *GroupNode) GetSemicolon() *RuneNode {
	if x != nil {
		return x.Semicolon
	}
	return nil
}

// EnumNode represents an enum declaration. Example:
//
//	enum Foo { BAR = 0; BAZ = 1 }
type EnumNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword    *IdentNode     `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Name       *IdentNode     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OpenBrace  *RuneNode      `protobuf:"bytes,3,opt,name=openBrace,proto3" json:"openBrace,omitempty"`
	Decls      []*EnumElement `protobuf:"bytes,4,rep,name=decls,proto3" json:"decls,omitempty"`
	CloseBrace *RuneNode      `protobuf:"bytes,5,opt,name=closeBrace,proto3" json:"closeBrace,omitempty"`
	Semicolon  *RuneNode      `protobuf:"bytes,6,opt,name=semicolon,proto3" json:"semicolon,omitempty"`
}

func (x *EnumNode) Reset() {
	*x = EnumNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumNode) ProtoMessage() {}

func (x *EnumNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumNode.ProtoReflect.Descriptor instead.
func (*EnumNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{37}
}

func (x *EnumNode) GetKeyword() *IdentNode {
	if x != nil {
		return x.Keyword
	}
	return nil
}

func (x *EnumNode) GetName() *IdentNode {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *EnumNode) GetOpenBrace() *RuneNode {
	if x != nil {
		return x.OpenBrace
	}
	return nil
}

func (x *EnumNode) GetDecls() []*EnumElement {
	if x != nil {
		return x.Decls
	}
	return nil
}

func (x *EnumNode) GetCloseBrace() *RuneNode {
	if x != nil {
		return x.CloseBrace
	}
	return nil
}

func (x *EnumNode) GetSemicolon() *RuneNode {
	if x != nil {
		return x.Semicolon
	}
	return nil
}

// ExtendNode represents a declaration of extension fields. Example:
//
//	extend google.protobuf.FieldOptions {
//	  bool redacted = 33333;
//	}
type ExtendNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword    *IdentNode       `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Extendee   *IdentValueNode  `protobuf:"bytes,2,opt,name=extendee,proto3" json:"extendee,omitempty"`
	OpenBrace  *RuneNode        `protobuf:"bytes,3,opt,name=openBrace,proto3" json:"openBrace,omitempty"`
	Decls      []*ExtendElement `protobuf:"bytes,4,rep,name=decls,proto3" json:"decls,omitempty"`
	CloseBrace *RuneNode        `protobuf:"bytes,5,opt,name=closeBrace,proto3" json:"closeBrace,omitempty"`
	Semicolon  *RuneNode        `protobuf:"bytes,6,opt,name=semicolon,proto3" json:"semicolon,omitempty"`
}

func (x *ExtendNode) Reset() {
	*x = ExtendNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendNode) ProtoMessage() {}

func (x *ExtendNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendNode.ProtoReflect.Descriptor instead.
func (*ExtendNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{38}
}

func (x *ExtendNode) GetKeyword() *IdentNode {
	if x != nil {
		return x.Keyword
	}
	return nil
}

func (x *ExtendNode) GetExtendee() *IdentValueNode {
	if x != nil {
		return x.Extendee
	}
	return nil
}

func (x *ExtendNode) GetOpenBrace() *RuneNode {
	if x != nil {
		return x.OpenBrace
	}
	return nil
}

func (x *ExtendNode) GetDecls() []*ExtendElement {
	if x != nil {
		return x.Decls
	}
	return nil
}

func (x *ExtendNode) GetCloseBrace() *RuneNode {
	if x != nil {
		return x.CloseBrace
	}
	return nil
}

func (x *ExtendNode) GetSemicolon() *RuneNode {
	if x != nil {
		return x.Semicolon
	}
	return nil
}

// ExtensionRangeNode represents an extension range declaration in an extendable
// message. Example:
//
//	extensions 100 to max;
type ExtensionRangeNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword *IdentNode   `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Ranges  []*RangeNode `protobuf:"bytes,2,rep,name=ranges,proto3" json:"ranges,omitempty"`
	// Commas represent the separating ',' characters between ranges. The
	// length of this slice must be exactly len(Ranges)-1, each item in Ranges
	// having a corresponding item in this slice *except the last* (since a
	// trailing comma is not allowed).
	Commas    []*RuneNode         `protobuf:"bytes,3,rep,name=commas,proto3" json:"commas,omitempty"`
	Options   *CompactOptionsNode `protobuf:"bytes,4,opt,name=options,proto3" json:"options,omitempty"`
	Semicolon *RuneNode           `protobuf:"bytes,5,opt,name=semicolon,proto3" json:"semicolon,omitempty"`
}

func (x *ExtensionRangeNode) Reset() {
	*x = ExtensionRangeNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtensionRangeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionRangeNode) ProtoMessage() {}

func (x *ExtensionRangeNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionRangeNode.ProtoReflect.Descriptor instead.
func (*ExtensionRangeNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{39}
}

func (x *ExtensionRangeNode) GetKeyword() *IdentNode {
	if x != nil {
		return x.Keyword
	}
	return nil
}

func (x *ExtensionRangeNode) GetRanges() []*RangeNode {
	if x != nil {
		return x.Ranges
	}
	return nil
}

func (x *ExtensionRangeNode) GetCommas() []*RuneNode {
	if x != nil {
		return x.Commas
	}
	return nil
}

func (x *ExtensionRangeNode) GetOptions() *CompactOptionsNode {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ExtensionRangeNode) GetSemicolon() *RuneNode {
	if x != nil {
		return x.Semicolon
	}
	return nil
}

// ReservedNode represents reserved declaration, which can be used to reserve
// either names or numbers. Examples:
//
//	reserved 1, 10-12, 15;
//	reserved "foo", "bar", "baz";
//	reserved foo, bar, baz;
type ReservedNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword *IdentNode `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	// If non-empty, this node represents reserved ranges, and Names and Identifiers
	// will be empty.
	Ranges []*RangeNode `protobuf:"bytes,2,rep,name=ranges,proto3" json:"ranges,omitempty"`
	// If non-empty, this node represents reserved names as string literals, and
	// Ranges and Identifiers will be empty. String literals are used for reserved
	// names in proto2 and proto3 syntax.
	Names []*StringValueNode `protobuf:"bytes,3,rep,name=names,proto3" json:"names,omitempty"`
	// If non-empty, this node represents reserved names as identifiers, and Ranges
	// and Names will be empty. Identifiers are used for reserved names in editions.
	Identifiers []*IdentNode `protobuf:"bytes,4,rep,name=identifiers,proto3" json:"identifiers,omitempty"`
	// Commas represent the separating ',' characters between options. The
	// length of this slice must be exactly len(Ranges)-1 or len(Names)-1, depending
	// on whether this node represents reserved ranges or reserved names. Each item
	// in Ranges or Names has a corresponding item in this slice *except the last*
	// (since a trailing comma is not allowed).
	Commas    []*RuneNode `protobuf:"bytes,5,rep,name=commas,proto3" json:"commas,omitempty"`
	Semicolon *RuneNode   `protobuf:"bytes,6,opt,name=semicolon,proto3" json:"semicolon,omitempty"`
}

func (x *ReservedNode) Reset() {
	*x = ReservedNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReservedNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReservedNode) ProtoMessage() {}

func (x *ReservedNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReservedNode.ProtoReflect.Descriptor instead.
func (*ReservedNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{40}
}

func (x *ReservedNode) GetKeyword() *IdentNode {
	if x != nil {
		return x.Keyword
	}
	return nil
}

func (x *ReservedNode) GetRanges() []*RangeNode {
	if x != nil {
		return x.Ranges
	}
	return nil
}

func (x *ReservedNode) GetNames() []*StringValueNode {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *ReservedNode) GetIdentifiers() []*IdentNode {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

func (x *ReservedNode) GetCommas() []*RuneNode {
	if x != nil {
		return x.Commas
	}
	return nil
}

func (x *ReservedNode) GetSemicolon() *RuneNode {
	if x != nil {
		return x.Semicolon
	}
	return nil
}

// MapTypeNode represents the type declaration for a map field. It defines
// both the key and value types for the map. Example:
//
//	map<string, Values>
type MapTypeNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword    *IdentNode      `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	OpenAngle  *RuneNode       `protobuf:"bytes,2,opt,name=openAngle,proto3" json:"openAngle,omitempty"`
	KeyType    *IdentNode      `protobuf:"bytes,3,opt,name=keyType,proto3" json:"keyType,omitempty"`
	Comma      *RuneNode       `protobuf:"bytes,4,opt,name=comma,proto3" json:"comma,omitempty"`
	ValueType  *IdentValueNode `protobuf:"bytes,5,opt,name=valueType,proto3" json:"valueType,omitempty"`
	CloseAngle *RuneNode       `protobuf:"bytes,6,opt,name=closeAngle,proto3" json:"closeAngle,omitempty"`
	Semicolon  *RuneNode       `protobuf:"bytes,7,opt,name=semicolon,proto3" json:"semicolon,omitempty"`
}

func (x *MapTypeNode) Reset() {
	*x = MapTypeNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapTypeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapTypeNode) ProtoMessage() {}

func (x *MapTypeNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapTypeNode.ProtoReflect.Descriptor instead.
func (*MapTypeNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{41}
}

func (x *MapTypeNode) GetKeyword() *IdentNode {
	if x != nil {
		return x.Keyword
	}
	return nil
}

func (x *MapTypeNode) GetOpenAngle() *RuneNode {
	if x != nil {
		return x.OpenAngle
	}
	return nil
}

func (x *MapTypeNode) GetKeyType() *IdentNode {
	if x != nil {
		return x.KeyType
	}
	return nil
}

func (x *MapTypeNode) GetComma() *RuneNode {
	if x != nil {
		return x.Comma
	}
	return nil
}

func (x *MapTypeNode) GetValueType() *IdentValueNode {
	if x != nil {
		return x.ValueType
	}
	return nil
}

func (x *MapTypeNode) GetCloseAngle() *RuneNode {
	if x != nil {
		return x.CloseAngle
	}
	return nil
}

func (x *MapTypeNode) GetSemicolon() *RuneNode {
	if x != nil {
		return x.Semicolon
	}
	return nil
}

type OneofElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Val:
	//
	//	*OneofElement_Option
	//	*OneofElement_Field
	//	*OneofElement_Group
	Val isOneofElement_Val `protobuf_oneof:"val"`
}

func (x *OneofElement) Reset() {
	*x = OneofElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneofElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneofElement) ProtoMessage() {}

func (x *OneofElement) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneofElement.ProtoReflect.Descriptor instead.
func (*OneofElement) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{42}
}

func (m *OneofElement) GetVal() isOneofElement_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (x *OneofElement) GetOption() *OptionNode {
	if x, ok := x.GetVal().(*OneofElement_Option); ok {
		return x.Option
	}
	return nil
}

func (x *OneofElement) GetField() *FieldNode {
	if x, ok := x.GetVal().(*OneofElement_Field); ok {
		return x.Field
	}
	return nil
}

func (x *OneofElement) GetGroup() *GroupNode {
	if x, ok := x.GetVal().(*OneofElement_Group); ok {
		return x.Group
	}
	return nil
}

type isOneofElement_Val interface {
	isOneofElement_Val()
}

type OneofElement_Option struct {
	Option *OptionNode `protobuf:"bytes,1,opt,name=option,proto3,oneof"`
}

type OneofElement_Field struct {
	Field *FieldNode `protobuf:"bytes,2,opt,name=field,proto3,oneof"`
}

type OneofElement_Group struct {
	Group *GroupNode `protobuf:"bytes,3,opt,name=group,proto3,oneof"`
}

func (*OneofElement_Option) isOneofElement_Val() {}

func (*OneofElement_Field) isOneofElement_Val() {}

func (*OneofElement_Group) isOneofElement_Val() {}

// EnumElement is an interface implemented by all AST nodes that can
// appear in the body of an enum declaration.
type EnumElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Val:
	//
	//	*EnumElement_Option
	//	*EnumElement_EnumValue
	//	*EnumElement_Reserved
	Val isEnumElement_Val `protobuf_oneof:"val"`
}

func (x *EnumElement) Reset() {
	*x = EnumElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumElement) ProtoMessage() {}

func (x *EnumElement) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumElement.ProtoReflect.Descriptor instead.
func (*EnumElement) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{43}
}

func (m *EnumElement) GetVal() isEnumElement_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (x *EnumElement) GetOption() *OptionNode {
	if x, ok := x.GetVal().(*EnumElement_Option); ok {
		return x.Option
	}
	return nil
}

func (x *EnumElement) GetEnumValue() *EnumValueNode {
	if x, ok := x.GetVal().(*EnumElement_EnumValue); ok {
		return x.EnumValue
	}
	return nil
}

func (x *EnumElement) GetReserved() *ReservedNode {
	if x, ok := x.GetVal().(*EnumElement_Reserved); ok {
		return x.Reserved
	}
	return nil
}

type isEnumElement_Val interface {
	isEnumElement_Val()
}

type EnumElement_Option struct {
	Option *OptionNode `protobuf:"bytes,1,opt,name=option,proto3,oneof"`
}

type EnumElement_EnumValue struct {
	EnumValue *EnumValueNode `protobuf:"bytes,2,opt,name=enumValue,proto3,oneof"`
}

type EnumElement_Reserved struct {
	Reserved *ReservedNode `protobuf:"bytes,3,opt,name=reserved,proto3,oneof"`
}

func (*EnumElement_Option) isEnumElement_Val() {}

func (*EnumElement_EnumValue) isEnumElement_Val() {}

func (*EnumElement_Reserved) isEnumElement_Val() {}

type EnumValueNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      *IdentNode          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Equals    *RuneNode           `protobuf:"bytes,2,opt,name=equals,proto3" json:"equals,omitempty"`
	Number    *IntValueNode       `protobuf:"bytes,3,opt,name=number,proto3" json:"number,omitempty"`
	Options   *CompactOptionsNode `protobuf:"bytes,4,opt,name=options,proto3" json:"options,omitempty"`
	Semicolon *RuneNode           `protobuf:"bytes,5,opt,name=semicolon,proto3" json:"semicolon,omitempty"`
}

func (x *EnumValueNode) Reset() {
	*x = EnumValueNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumValueNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumValueNode) ProtoMessage() {}

func (x *EnumValueNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumValueNode.ProtoReflect.Descriptor instead.
func (*EnumValueNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{44}
}

func (x *EnumValueNode) GetName() *IdentNode {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *EnumValueNode) GetEquals() *RuneNode {
	if x != nil {
		return x.Equals
	}
	return nil
}

func (x *EnumValueNode) GetNumber() *IntValueNode {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *EnumValueNode) GetOptions() *CompactOptionsNode {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *EnumValueNode) GetSemicolon() *RuneNode {
	if x != nil {
		return x.Semicolon
	}
	return nil
}

// RangeNode represents a range expression, used in both extension ranges and
// reserved ranges. Example:
//
//	1000 to max
type RangeNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartVal *IntValueNode `protobuf:"bytes,1,opt,name=startVal,proto3" json:"startVal,omitempty"`
	// if To is non-nil, then exactly one of EndVal or Max must also be non-nil
	To *IdentNode `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// EndVal and Max are mutually exclusive
	EndVal *IntValueNode `protobuf:"bytes,3,opt,name=endVal,proto3" json:"endVal,omitempty"`
	Max    *IdentNode    `protobuf:"bytes,4,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *RangeNode) Reset() {
	*x = RangeNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeNode) ProtoMessage() {}

func (x *RangeNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeNode.ProtoReflect.Descriptor instead.
func (*RangeNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{45}
}

func (x *RangeNode) GetStartVal() *IntValueNode {
	if x != nil {
		return x.StartVal
	}
	return nil
}

func (x *RangeNode) GetTo() *IdentNode {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *RangeNode) GetEndVal() *IntValueNode {
	if x != nil {
		return x.EndVal
	}
	return nil
}

func (x *RangeNode) GetMax() *IdentNode {
	if x != nil {
		return x.Max
	}
	return nil
}

// IntValueNode is an AST node that represents an integer literal. If
// an integer literal is too large for an int64 (or uint64 for
// positive literals), it is represented instead by a FloatValueNode.
type IntValueNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Val:
	//
	//	*IntValueNode_UintLiteral
	//	*IntValueNode_NegativeIntLiteral
	Val isIntValueNode_Val `protobuf_oneof:"val"`
}

func (x *IntValueNode) Reset() {
	*x = IntValueNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntValueNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntValueNode) ProtoMessage() {}

func (x *IntValueNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntValueNode.ProtoReflect.Descriptor instead.
func (*IntValueNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{46}
}

func (m *IntValueNode) GetVal() isIntValueNode_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (x *IntValueNode) GetUintLiteral() *UintLiteralNode {
	if x, ok := x.GetVal().(*IntValueNode_UintLiteral); ok {
		return x.UintLiteral
	}
	return nil
}

func (x *IntValueNode) GetNegativeIntLiteral() *NegativeIntLiteralNode {
	if x, ok := x.GetVal().(*IntValueNode_NegativeIntLiteral); ok {
		return x.NegativeIntLiteral
	}
	return nil
}

type isIntValueNode_Val interface {
	isIntValueNode_Val()
}

type IntValueNode_UintLiteral struct {
	UintLiteral *UintLiteralNode `protobuf:"bytes,1,opt,name=uintLiteral,proto3,oneof"`
}

type IntValueNode_NegativeIntLiteral struct {
	NegativeIntLiteral *NegativeIntLiteralNode `protobuf:"bytes,2,opt,name=negativeIntLiteral,proto3,oneof"`
}

func (*IntValueNode_UintLiteral) isIntValueNode_Val() {}

func (*IntValueNode_NegativeIntLiteral) isIntValueNode_Val() {}

// ServiceNode represents a service declaration. Example:
//
//	service Foo {
//	  rpc Bar (Baz) returns (Bob);
//	  rpc Frobnitz (stream Parts) returns (Gyzmeaux);
//	}
type ServiceNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword    *IdentNode        `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Name       *IdentNode        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OpenBrace  *RuneNode         `protobuf:"bytes,3,opt,name=openBrace,proto3" json:"openBrace,omitempty"`
	Decls      []*ServiceElement `protobuf:"bytes,4,rep,name=decls,proto3" json:"decls,omitempty"`
	CloseBrace *RuneNode         `protobuf:"bytes,5,opt,name=closeBrace,proto3" json:"closeBrace,omitempty"`
	Semicolon  *RuneNode         `protobuf:"bytes,6,opt,name=semicolon,proto3" json:"semicolon,omitempty"`
}

func (x *ServiceNode) Reset() {
	*x = ServiceNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceNode) ProtoMessage() {}

func (x *ServiceNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceNode.ProtoReflect.Descriptor instead.
func (*ServiceNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{47}
}

func (x *ServiceNode) GetKeyword() *IdentNode {
	if x != nil {
		return x.Keyword
	}
	return nil
}

func (x *ServiceNode) GetName() *IdentNode {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ServiceNode) GetOpenBrace() *RuneNode {
	if x != nil {
		return x.OpenBrace
	}
	return nil
}

func (x *ServiceNode) GetDecls() []*ServiceElement {
	if x != nil {
		return x.Decls
	}
	return nil
}

func (x *ServiceNode) GetCloseBrace() *RuneNode {
	if x != nil {
		return x.CloseBrace
	}
	return nil
}

func (x *ServiceNode) GetSemicolon() *RuneNode {
	if x != nil {
		return x.Semicolon
	}
	return nil
}

type ServiceElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Val:
	//
	//	*ServiceElement_Option
	//	*ServiceElement_Rpc
	Val isServiceElement_Val `protobuf_oneof:"val"`
}

func (x *ServiceElement) Reset() {
	*x = ServiceElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceElement) ProtoMessage() {}

func (x *ServiceElement) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceElement.ProtoReflect.Descriptor instead.
func (*ServiceElement) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{48}
}

func (m *ServiceElement) GetVal() isServiceElement_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (x *ServiceElement) GetOption() *OptionNode {
	if x, ok := x.GetVal().(*ServiceElement_Option); ok {
		return x.Option
	}
	return nil
}

func (x *ServiceElement) GetRpc() *RPCNode {
	if x, ok := x.GetVal().(*ServiceElement_Rpc); ok {
		return x.Rpc
	}
	return nil
}

type isServiceElement_Val interface {
	isServiceElement_Val()
}

type ServiceElement_Option struct {
	Option *OptionNode `protobuf:"bytes,1,opt,name=option,proto3,oneof"`
}

type ServiceElement_Rpc struct {
	Rpc *RPCNode `protobuf:"bytes,2,opt,name=rpc,proto3,oneof"`
}

func (*ServiceElement_Option) isServiceElement_Val() {}

func (*ServiceElement_Rpc) isServiceElement_Val() {}

// RPCNode represents an RPC declaration. Example:
//
//	rpc Foo (Bar) returns (Baz);
type RPCNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword    *IdentNode    `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Name       *IdentNode    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Input      *RPCTypeNode  `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	Returns    *IdentNode    `protobuf:"bytes,4,opt,name=returns,proto3" json:"returns,omitempty"`
	Output     *RPCTypeNode  `protobuf:"bytes,5,opt,name=output,proto3" json:"output,omitempty"`
	OpenBrace  *RuneNode     `protobuf:"bytes,6,opt,name=openBrace,proto3" json:"openBrace,omitempty"`
	Decls      []*RPCElement `protobuf:"bytes,7,rep,name=decls,proto3" json:"decls,omitempty"`
	CloseBrace *RuneNode     `protobuf:"bytes,8,opt,name=closeBrace,proto3" json:"closeBrace,omitempty"`
	Semicolon  *RuneNode     `protobuf:"bytes,9,opt,name=semicolon,proto3" json:"semicolon,omitempty"`
}

func (x *RPCNode) Reset() {
	*x = RPCNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RPCNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPCNode) ProtoMessage() {}

func (x *RPCNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPCNode.ProtoReflect.Descriptor instead.
func (*RPCNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{49}
}

func (x *RPCNode) GetKeyword() *IdentNode {
	if x != nil {
		return x.Keyword
	}
	return nil
}

func (x *RPCNode) GetName() *IdentNode {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *RPCNode) GetInput() *RPCTypeNode {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *RPCNode) GetReturns() *IdentNode {
	if x != nil {
		return x.Returns
	}
	return nil
}

func (x *RPCNode) GetOutput() *RPCTypeNode {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *RPCNode) GetOpenBrace() *RuneNode {
	if x != nil {
		return x.OpenBrace
	}
	return nil
}

func (x *RPCNode) GetDecls() []*RPCElement {
	if x != nil {
		return x.Decls
	}
	return nil
}

func (x *RPCNode) GetCloseBrace() *RuneNode {
	if x != nil {
		return x.CloseBrace
	}
	return nil
}

func (x *RPCNode) GetSemicolon() *RuneNode {
	if x != nil {
		return x.Semicolon
	}
	return nil
}

// RPCTypeNode represents the declaration of a request or response type for an
// RPC. Example:
//
//	(stream foo.Bar)
type RPCTypeNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenParen   *RuneNode       `protobuf:"bytes,1,opt,name=openParen,proto3" json:"openParen,omitempty"`
	Stream      *IdentNode      `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream,omitempty"`
	MessageType *IdentValueNode `protobuf:"bytes,3,opt,name=messageType,proto3" json:"messageType,omitempty"`
	CloseParen  *RuneNode       `protobuf:"bytes,4,opt,name=closeParen,proto3" json:"closeParen,omitempty"`
	Semicolon   *RuneNode       `protobuf:"bytes,5,opt,name=semicolon,proto3" json:"semicolon,omitempty"`
}

func (x *RPCTypeNode) Reset() {
	*x = RPCTypeNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RPCTypeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPCTypeNode) ProtoMessage() {}

func (x *RPCTypeNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPCTypeNode.ProtoReflect.Descriptor instead.
func (*RPCTypeNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{50}
}

func (x *RPCTypeNode) GetOpenParen() *RuneNode {
	if x != nil {
		return x.OpenParen
	}
	return nil
}

func (x *RPCTypeNode) GetStream() *IdentNode {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *RPCTypeNode) GetMessageType() *IdentValueNode {
	if x != nil {
		return x.MessageType
	}
	return nil
}

func (x *RPCTypeNode) GetCloseParen() *RuneNode {
	if x != nil {
		return x.CloseParen
	}
	return nil
}

func (x *RPCTypeNode) GetSemicolon() *RuneNode {
	if x != nil {
		return x.Semicolon
	}
	return nil
}

// RPCElement is an interface implemented by all AST nodes that can
// appear in the body of an rpc declaration (aka method).
type RPCElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Val:
	//
	//	*RPCElement_Option
	Val isRPCElement_Val `protobuf_oneof:"val"`
}

func (x *RPCElement) Reset() {
	*x = RPCElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RPCElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPCElement) ProtoMessage() {}

func (x *RPCElement) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPCElement.ProtoReflect.Descriptor instead.
func (*RPCElement) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{51}
}

func (m *RPCElement) GetVal() isRPCElement_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (x *RPCElement) GetOption() *OptionNode {
	if x, ok := x.GetVal().(*RPCElement_Option); ok {
		return x.Option
	}
	return nil
}

type isRPCElement_Val interface {
	isRPCElement_Val()
}

type RPCElement_Option struct {
	Option *OptionNode `protobuf:"bytes,1,opt,name=option,proto3,oneof"`
}

func (*RPCElement_Option) isRPCElement_Val() {}

// SyntheticMapField is not an actual node in the AST but a synthetic node
// that implements FieldDeclNode. These are used to represent the implicit
// field declarations of the "key" and "value" fields in a map entry.
type SyntheticMapField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      *IdentNode       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FieldType *IdentValueNode  `protobuf:"bytes,2,opt,name=fieldType,proto3" json:"fieldType,omitempty"`
	Tag       *UintLiteralNode `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *SyntheticMapField) Reset() {
	*x = SyntheticMapField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyntheticMapField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntheticMapField) ProtoMessage() {}

func (x *SyntheticMapField) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntheticMapField.ProtoReflect.Descriptor instead.
func (*SyntheticMapField) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{52}
}

func (x *SyntheticMapField) GetName() *IdentNode {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SyntheticMapField) GetFieldType() *IdentValueNode {
	if x != nil {
		return x.FieldType
	}
	return nil
}

func (x *SyntheticMapField) GetTag() *UintLiteralNode {
	if x != nil {
		return x.Tag
	}
	return nil
}

// FieldDeclNode is a node in the AST that defines a field. This includes
// normal message fields as well as extensions. There are multiple types
// of AST nodes that declare fields:
//   - *FieldNode
//   - *GroupNode
//   - *MapFieldNode
//   - *SyntheticMapField
type FieldDeclNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Val:
	//
	//	*FieldDeclNode_Field
	//	*FieldDeclNode_MapField
	//	*FieldDeclNode_SyntheticMapField
	//	*FieldDeclNode_Group
	Val isFieldDeclNode_Val `protobuf_oneof:"val"`
}

func (x *FieldDeclNode) Reset() {
	*x = FieldDeclNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldDeclNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldDeclNode) ProtoMessage() {}

func (x *FieldDeclNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldDeclNode.ProtoReflect.Descriptor instead.
func (*FieldDeclNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{53}
}

func (m *FieldDeclNode) GetVal() isFieldDeclNode_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (x *FieldDeclNode) GetField() *FieldNode {
	if x, ok := x.GetVal().(*FieldDeclNode_Field); ok {
		return x.Field
	}
	return nil
}

func (x *FieldDeclNode) GetMapField() *MapFieldNode {
	if x, ok := x.GetVal().(*FieldDeclNode_MapField); ok {
		return x.MapField
	}
	return nil
}

func (x *FieldDeclNode) GetSyntheticMapField() *SyntheticMapField {
	if x, ok := x.GetVal().(*FieldDeclNode_SyntheticMapField); ok {
		return x.SyntheticMapField
	}
	return nil
}

func (x *FieldDeclNode) GetGroup() *GroupNode {
	if x, ok := x.GetVal().(*FieldDeclNode_Group); ok {
		return x.Group
	}
	return nil
}

type isFieldDeclNode_Val interface {
	isFieldDeclNode_Val()
}

type FieldDeclNode_Field struct {
	Field *FieldNode `protobuf:"bytes,1,opt,name=field,proto3,oneof"`
}

type FieldDeclNode_MapField struct {
	MapField *MapFieldNode `protobuf:"bytes,2,opt,name=mapField,proto3,oneof"`
}

type FieldDeclNode_SyntheticMapField struct {
	SyntheticMapField *SyntheticMapField `protobuf:"bytes,3,opt,name=syntheticMapField,proto3,oneof"`
}

type FieldDeclNode_Group struct {
	Group *GroupNode `protobuf:"bytes,4,opt,name=group,proto3,oneof"`
}

func (*FieldDeclNode_Field) isFieldDeclNode_Val() {}

func (*FieldDeclNode_MapField) isFieldDeclNode_Val() {}

func (*FieldDeclNode_SyntheticMapField) isFieldDeclNode_Val() {}

func (*FieldDeclNode_Group) isFieldDeclNode_Val() {}

// NoSourceNode is a placeholder AST node that implements numerous
// interfaces in this package. It can be used to represent an AST
// element for a file whose source is not available.
type NoSourceNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *NoSourceNode) Reset() {
	*x = NoSourceNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoSourceNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoSourceNode) ProtoMessage() {}

func (x *NoSourceNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoSourceNode.ProtoReflect.Descriptor instead.
func (*NoSourceNode) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{54}
}

func (x *NoSourceNode) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type FileInfo_CommentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the index of the item, in the file's items slice, that represents this
	// comment
	Index int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// the index of the token to which this comment is attributed.
	AttributedToIndex int32 `protobuf:"varint,2,opt,name=attributedToIndex,proto3" json:"attributedToIndex,omitempty"`
	// if > 0, the comment is attributed to the token in attributedToIndex for
	// display and interaction purposes, but only because the token it should be
	// attributed to is a virtual token - this has implications when formatting
	// extended syntax virtual tokens.
	VirtualIndex int32 `protobuf:"varint,3,opt,name=virtualIndex,proto3" json:"virtualIndex,omitempty"`
}

func (x *FileInfo_CommentInfo) Reset() {
	*x = FileInfo_CommentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo_CommentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo_CommentInfo) ProtoMessage() {}

func (x *FileInfo_CommentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo_CommentInfo.ProtoReflect.Descriptor instead.
func (*FileInfo_CommentInfo) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{0, 0}
}

func (x *FileInfo_CommentInfo) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *FileInfo_CommentInfo) GetAttributedToIndex() int32 {
	if x != nil {
		return x.AttributedToIndex
	}
	return 0
}

func (x *FileInfo_CommentInfo) GetVirtualIndex() int32 {
	if x != nil {
		return x.VirtualIndex
	}
	return 0
}

type FileInfo_ItemSpan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the offset into the file of the first character of an item.
	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// the length of the item
	Length int32 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *FileInfo_ItemSpan) Reset() {
	*x = FileInfo_ItemSpan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo_ItemSpan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo_ItemSpan) ProtoMessage() {}

func (x *FileInfo_ItemSpan) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo_ItemSpan.ProtoReflect.Descriptor instead.
func (*FileInfo_ItemSpan) Descriptor() ([]byte, []int) {
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP(), []int{0, 1}
}

func (x *FileInfo_ItemSpan) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *FileInfo_ItemSpan) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

var File_github_com_kralicky_protocompile_ast_ast_proto protoreflect.FileDescriptor

var file_github_com_kralicky_protocompile_ast_ast_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x72, 0x61,
	0x6c, 0x69, 0x63, 0x6b, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x65, 0x2f, 0x61, 0x73, 0x74, 0x2f, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x03, 0x61, 0x73, 0x74, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa4, 0x05, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x74, 0x65,
	0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x53,
	0x70, 0x61, 0x6e, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x10, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x14, 0x7a, 0x65, 0x72, 0x6f, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x14, 0x7a, 0x65, 0x72, 0x6f, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x1f, 0x7a, 0x65, 0x72, 0x6f, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1f, 0x7a, 0x65, 0x72, 0x6f, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x1a, 0x75, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x3a, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d,
	0x53, 0x70, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x22, 0x58, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x74, 0x65,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x10, 0x01, 0x22, 0xe8,
	0x02, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29,
	0x0a, 0x06, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x48,
	0x00, 0x52, 0x06, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x07,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x23, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x29, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x12, 0x2c, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x22,
	0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x03, 0x65,
	0x72, 0x72, 0x42, 0x05, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x22, 0xb8, 0x01, 0x0a, 0x0a, 0x53, 0x79,
	0x6e, 0x74, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x06, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x79, 0x6e,
	0x74, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x06, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x65, 0x6d, 0x69, 0x63,
	0x6f, 0x6c, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74,
	0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6d, 0x69, 0x63,
	0x6f, 0x6c, 0x6f, 0x6e, 0x22, 0x5d, 0x0a, 0x09, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x20, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0a, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x22, 0x3c, 0x0a, 0x0d, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x44, 0x65, 0x63, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x65, 0x6d, 0x69, 0x63, 0x6f, 0x6c, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75,
	0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6d, 0x69, 0x63, 0x6f, 0x6c, 0x6f,
	0x6e, 0x22, 0x66, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x6f, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x64, 0x6f, 0x74, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x0b, 0x45, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x06, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x65, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x07, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x65,
	0x6d, 0x69, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x73, 0x65,
	0x6d, 0x69, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x22, 0xd9, 0x01, 0x0a, 0x0a, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x26, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x22, 0x0a, 0x04, 0x77, 0x65, 0x61, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x77, 0x65, 0x61, 0x6b, 0x12, 0x28, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x73, 0x74,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x65, 0x6d, 0x69, 0x63, 0x6f,
	0x6c, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6d, 0x69, 0x63, 0x6f,
	0x6c, 0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x27, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x65, 0x6d, 0x69, 0x63, 0x6f,
	0x6c, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6d, 0x69, 0x63, 0x6f,
	0x6c, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x0f, 0x55, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61,
	0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x22, 0xd5, 0x01, 0x0a,
	0x0a, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x06, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x65,
	0x71, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x65, 0x6d, 0x69, 0x63,
	0x6f, 0x6c, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74,
	0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6d, 0x69, 0x63,
	0x6f, 0x6c, 0x6f, 0x6e, 0x22, 0x67, 0x0a, 0x16, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x49, 0x6e, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x23,
	0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6d, 0x69,
	0x6e, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x75, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x75, 0x69, 0x6e, 0x74, 0x22, 0x58, 0x0a,
	0x10, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x20, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0a, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x22, 0x5a, 0x0a, 0x08, 0x52, 0x75, 0x6e, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6e, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x75, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x22, 0xb0, 0x01, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x56, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x42,
	0x05, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x2d, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x47, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x4d,
	0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x7f, 0x0a,
	0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x26, 0x0a, 0x05, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x62,
	0x0a, 0x0e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x2d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x12,
	0x21, 0x0a, 0x04, 0x64, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x64, 0x6f,
	0x74, 0x73, 0x22, 0xaf, 0x02, 0x0a, 0x12, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x6f, 0x70, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75,
	0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x31, 0x0a, 0x09,
	0x75, 0x72, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x75, 0x72, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0x23, 0x0a, 0x05, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x73,
	0x6c, 0x61, 0x73, 0x68, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x05, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x65, 0x6d, 0x69, 0x63,
	0x6f, 0x6c, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74,
	0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6d, 0x69, 0x63,
	0x6f, 0x6c, 0x6f, 0x6e, 0x22, 0xf9, 0x05, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x56, 0x0a, 0x15, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x15, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x12, 0x38, 0x0a, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x75, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x4d, 0x0a, 0x12,
	0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4e,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x12, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x49, 0x6e, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x0c, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x50, 0x0a, 0x13, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4e,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x13, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x4d, 0x0a, 0x12, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4e,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x0c, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x4c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x42, 0x05, 0x0a, 0x03, 0x76, 0x61, 0x6c,
	0x22, 0x55, 0x0a, 0x17, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x66, 0x0a, 0x16, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x21, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x73, 0x69, 0x67, 0x6e, 0x12, 0x29, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x22,
	0xf6, 0x01, 0x0a, 0x10, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x25, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x73, 0x12, 0x31, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x09, 0x73,
	0x65, 0x6d, 0x69, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x73,
	0x65, 0x6d, 0x69, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x22, 0xdf, 0x01, 0x0a, 0x12, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x21, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6f, 0x70,
	0x65, 0x6e, 0x12, 0x31, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x73, 0x65, 0x70, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x73, 0x65, 0x70, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75,
	0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x09, 0x73, 0x65, 0x6d, 0x69, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x09, 0x73, 0x65, 0x6d, 0x69, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x22, 0xe0, 0x01, 0x0a, 0x0e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a,
	0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x50, 0x0a, 0x13, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x13, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x0b,
	0x75, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x4c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x42, 0x05, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x22, 0xaf, 0x01,
	0x0a, 0x10, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x03, 0x73, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x73, 0x65, 0x70,
	0x12, 0x20, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x76,
	0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x65, 0x6d, 0x69, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6d, 0x69, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x22,
	0xd0, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x6e,
	0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x31, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52,
	0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x65, 0x6d, 0x69, 0x63, 0x6f, 0x6c,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52,
	0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6d, 0x69, 0x63, 0x6f, 0x6c,
	0x6f, 0x6e, 0x22, 0x9f, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65,
	0x63, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2f, 0x0a, 0x08,
	0x6d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x05, 0x0a,
	0x03, 0x76, 0x61, 0x6c, 0x22, 0x8f, 0x02, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x22,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x72, 0x61, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x72, 0x61, 0x63, 0x65, 0x12,
	0x29, 0x0a, 0x05, 0x64, 0x65, 0x63, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x64, 0x65, 0x63, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x42, 0x72, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x42, 0x72, 0x61, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x65, 0x6d,
	0x69, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6d,
	0x69, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x22, 0x89, 0x04, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2f, 0x0a, 0x08,
	0x6d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x26, 0x0a,
	0x05, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x05,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x12, 0x26, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2c, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x65,
	0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d,
	0x12, 0x29, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x48, 0x00, 0x52, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0e,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2f,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12,
	0x2a, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x44, 0x65, 0x63, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x05, 0x0a, 0x03, 0x76,
	0x61, 0x6c, 0x22, 0x92, 0x01, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x26, 0x0a, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x44,
	0x65, 0x63, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x42, 0x05, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x22, 0xb7, 0x02, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x31, 0x0a, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x06, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x03, 0x74, 0x61, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x74, 0x61,
	0x67, 0x12, 0x31, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x65, 0x6d, 0x69, 0x63, 0x6f, 0x6c, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75,
	0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6d, 0x69, 0x63, 0x6f, 0x6c, 0x6f,
	0x6e, 0x22, 0x8d, 0x02, 0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x06, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x03, 0x74, 0x61, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x74, 0x61,
	0x67, 0x12, 0x31, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x65, 0x6d, 0x69, 0x63, 0x6f, 0x6c, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75,
	0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6d, 0x69, 0x63, 0x6f, 0x6c, 0x6f,
	0x6e, 0x22, 0x8b, 0x02, 0x0a, 0x09, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x28, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x72, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x09, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x72, 0x61, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x64, 0x65,
	0x63, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x64, 0x65,
	0x63, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x72, 0x61, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75,
	0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x72, 0x61,
	0x63, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x65, 0x6d, 0x69, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6d, 0x69, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x22,
	0xb5, 0x03, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x06, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x74, 0x61, 0x67,
	0x12, 0x31, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x72, 0x61, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x72, 0x61, 0x63, 0x65,
	0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x63, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x64, 0x65, 0x63, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x0a, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x42, 0x72, 0x61, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x72, 0x61, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x65,
	0x6d, 0x69, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x73, 0x65,
	0x6d, 0x69, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x22, 0x89, 0x02, 0x0a, 0x08, 0x45, 0x6e, 0x75, 0x6d,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x22,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x72, 0x61, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x72, 0x61, 0x63, 0x65, 0x12,
	0x26, 0x0a, 0x05, 0x64, 0x65, 0x63, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x05, 0x64, 0x65, 0x63, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x42, 0x72, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x42, 0x72, 0x61, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x65, 0x6d, 0x69, 0x63, 0x6f,
	0x6c, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6d, 0x69, 0x63, 0x6f,
	0x6c, 0x6f, 0x6e, 0x22, 0x9a, 0x02, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2f, 0x0a, 0x08,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x65, 0x12, 0x2b, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x72, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x09, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x72, 0x61, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x64, 0x65,
	0x63, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x64,
	0x65, 0x63, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x72, 0x61,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52,
	0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x72,
	0x61, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x65, 0x6d, 0x69, 0x63, 0x6f, 0x6c, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6d, 0x69, 0x63, 0x6f, 0x6c, 0x6f, 0x6e,
	0x22, 0xed, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x73,
	0x12, 0x31, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x65, 0x6d, 0x69, 0x63, 0x6f, 0x6c, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6d, 0x69, 0x63, 0x6f, 0x6c, 0x6f, 0x6e,
	0x22, 0x92, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x28, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x30, 0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x12, 0x25, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x65, 0x6d, 0x69,
	0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6d, 0x69,
	0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x22, 0xc2, 0x02, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x2b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x07,
	0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6b,
	0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x12, 0x31, 0x0a, 0x09, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d,
	0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x2b, 0x0a,
	0x09, 0x73, 0x65, 0x6d, 0x69, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x09, 0x73, 0x65, 0x6d, 0x69, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x22, 0x90, 0x01, 0x0a, 0x0c, 0x4f,
	0x6e, 0x65, 0x6f, 0x66, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x06,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x26,
	0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x05, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x22, 0xa4, 0x01,
	0x0a, 0x0b, 0x45, 0x6e, 0x75, 0x6d, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a,
	0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00,
	0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x09, 0x65, 0x6e, 0x75, 0x6d,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x42, 0x05, 0x0a,
	0x03, 0x76, 0x61, 0x6c, 0x22, 0xe5, 0x01, 0x0a, 0x0d, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x71,
	0x75, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74,
	0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x65, 0x71, 0x75, 0x61, 0x6c,
	0x73, 0x12, 0x29, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2b, 0x0a, 0x09, 0x73, 0x65, 0x6d, 0x69, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x73, 0x65, 0x6d, 0x69, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x22, 0xa7, 0x01, 0x0a,
	0x09, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x29, 0x0a, 0x06, 0x65, 0x6e, 0x64,
	0x56, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x65, 0x6e,
	0x64, 0x56, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0x9e, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x4c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x12, 0x4d, 0x0a, 0x12, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74,
	0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x4c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x12, 0x6e, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x42, 0x05, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x8f, 0x02, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x72, 0x61,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52,
	0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x72, 0x61,
	0x63, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x63, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x64, 0x65, 0x63, 0x6c, 0x73, 0x12, 0x2d, 0x0a,
	0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x72, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x72, 0x61, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x09,
	0x73, 0x65, 0x6d, 0x69, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x73, 0x65, 0x6d, 0x69, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x22, 0x64, 0x0a, 0x0e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x06,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x03, 0x72, 0x70, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x50, 0x43, 0x4e, 0x6f, 0x64,
	0x65, 0x48, 0x00, 0x52, 0x03, 0x72, 0x70, 0x63, 0x42, 0x05, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x22,
	0x83, 0x03, 0x0a, 0x07, 0x52, 0x50, 0x43, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52,
	0x50, 0x43, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x28, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x52, 0x50, 0x43, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x2b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x72, 0x61,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52,
	0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x72, 0x61,
	0x63, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x64, 0x65, 0x63, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x50, 0x43, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x05, 0x64, 0x65, 0x63, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x42, 0x72, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x42, 0x72, 0x61, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x65, 0x6d, 0x69,
	0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6d, 0x69,
	0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x22, 0xf5, 0x01, 0x0a, 0x0b, 0x52, 0x50, 0x43, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52,
	0x75, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x35, 0x0a, 0x0b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x12, 0x2b, 0x0a, 0x09, 0x73, 0x65, 0x6d, 0x69, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6d, 0x69, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x22, 0x3e, 0x0a,
	0x0a, 0x52, 0x50, 0x43, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x06,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x92, 0x01,
	0x0a, 0x11, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x73, 0x74,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x74, 0x61,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x74,
	0x61, 0x67, 0x22, 0xdf, 0x01, 0x0a, 0x0d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x63, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2f, 0x0a, 0x08,
	0x6d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x46, 0x0a,
	0x11, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x53,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x48, 0x00, 0x52, 0x11, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x4d, 0x61, 0x70,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x26, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x05, 0x0a,
	0x03, 0x76, 0x61, 0x6c, 0x22, 0x2a, 0x0a, 0x0c, 0x4e, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x2a, 0x32, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x22, 0x08, 0x08, 0x01, 0x10, 0xff,
	0xff, 0xff, 0xff, 0x07, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6b, 0x72, 0x61, 0x6c, 0x69, 0x63, 0x6b, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x2f, 0x61, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_kralicky_protocompile_ast_ast_proto_rawDescOnce sync.Once
	file_github_com_kralicky_protocompile_ast_ast_proto_rawDescData = file_github_com_kralicky_protocompile_ast_ast_proto_rawDesc
)

func file_github_com_kralicky_protocompile_ast_ast_proto_rawDescGZIP() []byte {
	file_github_com_kralicky_protocompile_ast_ast_proto_rawDescOnce.Do(func() {
		file_github_com_kralicky_protocompile_ast_ast_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_kralicky_protocompile_ast_ast_proto_rawDescData)
	})
	return file_github_com_kralicky_protocompile_ast_ast_proto_rawDescData
}

var file_github_com_kralicky_protocompile_ast_ast_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes = make([]protoimpl.MessageInfo, 57)
var file_github_com_kralicky_protocompile_ast_ast_proto_goTypes = []interface{}{
	(Token)(0),                        // 0: ast.Token
	(FileInfo_PositionEncoding)(0),    // 1: ast.FileInfo.PositionEncoding
	(*FileInfo)(nil),                  // 2: ast.FileInfo
	(*FileElement)(nil),               // 3: ast.FileElement
	(*SyntaxNode)(nil),                // 4: ast.SyntaxNode
	(*IdentNode)(nil),                 // 5: ast.IdentNode
	(*EmptyDeclNode)(nil),             // 6: ast.EmptyDeclNode
	(*CompoundIdentNode)(nil),         // 7: ast.CompoundIdentNode
	(*EditionNode)(nil),               // 8: ast.EditionNode
	(*ImportNode)(nil),                // 9: ast.ImportNode
	(*PackageNode)(nil),               // 10: ast.PackageNode
	(*UintLiteralNode)(nil),           // 11: ast.UintLiteralNode
	(*OptionNode)(nil),                // 12: ast.OptionNode
	(*NegativeIntLiteralNode)(nil),    // 13: ast.NegativeIntLiteralNode
	(*FloatLiteralNode)(nil),          // 14: ast.FloatLiteralNode
	(*RuneNode)(nil),                  // 15: ast.RuneNode
	(*StringValueNode)(nil),           // 16: ast.StringValueNode
	(*ErrorNode)(nil),                 // 17: ast.ErrorNode
	(*StringLiteralNode)(nil),         // 18: ast.StringLiteralNode
	(*CompoundStringLiteralNode)(nil), // 19: ast.CompoundStringLiteralNode
	(*IdentValueNode)(nil),            // 20: ast.IdentValueNode
	(*OptionNameNode)(nil),            // 21: ast.OptionNameNode
	(*FieldReferenceNode)(nil),        // 22: ast.FieldReferenceNode
	(*ValueNode)(nil),                 // 23: ast.ValueNode
	(*SpecialFloatLiteralNode)(nil),   // 24: ast.SpecialFloatLiteralNode
	(*SignedFloatLiteralNode)(nil),    // 25: ast.SignedFloatLiteralNode
	(*ArrayLiteralNode)(nil),          // 26: ast.ArrayLiteralNode
	(*MessageLiteralNode)(nil),        // 27: ast.MessageLiteralNode
	(*FloatValueNode)(nil),            // 28: ast.FloatValueNode
	(*MessageFieldNode)(nil),          // 29: ast.MessageFieldNode
	(*CompactOptionsNode)(nil),        // 30: ast.CompactOptionsNode
	(*MessageDeclNode)(nil),           // 31: ast.MessageDeclNode
	(*MessageNode)(nil),               // 32: ast.MessageNode
	(*MessageElement)(nil),            // 33: ast.MessageElement
	(*ExtendElement)(nil),             // 34: ast.ExtendElement
	(*FieldNode)(nil),                 // 35: ast.FieldNode
	(*MapFieldNode)(nil),              // 36: ast.MapFieldNode
	(*OneofNode)(nil),                 // 37: ast.OneofNode
	(*GroupNode)(nil),                 // 38: ast.GroupNode
	(*EnumNode)(nil),                  // 39: ast.EnumNode
	(*ExtendNode)(nil),                // 40: ast.ExtendNode
	(*ExtensionRangeNode)(nil),        // 41: ast.ExtensionRangeNode
	(*ReservedNode)(nil),              // 42: ast.ReservedNode
	(*MapTypeNode)(nil),               // 43: ast.MapTypeNode
	(*OneofElement)(nil),              // 44: ast.OneofElement
	(*EnumElement)(nil),               // 45: ast.EnumElement
	(*EnumValueNode)(nil),             // 46: ast.EnumValueNode
	(*RangeNode)(nil),                 // 47: ast.RangeNode
	(*IntValueNode)(nil),              // 48: ast.IntValueNode
	(*ServiceNode)(nil),               // 49: ast.ServiceNode
	(*ServiceElement)(nil),            // 50: ast.ServiceElement
	(*RPCNode)(nil),                   // 51: ast.RPCNode
	(*RPCTypeNode)(nil),               // 52: ast.RPCTypeNode
	(*RPCElement)(nil),                // 53: ast.RPCElement
	(*SyntheticMapField)(nil),         // 54: ast.SyntheticMapField
	(*FieldDeclNode)(nil),             // 55: ast.FieldDeclNode
	(*NoSourceNode)(nil),              // 56: ast.NoSourceNode
	(*FileInfo_CommentInfo)(nil),      // 57: ast.FileInfo.CommentInfo
	(*FileInfo_ItemSpan)(nil),         // 58: ast.FileInfo.ItemSpan
}
var file_github_com_kralicky_protocompile_ast_ast_proto_depIdxs = []int32{
	57,  // 0: ast.FileInfo.comments:type_name -> ast.FileInfo.CommentInfo
	58,  // 1: ast.FileInfo.itemList:type_name -> ast.FileInfo.ItemSpan
	1,   // 2: ast.FileInfo.positionEncoding:type_name -> ast.FileInfo.PositionEncoding
	9,   // 3: ast.FileElement.import:type_name -> ast.ImportNode
	10,  // 4: ast.FileElement.package:type_name -> ast.PackageNode
	12,  // 5: ast.FileElement.option:type_name -> ast.OptionNode
	32,  // 6: ast.FileElement.message:type_name -> ast.MessageNode
	39,  // 7: ast.FileElement.enum:type_name -> ast.EnumNode
	40,  // 8: ast.FileElement.extend:type_name -> ast.ExtendNode
	49,  // 9: ast.FileElement.service:type_name -> ast.ServiceNode
	17,  // 10: ast.FileElement.err:type_name -> ast.ErrorNode
	5,   // 11: ast.SyntaxNode.keyword:type_name -> ast.IdentNode
	15,  // 12: ast.SyntaxNode.equals:type_name -> ast.RuneNode
	16,  // 13: ast.SyntaxNode.syntax:type_name -> ast.StringValueNode
	15,  // 14: ast.SyntaxNode.semicolon:type_name -> ast.RuneNode
	0,   // 15: ast.IdentNode.token:type_name -> ast.Token
	15,  // 16: ast.EmptyDeclNode.semicolon:type_name -> ast.RuneNode
	5,   // 17: ast.CompoundIdentNode.components:type_name -> ast.IdentNode
	15,  // 18: ast.CompoundIdentNode.dots:type_name -> ast.RuneNode
	5,   // 19: ast.EditionNode.keyword:type_name -> ast.IdentNode
	15,  // 20: ast.EditionNode.equals:type_name -> ast.RuneNode
	16,  // 21: ast.EditionNode.edition:type_name -> ast.StringValueNode
	15,  // 22: ast.EditionNode.semicolon:type_name -> ast.RuneNode
	5,   // 23: ast.ImportNode.keyword:type_name -> ast.IdentNode
	5,   // 24: ast.ImportNode.public:type_name -> ast.IdentNode
	5,   // 25: ast.ImportNode.weak:type_name -> ast.IdentNode
	16,  // 26: ast.ImportNode.name:type_name -> ast.StringValueNode
	15,  // 27: ast.ImportNode.semicolon:type_name -> ast.RuneNode
	5,   // 28: ast.PackageNode.keyword:type_name -> ast.IdentNode
	20,  // 29: ast.PackageNode.name:type_name -> ast.IdentValueNode
	15,  // 30: ast.PackageNode.semicolon:type_name -> ast.RuneNode
	0,   // 31: ast.UintLiteralNode.token:type_name -> ast.Token
	5,   // 32: ast.OptionNode.keyword:type_name -> ast.IdentNode
	21,  // 33: ast.OptionNode.name:type_name -> ast.OptionNameNode
	15,  // 34: ast.OptionNode.equals:type_name -> ast.RuneNode
	23,  // 35: ast.OptionNode.val:type_name -> ast.ValueNode
	15,  // 36: ast.OptionNode.semicolon:type_name -> ast.RuneNode
	15,  // 37: ast.NegativeIntLiteralNode.minus:type_name -> ast.RuneNode
	11,  // 38: ast.NegativeIntLiteralNode.uint:type_name -> ast.UintLiteralNode
	0,   // 39: ast.FloatLiteralNode.token:type_name -> ast.Token
	0,   // 40: ast.RuneNode.token:type_name -> ast.Token
	18,  // 41: ast.StringValueNode.stringLiteral:type_name -> ast.StringLiteralNode
	19,  // 42: ast.StringValueNode.compoundStringLiteral:type_name -> ast.CompoundStringLiteralNode
	5,   // 43: ast.ErrorNode.err:type_name -> ast.IdentNode
	0,   // 44: ast.StringLiteralNode.token:type_name -> ast.Token
	16,  // 45: ast.CompoundStringLiteralNode.elements:type_name -> ast.StringValueNode
	5,   // 46: ast.IdentValueNode.ident:type_name -> ast.IdentNode
	7,   // 47: ast.IdentValueNode.compoundIdent:type_name -> ast.CompoundIdentNode
	22,  // 48: ast.OptionNameNode.parts:type_name -> ast.FieldReferenceNode
	15,  // 49: ast.OptionNameNode.dots:type_name -> ast.RuneNode
	15,  // 50: ast.FieldReferenceNode.open:type_name -> ast.RuneNode
	20,  // 51: ast.FieldReferenceNode.urlPrefix:type_name -> ast.IdentValueNode
	15,  // 52: ast.FieldReferenceNode.slash:type_name -> ast.RuneNode
	20,  // 53: ast.FieldReferenceNode.name:type_name -> ast.IdentValueNode
	15,  // 54: ast.FieldReferenceNode.comma:type_name -> ast.RuneNode
	15,  // 55: ast.FieldReferenceNode.close:type_name -> ast.RuneNode
	15,  // 56: ast.FieldReferenceNode.semicolon:type_name -> ast.RuneNode
	5,   // 57: ast.ValueNode.ident:type_name -> ast.IdentNode
	7,   // 58: ast.ValueNode.compoundIdent:type_name -> ast.CompoundIdentNode
	18,  // 59: ast.ValueNode.stringLiteral:type_name -> ast.StringLiteralNode
	19,  // 60: ast.ValueNode.compoundStringLiteral:type_name -> ast.CompoundStringLiteralNode
	11,  // 61: ast.ValueNode.uintLiteral:type_name -> ast.UintLiteralNode
	13,  // 62: ast.ValueNode.negativeIntLiteral:type_name -> ast.NegativeIntLiteralNode
	14,  // 63: ast.ValueNode.floatLiteral:type_name -> ast.FloatLiteralNode
	24,  // 64: ast.ValueNode.specialFloatLiteral:type_name -> ast.SpecialFloatLiteralNode
	25,  // 65: ast.ValueNode.signedFloatLiteral:type_name -> ast.SignedFloatLiteralNode
	26,  // 66: ast.ValueNode.arrayLiteral:type_name -> ast.ArrayLiteralNode
	27,  // 67: ast.ValueNode.messageLiteral:type_name -> ast.MessageLiteralNode
	5,   // 68: ast.SpecialFloatLiteralNode.keyword:type_name -> ast.IdentNode
	15,  // 69: ast.SignedFloatLiteralNode.sign:type_name -> ast.RuneNode
	28,  // 70: ast.SignedFloatLiteralNode.float:type_name -> ast.FloatValueNode
	15,  // 71: ast.ArrayLiteralNode.openBracket:type_name -> ast.RuneNode
	23,  // 72: ast.ArrayLiteralNode.elements:type_name -> ast.ValueNode
	15,  // 73: ast.ArrayLiteralNode.commas:type_name -> ast.RuneNode
	15,  // 74: ast.ArrayLiteralNode.closeBracket:type_name -> ast.RuneNode
	15,  // 75: ast.ArrayLiteralNode.semicolon:type_name -> ast.RuneNode
	15,  // 76: ast.MessageLiteralNode.open:type_name -> ast.RuneNode
	29,  // 77: ast.MessageLiteralNode.elements:type_name -> ast.MessageFieldNode
	15,  // 78: ast.MessageLiteralNode.seps:type_name -> ast.RuneNode
	15,  // 79: ast.MessageLiteralNode.close:type_name -> ast.RuneNode
	15,  // 80: ast.MessageLiteralNode.semicolon:type_name -> ast.RuneNode
	14,  // 81: ast.FloatValueNode.floatLiteral:type_name -> ast.FloatLiteralNode
	24,  // 82: ast.FloatValueNode.specialFloatLiteral:type_name -> ast.SpecialFloatLiteralNode
	11,  // 83: ast.FloatValueNode.uintLiteral:type_name -> ast.UintLiteralNode
	22,  // 84: ast.MessageFieldNode.name:type_name -> ast.FieldReferenceNode
	15,  // 85: ast.MessageFieldNode.sep:type_name -> ast.RuneNode
	23,  // 86: ast.MessageFieldNode.val:type_name -> ast.ValueNode
	15,  // 87: ast.MessageFieldNode.semicolon:type_name -> ast.RuneNode
	15,  // 88: ast.CompactOptionsNode.openBracket:type_name -> ast.RuneNode
	12,  // 89: ast.CompactOptionsNode.options:type_name -> ast.OptionNode
	15,  // 90: ast.CompactOptionsNode.closeBracket:type_name -> ast.RuneNode
	15,  // 91: ast.CompactOptionsNode.semicolon:type_name -> ast.RuneNode
	32,  // 92: ast.MessageDeclNode.message:type_name -> ast.MessageNode
	38,  // 93: ast.MessageDeclNode.group:type_name -> ast.GroupNode
	36,  // 94: ast.MessageDeclNode.mapField:type_name -> ast.MapFieldNode
	5,   // 95: ast.MessageNode.keyword:type_name -> ast.IdentNode
	5,   // 96: ast.MessageNode.name:type_name -> ast.IdentNode
	15,  // 97: ast.MessageNode.openBrace:type_name -> ast.RuneNode
	33,  // 98: ast.MessageNode.decls:type_name -> ast.MessageElement
	15,  // 99: ast.MessageNode.closeBrace:type_name -> ast.RuneNode
	15,  // 100: ast.MessageNode.semicolon:type_name -> ast.RuneNode
	12,  // 101: ast.MessageElement.option:type_name -> ast.OptionNode
	35,  // 102: ast.MessageElement.field:type_name -> ast.FieldNode
	36,  // 103: ast.MessageElement.mapField:type_name -> ast.MapFieldNode
	37,  // 104: ast.MessageElement.oneof:type_name -> ast.OneofNode
	38,  // 105: ast.MessageElement.group:type_name -> ast.GroupNode
	32,  // 106: ast.MessageElement.message:type_name -> ast.MessageNode
	39,  // 107: ast.MessageElement.enum:type_name -> ast.EnumNode
	40,  // 108: ast.MessageElement.extend:type_name -> ast.ExtendNode
	41,  // 109: ast.MessageElement.extensionRange:type_name -> ast.ExtensionRangeNode
	42,  // 110: ast.MessageElement.reserved:type_name -> ast.ReservedNode
	6,   // 111: ast.MessageElement.empty:type_name -> ast.EmptyDeclNode
	35,  // 112: ast.ExtendElement.field:type_name -> ast.FieldNode
	38,  // 113: ast.ExtendElement.group:type_name -> ast.GroupNode
	6,   // 114: ast.ExtendElement.empty:type_name -> ast.EmptyDeclNode
	5,   // 115: ast.FieldNode.label:type_name -> ast.IdentNode
	20,  // 116: ast.FieldNode.fieldType:type_name -> ast.IdentValueNode
	5,   // 117: ast.FieldNode.name:type_name -> ast.IdentNode
	15,  // 118: ast.FieldNode.equals:type_name -> ast.RuneNode
	11,  // 119: ast.FieldNode.tag:type_name -> ast.UintLiteralNode
	30,  // 120: ast.FieldNode.options:type_name -> ast.CompactOptionsNode
	15,  // 121: ast.FieldNode.semicolon:type_name -> ast.RuneNode
	43,  // 122: ast.MapFieldNode.mapType:type_name -> ast.MapTypeNode
	5,   // 123: ast.MapFieldNode.name:type_name -> ast.IdentNode
	15,  // 124: ast.MapFieldNode.equals:type_name -> ast.RuneNode
	11,  // 125: ast.MapFieldNode.tag:type_name -> ast.UintLiteralNode
	30,  // 126: ast.MapFieldNode.options:type_name -> ast.CompactOptionsNode
	15,  // 127: ast.MapFieldNode.semicolon:type_name -> ast.RuneNode
	5,   // 128: ast.OneofNode.keyword:type_name -> ast.IdentNode
	5,   // 129: ast.OneofNode.name:type_name -> ast.IdentNode
	15,  // 130: ast.OneofNode.openBrace:type_name -> ast.RuneNode
	44,  // 131: ast.OneofNode.decls:type_name -> ast.OneofElement
	15,  // 132: ast.OneofNode.closeBrace:type_name -> ast.RuneNode
	15,  // 133: ast.OneofNode.semicolon:type_name -> ast.RuneNode
	5,   // 134: ast.GroupNode.label:type_name -> ast.IdentNode
	5,   // 135: ast.GroupNode.keyword:type_name -> ast.IdentNode
	5,   // 136: ast.GroupNode.name:type_name -> ast.IdentNode
	15,  // 137: ast.GroupNode.equals:type_name -> ast.RuneNode
	11,  // 138: ast.GroupNode.tag:type_name -> ast.UintLiteralNode
	30,  // 139: ast.GroupNode.options:type_name -> ast.CompactOptionsNode
	15,  // 140: ast.GroupNode.openBrace:type_name -> ast.RuneNode
	33,  // 141: ast.GroupNode.decls:type_name -> ast.MessageElement
	15,  // 142: ast.GroupNode.closeBrace:type_name -> ast.RuneNode
	15,  // 143: ast.GroupNode.semicolon:type_name -> ast.RuneNode
	5,   // 144: ast.EnumNode.keyword:type_name -> ast.IdentNode
	5,   // 145: ast.EnumNode.name:type_name -> ast.IdentNode
	15,  // 146: ast.EnumNode.openBrace:type_name -> ast.RuneNode
	45,  // 147: ast.EnumNode.decls:type_name -> ast.EnumElement
	15,  // 148: ast.EnumNode.closeBrace:type_name -> ast.RuneNode
	15,  // 149: ast.EnumNode.semicolon:type_name -> ast.RuneNode
	5,   // 150: ast.ExtendNode.keyword:type_name -> ast.IdentNode
	20,  // 151: ast.ExtendNode.extendee:type_name -> ast.IdentValueNode
	15,  // 152: ast.ExtendNode.openBrace:type_name -> ast.RuneNode
	34,  // 153: ast.ExtendNode.decls:type_name -> ast.ExtendElement
	15,  // 154: ast.ExtendNode.closeBrace:type_name -> ast.RuneNode
	15,  // 155: ast.ExtendNode.semicolon:type_name -> ast.RuneNode
	5,   // 156: ast.ExtensionRangeNode.keyword:type_name -> ast.IdentNode
	47,  // 157: ast.ExtensionRangeNode.ranges:type_name -> ast.RangeNode
	15,  // 158: ast.ExtensionRangeNode.commas:type_name -> ast.RuneNode
	30,  // 159: ast.ExtensionRangeNode.options:type_name -> ast.CompactOptionsNode
	15,  // 160: ast.ExtensionRangeNode.semicolon:type_name -> ast.RuneNode
	5,   // 161: ast.ReservedNode.keyword:type_name -> ast.IdentNode
	47,  // 162: ast.ReservedNode.ranges:type_name -> ast.RangeNode
	16,  // 163: ast.ReservedNode.names:type_name -> ast.StringValueNode
	5,   // 164: ast.ReservedNode.identifiers:type_name -> ast.IdentNode
	15,  // 165: ast.ReservedNode.commas:type_name -> ast.RuneNode
	15,  // 166: ast.ReservedNode.semicolon:type_name -> ast.RuneNode
	5,   // 167: ast.MapTypeNode.keyword:type_name -> ast.IdentNode
	15,  // 168: ast.MapTypeNode.openAngle:type_name -> ast.RuneNode
	5,   // 169: ast.MapTypeNode.keyType:type_name -> ast.IdentNode
	15,  // 170: ast.MapTypeNode.comma:type_name -> ast.RuneNode
	20,  // 171: ast.MapTypeNode.valueType:type_name -> ast.IdentValueNode
	15,  // 172: ast.MapTypeNode.closeAngle:type_name -> ast.RuneNode
	15,  // 173: ast.MapTypeNode.semicolon:type_name -> ast.RuneNode
	12,  // 174: ast.OneofElement.option:type_name -> ast.OptionNode
	35,  // 175: ast.OneofElement.field:type_name -> ast.FieldNode
	38,  // 176: ast.OneofElement.group:type_name -> ast.GroupNode
	12,  // 177: ast.EnumElement.option:type_name -> ast.OptionNode
	46,  // 178: ast.EnumElement.enumValue:type_name -> ast.EnumValueNode
	42,  // 179: ast.EnumElement.reserved:type_name -> ast.ReservedNode
	5,   // 180: ast.EnumValueNode.name:type_name -> ast.IdentNode
	15,  // 181: ast.EnumValueNode.equals:type_name -> ast.RuneNode
	48,  // 182: ast.EnumValueNode.number:type_name -> ast.IntValueNode
	30,  // 183: ast.EnumValueNode.options:type_name -> ast.CompactOptionsNode
	15,  // 184: ast.EnumValueNode.semicolon:type_name -> ast.RuneNode
	48,  // 185: ast.RangeNode.startVal:type_name -> ast.IntValueNode
	5,   // 186: ast.RangeNode.to:type_name -> ast.IdentNode
	48,  // 187: ast.RangeNode.endVal:type_name -> ast.IntValueNode
	5,   // 188: ast.RangeNode.max:type_name -> ast.IdentNode
	11,  // 189: ast.IntValueNode.uintLiteral:type_name -> ast.UintLiteralNode
	13,  // 190: ast.IntValueNode.negativeIntLiteral:type_name -> ast.NegativeIntLiteralNode
	5,   // 191: ast.ServiceNode.keyword:type_name -> ast.IdentNode
	5,   // 192: ast.ServiceNode.name:type_name -> ast.IdentNode
	15,  // 193: ast.ServiceNode.openBrace:type_name -> ast.RuneNode
	50,  // 194: ast.ServiceNode.decls:type_name -> ast.ServiceElement
	15,  // 195: ast.ServiceNode.closeBrace:type_name -> ast.RuneNode
	15,  // 196: ast.ServiceNode.semicolon:type_name -> ast.RuneNode
	12,  // 197: ast.ServiceElement.option:type_name -> ast.OptionNode
	51,  // 198: ast.ServiceElement.rpc:type_name -> ast.RPCNode
	5,   // 199: ast.RPCNode.keyword:type_name -> ast.IdentNode
	5,   // 200: ast.RPCNode.name:type_name -> ast.IdentNode
	52,  // 201: ast.RPCNode.input:type_name -> ast.RPCTypeNode
	5,   // 202: ast.RPCNode.returns:type_name -> ast.IdentNode
	52,  // 203: ast.RPCNode.output:type_name -> ast.RPCTypeNode
	15,  // 204: ast.RPCNode.openBrace:type_name -> ast.RuneNode
	53,  // 205: ast.RPCNode.decls:type_name -> ast.RPCElement
	15,  // 206: ast.RPCNode.closeBrace:type_name -> ast.RuneNode
	15,  // 207: ast.RPCNode.semicolon:type_name -> ast.RuneNode
	15,  // 208: ast.RPCTypeNode.openParen:type_name -> ast.RuneNode
	5,   // 209: ast.RPCTypeNode.stream:type_name -> ast.IdentNode
	20,  // 210: ast.RPCTypeNode.messageType:type_name -> ast.IdentValueNode
	15,  // 211: ast.RPCTypeNode.closeParen:type_name -> ast.RuneNode
	15,  // 212: ast.RPCTypeNode.semicolon:type_name -> ast.RuneNode
	12,  // 213: ast.RPCElement.option:type_name -> ast.OptionNode
	5,   // 214: ast.SyntheticMapField.name:type_name -> ast.IdentNode
	20,  // 215: ast.SyntheticMapField.fieldType:type_name -> ast.IdentValueNode
	11,  // 216: ast.SyntheticMapField.tag:type_name -> ast.UintLiteralNode
	35,  // 217: ast.FieldDeclNode.field:type_name -> ast.FieldNode
	36,  // 218: ast.FieldDeclNode.mapField:type_name -> ast.MapFieldNode
	54,  // 219: ast.FieldDeclNode.syntheticMapField:type_name -> ast.SyntheticMapField
	38,  // 220: ast.FieldDeclNode.group:type_name -> ast.GroupNode
	221, // [221:221] is the sub-list for method output_type
	221, // [221:221] is the sub-list for method input_type
	221, // [221:221] is the sub-list for extension type_name
	221, // [221:221] is the sub-list for extension extendee
	0,   // [0:221] is the sub-list for field type_name
}

func init() { file_github_com_kralicky_protocompile_ast_ast_proto_init() }
func file_github_com_kralicky_protocompile_ast_ast_proto_init() {
	if File_github_com_kralicky_protocompile_ast_ast_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyntaxNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyDeclNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompoundIdentNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditionNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UintLiteralNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NegativeIntLiteralNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatLiteralNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuneNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringValueNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringLiteralNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompoundStringLiteralNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentValueNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionNameNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldReferenceNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecialFloatLiteralNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedFloatLiteralNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArrayLiteralNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageLiteralNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatValueNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageFieldNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompactOptionsNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageDeclNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapFieldNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneofNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtensionRangeNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReservedNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapTypeNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneofElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumValueNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntValueNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RPCNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RPCTypeNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RPCElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyntheticMapField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldDeclNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoSourceNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo_CommentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo_ItemSpan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*FileElement_Import)(nil),
		(*FileElement_Package)(nil),
		(*FileElement_Option)(nil),
		(*FileElement_Message)(nil),
		(*FileElement_Enum)(nil),
		(*FileElement_Extend)(nil),
		(*FileElement_Service)(nil),
		(*FileElement_Err)(nil),
	}
	file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*StringValueNode_StringLiteral)(nil),
		(*StringValueNode_CompoundStringLiteral)(nil),
	}
	file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*IdentValueNode_Ident)(nil),
		(*IdentValueNode_CompoundIdent)(nil),
	}
	file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*ValueNode_Ident)(nil),
		(*ValueNode_CompoundIdent)(nil),
		(*ValueNode_StringLiteral)(nil),
		(*ValueNode_CompoundStringLiteral)(nil),
		(*ValueNode_UintLiteral)(nil),
		(*ValueNode_NegativeIntLiteral)(nil),
		(*ValueNode_FloatLiteral)(nil),
		(*ValueNode_SpecialFloatLiteral)(nil),
		(*ValueNode_SignedFloatLiteral)(nil),
		(*ValueNode_ArrayLiteral)(nil),
		(*ValueNode_MessageLiteral)(nil),
	}
	file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*FloatValueNode_FloatLiteral)(nil),
		(*FloatValueNode_SpecialFloatLiteral)(nil),
		(*FloatValueNode_UintLiteral)(nil),
	}
	file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*MessageDeclNode_Message)(nil),
		(*MessageDeclNode_Group)(nil),
		(*MessageDeclNode_MapField)(nil),
	}
	file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[31].OneofWrappers = []interface{}{
		(*MessageElement_Option)(nil),
		(*MessageElement_Field)(nil),
		(*MessageElement_MapField)(nil),
		(*MessageElement_Oneof)(nil),
		(*MessageElement_Group)(nil),
		(*MessageElement_Message)(nil),
		(*MessageElement_Enum)(nil),
		(*MessageElement_Extend)(nil),
		(*MessageElement_ExtensionRange)(nil),
		(*MessageElement_Reserved)(nil),
		(*MessageElement_Empty)(nil),
	}
	file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[32].OneofWrappers = []interface{}{
		(*ExtendElement_Field)(nil),
		(*ExtendElement_Group)(nil),
		(*ExtendElement_Empty)(nil),
	}
	file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[42].OneofWrappers = []interface{}{
		(*OneofElement_Option)(nil),
		(*OneofElement_Field)(nil),
		(*OneofElement_Group)(nil),
	}
	file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[43].OneofWrappers = []interface{}{
		(*EnumElement_Option)(nil),
		(*EnumElement_EnumValue)(nil),
		(*EnumElement_Reserved)(nil),
	}
	file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[46].OneofWrappers = []interface{}{
		(*IntValueNode_UintLiteral)(nil),
		(*IntValueNode_NegativeIntLiteral)(nil),
	}
	file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[48].OneofWrappers = []interface{}{
		(*ServiceElement_Option)(nil),
		(*ServiceElement_Rpc)(nil),
	}
	file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[51].OneofWrappers = []interface{}{
		(*RPCElement_Option)(nil),
	}
	file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes[53].OneofWrappers = []interface{}{
		(*FieldDeclNode_Field)(nil),
		(*FieldDeclNode_MapField)(nil),
		(*FieldDeclNode_SyntheticMapField)(nil),
		(*FieldDeclNode_Group)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_kralicky_protocompile_ast_ast_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   57,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_kralicky_protocompile_ast_ast_proto_goTypes,
		DependencyIndexes: file_github_com_kralicky_protocompile_ast_ast_proto_depIdxs,
		EnumInfos:         file_github_com_kralicky_protocompile_ast_ast_proto_enumTypes,
		MessageInfos:      file_github_com_kralicky_protocompile_ast_ast_proto_msgTypes,
	}.Build()
	File_github_com_kralicky_protocompile_ast_ast_proto = out.File
	file_github_com_kralicky_protocompile_ast_ast_proto_rawDesc = nil
	file_github_com_kralicky_protocompile_ast_ast_proto_goTypes = nil
	file_github_com_kralicky_protocompile_ast_ast_proto_depIdxs = nil
}
