// Code generated by goyacc -o proto.y.go -l -p proto proto.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

//lint:file-ignore SA4006 generated parser has unused values

import (
	"math"

	"github.com/bufbuild/protocompile/ast"
)

type protoSymType struct {
	yys          int
	file         *ast.FileNode
	syn          *ast.SyntaxNode
	ed           *ast.EditionNode
	fileElement  ast.FileElement
	fileElements []ast.FileElement
	pkg          *ast.PackageNode
	imprt        *ast.ImportNode
	msg          *ast.MessageNode
	msgElement   ast.MessageElement
	msgElements  []ast.MessageElement
	fld          *ast.FieldNode
	mapFld       *ast.MapFieldNode
	mapType      *ast.MapTypeNode
	grp          *ast.GroupNode
	oo           *ast.OneofNode
	ooElement    ast.OneofElement
	ooElements   []ast.OneofElement
	ext          *ast.ExtensionRangeNode
	resvd        *ast.ReservedNode
	en           *ast.EnumNode
	enElement    ast.EnumElement
	enElements   []ast.EnumElement
	env          *ast.EnumValueNode
	extend       *ast.ExtendNode
	extElement   ast.ExtendElement
	extElements  []ast.ExtendElement
	svc          *ast.ServiceNode
	svcElement   ast.ServiceElement
	svcElements  []ast.ServiceElement
	mtd          *ast.RPCNode
	mtdMsgType   *ast.RPCTypeNode
	mtdElement   ast.RPCElement
	mtdElements  []ast.RPCElement
	opt          *ast.OptionNode
	opts         *compactOptionSlices
	ref          *ast.FieldReferenceNode
	optNms       *fieldRefSlices
	cmpctOpts    *ast.CompactOptionsNode
	rng          *ast.RangeNode
	rngs         *rangeSlices
	names        *nameSlices
	cid          *identSlices
	tid          ast.IdentValueNode
	sl           *valueSlices
	msgLitFlds   *messageFieldList
	msgLitFld    *ast.MessageFieldNode
	v            ast.ValueNode
	il           ast.IntValueNode
	str          []*ast.StringLiteralNode
	sv           ast.StringValueNode
	s            *ast.StringLiteralNode
	i            *ast.UintLiteralNode
	f            *ast.FloatLiteralNode
	id           *ast.IdentNode
	b            *ast.RuneNode
	err          error
}

const _STRING_LIT = 57346
const _INT_LIT = 57347
const _FLOAT_LIT = 57348
const _NAME = 57349
const _SYNTAX = 57350
const _EDITION = 57351
const _IMPORT = 57352
const _WEAK = 57353
const _PUBLIC = 57354
const _PACKAGE = 57355
const _OPTION = 57356
const _TRUE = 57357
const _FALSE = 57358
const _INF = 57359
const _NAN = 57360
const _REPEATED = 57361
const _OPTIONAL = 57362
const _REQUIRED = 57363
const _DOUBLE = 57364
const _FLOAT = 57365
const _INT32 = 57366
const _INT64 = 57367
const _UINT32 = 57368
const _UINT64 = 57369
const _SINT32 = 57370
const _SINT64 = 57371
const _FIXED32 = 57372
const _FIXED64 = 57373
const _SFIXED32 = 57374
const _SFIXED64 = 57375
const _BOOL = 57376
const _STRING = 57377
const _BYTES = 57378
const _GROUP = 57379
const _ONEOF = 57380
const _MAP = 57381
const _EXTENSIONS = 57382
const _TO = 57383
const _MAX = 57384
const _RESERVED = 57385
const _ENUM = 57386
const _MESSAGE = 57387
const _EXTEND = 57388
const _SERVICE = 57389
const _RPC = 57390
const _STREAM = 57391
const _RETURNS = 57392
const _ERROR = 57393

var protoToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"_STRING_LIT",
	"_INT_LIT",
	"_FLOAT_LIT",
	"_NAME",
	"_SYNTAX",
	"_EDITION",
	"_IMPORT",
	"_WEAK",
	"_PUBLIC",
	"_PACKAGE",
	"_OPTION",
	"_TRUE",
	"_FALSE",
	"_INF",
	"_NAN",
	"_REPEATED",
	"_OPTIONAL",
	"_REQUIRED",
	"_DOUBLE",
	"_FLOAT",
	"_INT32",
	"_INT64",
	"_UINT32",
	"_UINT64",
	"_SINT32",
	"_SINT64",
	"_FIXED32",
	"_FIXED64",
	"_SFIXED32",
	"_SFIXED64",
	"_BOOL",
	"_STRING",
	"_BYTES",
	"_GROUP",
	"_ONEOF",
	"_MAP",
	"_EXTENSIONS",
	"_TO",
	"_MAX",
	"_RESERVED",
	"_ENUM",
	"_MESSAGE",
	"_EXTEND",
	"_SERVICE",
	"_RPC",
	"_STREAM",
	"_RETURNS",
	"_ERROR",
	"'='",
	"';'",
	"':'",
	"'{'",
	"'}'",
	"'\\\\'",
	"'/'",
	"'?'",
	"'.'",
	"','",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'('",
	"')'",
	"'['",
	"']'",
	"'*'",
	"'&'",
	"'^'",
	"'%'",
	"'$'",
	"'#'",
	"'@'",
	"'!'",
	"'~'",
	"'`'",
}

var protoStatenames = [...]string{}

const protoEofCode = 1
const protoErrCode = 2
const protoInitialStackSize = 16

var protoExca = [...]int16{
	-1, 0,
	1, 6,
	-2, 0,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 1,
	-2, 0,
	-1, 3,
	1, 2,
	-2, 0,
	-1, 4,
	1, 3,
	-2, 0,
	-1, 24,
	1, 4,
	-2, 0,
	-1, 25,
	1, 5,
	-2, 0,
	-1, 103,
	56, 189,
	-2, 0,
	-1, 104,
	56, 177,
	-2, 0,
	-1, 105,
	56, 210,
	-2, 0,
	-1, 107,
	56, 223,
	-2, 0,
	-1, 128,
	56, 190,
	-2, 0,
	-1, 189,
	56, 178,
	-2, 0,
	-1, 242,
	56, 211,
	-2, 0,
	-1, 293,
	56, 224,
	-2, 0,
	-1, 304,
	56, 63,
	62, 63,
	-2, 0,
	-1, 422,
	56, 124,
	-2, 0,
	-1, 479,
	56, 125,
	-2, 0,
	-1, 639,
	56, 189,
	-2, 0,
	-1, 656,
	56, 235,
	-2, 0,
	-1, 664,
	56, 189,
	-2, 0,
	-1, 674,
	56, 236,
	-2, 0,
	-1, 685,
	56, 189,
	-2, 0,
	-1, 692,
	56, 189,
	-2, 0,
}

const protoPrivate = 57344

const protoLast = 1767

var protoAct = [...]int16{
	10, 127, 13, 12, 675, 11, 473, 113, 419, 409,
	87, 535, 611, 36, 455, 114, 597, 451, 480, 385,
	384, 116, 368, 301, 303, 453, 88, 294, 319, 135,
	142, 243, 148, 82, 85, 86, 190, 90, 367, 29,
	83, 129, 405, 119, 466, 35, 99, 667, 660, 91,
	92, 410, 94, 95, 636, 465, 411, 99, 463, 537,
	685, 683, 682, 666, 659, 679, 638, 538, 662, 652,
	635, 641, 639, 474, 474, 625, 474, 620, 634, 607,
	603, 472, 467, 386, 474, 474, 474, 657, 629, 452,
	474, 386, 474, 119, 474, 102, 474, 126, 379, 651,
	645, 410, 600, 633, 136, 191, 133, 131, 295, 132,
	115, 119, 602, 112, 118, 124, 106, 99, 537, 410,
	542, 534, 403, 404, 444, 462, 538, 426, 420, 136,
	402, 133, 131, 308, 132, 245, 247, 198, 427, 630,
	401, 646, 125, 387, 100, 446, 428, 98, 400, 101,
	618, 387, 101, 416, 99, 393, 16, 366, 377, 370,
	371, 376, 5, 6, 17, 695, 693, 18, 19, 375,
	317, 689, 687, 16, 680, 655, 613, 656, 690, 398,
	378, 17, 298, 395, 18, 19, 372, 388, 380, 316,
	191, 692, 678, 664, 19, 422, 107, 105, 21, 20,
	22, 23, 104, 103, 19, 672, 665, 15, 654, 650,
	643, 376, 615, 609, 540, 21, 20, 22, 23, 375,
	531, 530, 198, 390, 15, 300, 381, 111, 299, 110,
	109, 108, 93, 297, 648, 647, 543, 469, 468, 449,
	423, 418, 476, 677, 382, 28, 27, 545, 431, 432,
	433, 434, 435, 436, 437, 438, 439, 440, 441, 442,
	421, 7, 392, 612, 671, 670, 26, 624, 315, 313,
	312, 310, 245, 247, 389, 606, 391, 394, 605, 477,
	314, 34, 311, 81, 544, 529, 26, 26, 30, 31,
	369, 471, 447, 4, 295, 34, 24, 25, 97, 96,
	673, 674, 296, 292, 293, 14, 33, 32, 241, 242,
	192, 188, 189, 397, 134, 383, 193, 139, 308, 374,
	373, 396, 407, 478, 479, 128, 146, 138, 483, 399,
	137, 244, 414, 415, 482, 130, 412, 305, 304, 461,
	594, 547, 485, 248, 143, 548, 320, 487, 417, 249,
	152, 196, 550, 322, 489, 251, 155, 430, 406, 408,
	456, 117, 307, 610, 9, 8, 3, 2, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 424, 425, 0, 0, 0, 0, 0, 0, 0,
	0, 429, 445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 443, 0, 0, 448, 0, 450, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 118, 118,
	454, 454, 0, 481, 308, 0, 464, 0, 0, 0,
	470, 458, 0, 0, 459, 0, 0, 0, 0, 0,
	0, 0, 533, 475, 0, 0, 0, 0, 532, 0,
	536, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 539, 541, 0, 0, 0,
	601, 118, 599, 598, 0, 0, 0, 0, 608, 0,
	481, 0, 0, 0, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 604, 0, 0, 0, 0, 614, 616,
	617, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 619, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 621, 0, 0, 0,
	0, 0, 0, 0, 0, 622, 0, 0, 623, 0,
	0, 626, 0, 0, 0, 0, 0, 628, 0, 0,
	0, 0, 0, 627, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 631, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 632, 0, 0, 0, 0, 0, 0,
	0, 0, 640, 642, 0, 0, 0, 637, 0, 644,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 653, 649, 0, 0, 0, 0, 0, 0, 0,
	136, 663, 133, 131, 658, 132, 0, 118, 599, 598,
	661, 0, 0, 0, 669, 0, 115, 676, 668, 82,
	118, 0, 0, 0, 0, 136, 681, 133, 131, 0,
	132, 0, 0, 0, 0, 676, 0, 684, 686, 688,
	0, 0, 0, 0, 0, 0, 136, 691, 133, 131,
	0, 132, 0, 136, 694, 133, 131, 596, 132, 34,
	123, 120, 37, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 0, 0, 0, 0,
	119, 0, 0, 0, 0, 0, 0, 0, 410, 122,
	121, 0, 0, 0, 595, 34, 123, 120, 37, 38,
	39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 80, 0, 0, 0, 0, 119, 0, 0, 0,
	0, 0, 0, 0, 410, 122, 121, 0, 0, 457,
	34, 123, 120, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 0, 0, 0,
	0, 119, 0, 0, 0, 0, 0, 0, 0, 410,
	122, 121, 34, 123, 120, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 0,
	0, 0, 0, 119, 0, 0, 0, 0, 0, 306,
	0, 0, 122, 121, 37, 38, 39, 40, 41, 42,
	43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 76, 77, 78, 79, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 460,
	0, 306, 0, 0, 0, 309, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	0, 0, 0, 0, 0, 302, 0, 0, 0, 0,
	0, 0, 0, 306, 0, 0, 0, 309, 37, 38,
	39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 80, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 34, 386, 309,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 387, 37,
	38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 84, 156,
	157, 158, 159, 160, 161, 162, 19, 163, 164, 165,
	166, 151, 150, 149, 167, 168, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 178, 179, 180, 181, 0,
	145, 154, 144, 182, 183, 147, 21, 20, 22, 184,
	185, 186, 187, 0, 0, 140, 0, 0, 0, 0,
	0, 0, 153, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 551, 552, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 578, 579, 580, 581, 582, 583,
	584, 585, 586, 587, 588, 589, 590, 591, 592, 546,
	593, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	549, 323, 324, 325, 326, 327, 328, 329, 330, 331,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	352, 318, 353, 354, 355, 356, 357, 358, 359, 360,
	361, 362, 363, 364, 365, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 321, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 151, 150, 149,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 0, 279, 280, 281, 282,
	283, 284, 285, 286, 287, 288, 289, 290, 291, 0,
	0, 0, 0, 0, 484, 0, 0, 0, 250, 490,
	491, 492, 493, 494, 495, 496, 19, 497, 498, 499,
	500, 0, 0, 0, 501, 502, 503, 504, 505, 506,
	507, 508, 509, 510, 511, 512, 513, 514, 515, 486,
	516, 517, 518, 519, 520, 521, 522, 523, 524, 525,
	526, 527, 528, 0, 0, 0, 0, 0, 195, 0,
	0, 0, 488, 199, 200, 201, 202, 203, 204, 205,
	19, 206, 207, 208, 209, 210, 211, 212, 213, 214,
	215, 216, 217, 218, 219, 220, 221, 222, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 233, 197,
	234, 235, 236, 237, 238, 239, 240, 34, 369, 194,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 413, 0, 0, 0, 0, 37,
	38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 80, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80,
}

var protoPact = [...]int16{
	154, -1000, 171, 171, 171, 194, 193, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 277, 1716, 1192,
	1716, 1716, 1306, 1716, 171, 171, -1000, 291, 291, 179,
	291, 291, -1000, 295, 294, 94, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 92, -1000, -1000, 1306, 148, 147, 142, 57, 1716,
	141, 178, 177, -1000, 176, 174, -1000, -1000, -1000, 1716,
	888, 1192, 30, 1252, 1576, 1468, 57, 180, -1000, -1000,
	-1000, -1000, -1000, 172, -1000, -1000, -1000, -1000, -1000, 1009,
	-1000, 265, 263, -1000, -1000, -1000, -1000, 133, 1252, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1414, 1716, 285, 1716, 1716, 1623, -1000, -1000,
	-1000, -1000, 98, 1716, 35, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 132, 1576,
	-1000, -1000, -1000, -1000, -1000, -1000, 192, 1133, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 131, 1468, -1000, -1000, -1000, 170, 1414, 1716, 95,
	1716, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 127, 180, -1000, -1000, -1000, -1000, -1000, 1716,
	-1000, 123, -1000, -1000, 1071, 87, 69, -12, -1000, 1672,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1716, 1716,
	93, 1716, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 189, 67, -1000, 219,
	140, 188, 67, 66, 85, -1000, -1000, 1716, 57, 224,
	-1000, -1000, 86, 63, -1000, 104, -1000, 287, -1000, -1000,
	-1000, 1716, 187, 1716, 57, -1000, -1000, 23, -1000, -1000,
	-1000, -1000, -1000, -1000, 761, 761, -1000, -1000, -1000, -1000,
	947, 56, -14, 13, 186, 185, 1716, 57, 286, 28,
	285, 237, 1522, 280, 168, 167, 291, -1000, 1716, -1000,
	60, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 6, 86, 161, 78, -1000, 184, 279,
	-1000, 197, 1360, -1000, -1000, -1000, -1000, 695, -1000, 40,
	-1000, 51, -1000, 11, -1000, -1000, 1716, -1000, 273, 270,
	-1000, 26, -1000, 160, 1192, -1000, -1000, -1000, 120, 1522,
	-1000, -1000, -1000, -1000, 159, 1716, 1716, 90, 1716, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 24,
	-1000, -1000, -1000, -1000, 1306, -1000, 65, -1000, -1000, -1000,
	-1000, -1000, -1000, 262, 22, 23, 1306, 21, 79, 1716,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 42, -1000, 9, -1000, -1000, -1000,
	-1000, 1, 38, -1000, -3, 17, 18, -1000, 157, -1000,
	39, -1000, 89, -1000, -1000, -1000, 183, 182, 1716, 57,
	-1000, 156, 37, -1000, 16, -1000, 155, 122, 20, -1000,
	1716, 57, -5, 826, -1000, -1000, -1, -1000, -1000, 1252,
	138, -1000, 153, -1000, -6, 1192, 888, 260, 259, -1000,
	-1000, -1000, -1000, 152, -1000, -1000, 190, -1000, -1000, -1000,
	-4, -1000, -1000, 118, 1252, -1000, -1000, -7, -1000, -1000,
	8, 5, -1000, 116, 190, -1000, -1000, -1000, -1000, -1000,
	-1000, 115, -1000, -1000, 125, 1252, 136, -1000, -1000, -1000,
	-1000, 110, 1252, -1000, 109, -1000,
}

var protoPgo = [...]int16{
	0, 368, 367, 366, 261, 293, 365, 364, 0, 12,
	363, 40, 362, 263, 6, 25, 7, 15, 9, 14,
	361, 360, 16, 359, 358, 19, 13, 357, 356, 355,
	354, 353, 352, 351, 30, 26, 350, 349, 347, 346,
	345, 10, 344, 343, 342, 28, 341, 340, 339, 338,
	24, 23, 337, 335, 334, 331, 330, 29, 328, 327,
	326, 5, 41, 325, 1, 18, 324, 323, 320, 319,
	317, 316, 32, 22, 20, 38, 315, 314, 3, 36,
	312, 311, 310, 2, 31, 309, 308, 21, 307, 306,
	305, 27, 304, 303, 302, 4, 301, 300, 17, 11,
	8,
}

var protoR1 = [...]int8{
	0, 1, 1, 1, 1, 1, 1, 5, 5, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 2, 3,
	6, 6, 6, 7, 35, 35, 36, 36, 37, 37,
	38, 38, 39, 39, 40, 40, 8, 13, 13, 13,
	13, 11, 16, 16, 17, 17, 17, 20, 20, 20,
	20, 20, 20, 20, 20, 87, 87, 88, 89, 89,
	18, 18, 51, 50, 50, 49, 49, 49, 49, 49,
	49, 52, 52, 52, 12, 12, 12, 12, 15, 15,
	15, 24, 24, 19, 19, 19, 21, 21, 21, 21,
	47, 47, 22, 22, 23, 23, 23, 23, 48, 48,
	41, 41, 42, 42, 43, 43, 44, 44, 45, 45,
	46, 46, 34, 34, 34, 14, 14, 10, 10, 10,
	9, 57, 57, 56, 67, 67, 66, 66, 65, 65,
	65, 65, 65, 54, 54, 58, 58, 59, 59, 60,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 77, 77, 75, 75, 73, 73, 73, 76,
	76, 74, 74, 74, 25, 25, 70, 70, 71, 71,
	72, 72, 68, 68, 69, 69, 78, 81, 81, 80,
	80, 79, 79, 79, 79, 79, 82, 82, 61, 64,
	64, 63, 63, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 53, 53, 53, 53, 83,
	86, 86, 85, 85, 84, 84, 84, 84, 55, 55,
	55, 55, 90, 93, 93, 92, 92, 91, 91, 91,
	91, 94, 94, 98, 98, 97, 97, 96, 96, 95,
	95, 95, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 100, 100, 99, 99,
}

var protoR2 = [...]int8{
	0, 1, 1, 1, 2, 2, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 4,
	3, 4, 4, 3, 1, 3, 1, 3, 1, 3,
	1, 3, 1, 3, 1, 3, 5, 1, 3, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 1, 2, 2, 1, 1, 1, 2, 2,
	3, 2, 1, 1, 2, 1, 2, 2, 2, 2,
	1, 3, 2, 3, 1, 3, 5, 3, 1, 1,
	1, 1, 1, 1, 3, 2, 4, 5, 2, 3,
	1, 3, 1, 1, 4, 5, 2, 3, 1, 3,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 4, 5, 1, 3, 0,
	3, 8, 9, 5, 0, 1, 2, 1, 1, 1,
	1, 2, 1, 5, 6, 7, 8, 5, 6, 6,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 5, 1, 3, 1, 3, 3, 1,
	3, 1, 3, 3, 1, 2, 4, 1, 4, 1,
	4, 3, 1, 3, 1, 3, 5, 0, 1, 2,
	1, 1, 1, 1, 1, 1, 4, 5, 5, 0,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 6, 7, 5, 6, 5,
	0, 1, 2, 1, 1, 1, 2, 1, 6, 7,
	5, 6, 5, 0, 1, 2, 1, 1, 1, 1,
	1, 6, 8, 4, 3, 0, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
}

var protoChk = [...]int16{
	-1000, -1, -2, -3, -5, 8, 9, -4, -6, -7,
	-8, -61, -78, -83, -90, 53, 2, 10, 13, 14,
	45, 44, 46, 47, -5, -5, -4, 52, 52, -87,
	11, 12, -88, -89, 4, -35, -26, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, -13, -26, -11, 66, -26, -26, -41, -35, 60,
	-26, -87, -87, 53, -87, -87, 4, 4, 53, 60,
	52, 60, -41, 55, 55, 55, -35, 55, 53, 53,
	53, 53, -26, -16, -17, -18, -87, -20, -26, 55,
	6, 65, 64, 5, -26, -11, 67, -64, -63, -62,
	-53, -78, -61, -83, -77, -57, -8, -56, -59, -70,
	53, 2, -34, -42, 40, 38, -60, 43, -72, 21,
	20, 19, -36, 60, 39, -28, 7, 8, 9, 10,
	11, 12, 13, 15, 16, 17, 18, 22, 23, 24,
	25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
	35, 36, 41, 42, 47, 48, 49, 50, -81, -80,
	-79, -8, -82, -71, 53, 2, -33, 43, -72, 7,
	8, 9, 10, 11, 12, 13, 15, 16, 17, 18,
	19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
	29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
	39, 40, 41, 42, 44, 45, 46, 47, 48, 49,
	50, -86, -85, -84, -55, -57, 2, -34, -43, -37,
	60, -29, 7, 8, 9, 10, 11, 12, 13, 14,
	15, 16, 17, 18, 22, 23, 24, 25, 26, 27,
	28, 29, 30, 31, 32, 33, 34, 35, 36, 38,
	39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
	49, 50, -93, -92, -91, -8, -94, 53, 2, 48,
	53, -51, 56, -50, -49, -52, 2, -12, -26, 68,
	6, 17, 5, 6, 17, 5, 56, -62, 37, -45,
	-39, 60, -31, 7, 8, 9, 10, 11, 12, 13,
	14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, -26, -75, -73, 5,
	-26, -26, -75, -68, -69, -87, -26, 60, -35, 63,
	56, -79, 52, -76, -74, -25, 5, 65, 56, -84,
	53, -45, -26, 60, -35, 56, -91, -26, 56, -50,
	61, 53, 61, 53, 54, 54, -24, -19, -23, -18,
	63, 68, -35, 2, -26, -26, 60, -35, 52, -100,
	61, 41, 55, 52, -100, -100, 61, 53, 61, -26,
	-27, 24, 25, 26, 27, 28, 29, 30, 31, 32,
	33, 34, 35, -25, 61, -100, 41, 5, -26, 52,
	-26, -98, 66, -15, -17, -19, -21, 68, -15, -51,
	62, -48, 69, 2, -19, 69, 58, 69, 52, 52,
	-26, 5, 53, -14, 68, -73, 5, 42, -67, -66,
	-65, -8, -54, -58, 2, -44, 37, -38, 60, -30,
	7, 8, 9, 10, 11, 12, 13, 15, 16, 17,
	18, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 36, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 5,
	53, 53, -87, -26, 61, -99, -14, 53, 61, -74,
	53, -25, 42, 52, 5, 50, 49, -46, -40, 60,
	-32, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
	26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
	36, 37, 38, 39, 40, 41, 42, 43, 44, 45,
	46, 47, 48, 50, -47, 69, 2, -22, -17, -19,
	62, -100, 61, 69, -35, 5, 5, 53, -14, 53,
	-10, -9, -13, 56, -65, 53, -26, -26, 60, -35,
	53, -14, -41, -99, 5, 53, -14, -98, -41, 67,
	60, -35, -100, 61, 69, 69, 53, -19, 69, 55,
	-14, 53, -14, 53, -100, 61, 52, 52, 52, -26,
	53, 62, 53, -14, 53, 53, 55, 67, -26, 69,
	53, -22, 69, -64, 55, 53, 69, 53, -9, -16,
	5, 5, 53, -97, -96, -95, -8, 53, 2, 69,
	56, -64, 69, 53, -14, 55, -14, 56, -95, 56,
	53, -64, 55, 56, -64, 56,
}

var protoDef = [...]int16{
	-2, -2, -2, -2, -2, 0, 0, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 0, 0, 0,
	0, 0, 0, 0, -2, -2, 7, 0, 0, 0,
	0, 0, 55, 56, 57, 0, 24, 482, 483, 484,
	485, 486, 487, 488, 489, 490, 491, 492, 493, 494,
	495, 496, 497, 498, 499, 500, 501, 502, 503, 504,
	505, 506, 507, 508, 509, 510, 511, 512, 513, 514,
	515, 516, 517, 518, 519, 520, 521, 522, 523, 524,
	525, 0, 37, 39, 0, 0, 0, 0, 100, 0,
	0, 0, 0, 20, 0, 0, 59, 58, 23, 0,
	0, 0, 0, -2, -2, -2, 101, -2, 18, 19,
	21, 22, 25, 0, 42, 43, 44, 45, 46, 0,
	47, 0, 0, 52, 38, 40, 41, 0, -2, 192,
	193, 194, 195, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 0, 0, 0, 0, 0, 0, 167, 112,
	113, 114, 102, 0, 268, 26, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 269, 270, 271, 272, 273, 274, 0, -2,
	180, 181, 182, 183, 184, 185, 0, 0, 169, 315,
	316, 317, 318, 319, 320, 321, 322, 323, 324, 325,
	326, 327, 328, 329, 330, 331, 332, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 349, 350, 351, 352, 353, 354, 355,
	356, 0, -2, 213, 214, 215, 217, 0, 0, 104,
	0, 28, 275, 276, 277, 278, 279, 280, 281, 282,
	283, 284, 285, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
	303, 304, 305, 306, 307, 308, 309, 310, 311, 312,
	313, 314, 0, -2, 226, 227, 228, 229, 230, 0,
	36, 0, 61, 62, -2, 65, 70, 0, 74, 0,
	48, 51, 54, 49, 50, 53, 188, 191, 0, 0,
	108, 0, 32, 396, 397, 398, 399, 400, 401, 402,
	403, 404, 405, 406, 407, 408, 409, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 422,
	423, 424, 425, 426, 427, 428, 429, 430, 431, 432,
	433, 434, 435, 436, 437, 438, 0, 527, 154, 156,
	0, 0, 527, 527, 0, 172, 174, 0, 103, 0,
	176, 179, 0, 527, 159, 161, 164, 0, 209, 212,
	216, 0, 0, 0, 105, 222, 225, 0, 60, 64,
	66, 67, 68, 69, 0, 0, 72, 81, 82, 83,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	526, 0, -2, 0, 0, 0, 526, 171, 0, 27,
	0, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 0, 526, 0, 0, 165, 0, 0,
	29, 0, 0, 73, 78, 79, 80, 0, 71, 0,
	85, 527, 96, 0, 98, 75, 0, 77, 0, 0,
	33, 0, 152, 0, 119, 155, 157, 158, 0, -2,
	127, 128, 129, 130, 132, 0, 0, 106, 0, 30,
	357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 372, 373, 374, 375, 376,
	377, 378, 379, 380, 381, 382, 383, 384, 385, 386,
	387, 388, 389, 390, 391, 392, 393, 394, 395, 0,
	166, 170, 173, 175, 0, 186, 0, 528, 529, 160,
	168, 162, 163, 0, 0, 0, 0, 0, 110, 0,
	34, 439, 440, 441, 442, 443, 444, 445, 446, 447,
	448, 449, 450, 451, 452, 453, 454, 455, 456, 457,
	458, 459, 460, 461, 462, 463, 464, 465, 466, 467,
	468, 469, 470, 471, 472, 473, 474, 475, 476, 477,
	478, 479, 480, 481, 527, 88, 0, 90, 92, 93,
	84, 0, 526, 97, 0, 0, 0, 207, 0, 153,
	527, 117, 0, 123, 126, 131, 0, 0, 0, 107,
	137, 0, 0, 187, 0, 220, 0, 0, 0, 234,
	0, 111, 0, 526, 89, 94, 0, 99, 76, -2,
	0, 205, 0, 208, 0, 526, 0, 0, 0, 31,
	138, 139, 218, 0, 221, 231, -2, 233, 35, 86,
	0, 91, 95, 0, -2, 206, 115, 0, 118, 120,
	0, 0, 219, 0, -2, 238, 239, 240, 241, 87,
	121, 0, 116, 133, 0, -2, 0, 232, 237, 122,
	134, 0, -2, 135, 0, 136,
}

var protoTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 77, 3, 75, 74, 73, 71, 3,
	66, 67, 70, 64, 61, 65, 60, 58, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 54, 53,
	63, 52, 62, 59, 76, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 68, 57, 69, 72, 3, 79, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 55, 3, 56, 78,
}

var protoTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
}

var protoTok3 = [...]int8{
	0,
}

var protoErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	protoDebug        = 0
	protoErrorVerbose = false
)

type protoLexer interface {
	Lex(lval *protoSymType) int
	Error(s string)
}

type protoParser interface {
	Parse(protoLexer) int
	Lookahead() int
}

type protoParserImpl struct {
	lval  protoSymType
	stack [protoInitialStackSize]protoSymType
	char  int
}

func (p *protoParserImpl) Lookahead() int {
	return p.char
}

func protoNewParser() protoParser {
	return &protoParserImpl{}
}

const protoFlag = -1000

func protoTokname(c int) string {
	if c >= 1 && c-1 < len(protoToknames) {
		if protoToknames[c-1] != "" {
			return protoToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func protoStatname(s int) string {
	if s >= 0 && s < len(protoStatenames) {
		if protoStatenames[s] != "" {
			return protoStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func protoErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !protoErrorVerbose {
		return "syntax error"
	}

	for _, e := range protoErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + protoTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(protoPact[state])
	for tok := TOKSTART; tok-1 < len(protoToknames); tok++ {
		if n := base + tok; n >= 0 && n < protoLast && int(protoChk[int(protoAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if protoDef[state] == -2 {
		i := 0
		for protoExca[i] != -1 || int(protoExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; protoExca[i] >= 0; i += 2 {
			tok := int(protoExca[i])
			if tok < TOKSTART || protoExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if protoExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += protoTokname(tok)
	}
	return res
}

func protolex1(lex protoLexer, lval *protoSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(protoTok1[0])
		goto out
	}
	if char < len(protoTok1) {
		token = int(protoTok1[char])
		goto out
	}
	if char >= protoPrivate {
		if char < protoPrivate+len(protoTok2) {
			token = int(protoTok2[char-protoPrivate])
			goto out
		}
	}
	for i := 0; i < len(protoTok3); i += 2 {
		token = int(protoTok3[i+0])
		if token == char {
			token = int(protoTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(protoTok2[1]) /* unknown char */
	}
	if protoDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", protoTokname(token), uint(char))
	}
	return char, token
}

func protoParse(protolex protoLexer) int {
	return protoNewParser().Parse(protolex)
}

func (protorcvr *protoParserImpl) Parse(protolex protoLexer) int {
	var proton int
	var protoVAL protoSymType
	var protoDollar []protoSymType
	_ = protoDollar // silence set and not used
	protoS := protorcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	protostate := 0
	protorcvr.char = -1
	prototoken := -1 // protorcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		protostate = -1
		protorcvr.char = -1
		prototoken = -1
	}()
	protop := -1
	goto protostack

ret0:
	return 0

ret1:
	return 1

protostack:
	/* put a state and value onto the stack */
	if protoDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", protoTokname(prototoken), protoStatname(protostate))
	}

	protop++
	if protop >= len(protoS) {
		nyys := make([]protoSymType, len(protoS)*2)
		copy(nyys, protoS)
		protoS = nyys
	}
	protoS[protop] = protoVAL
	protoS[protop].yys = protostate

protonewstate:
	proton = int(protoPact[protostate])
	if proton <= protoFlag {
		goto protodefault /* simple state */
	}
	if protorcvr.char < 0 {
		protorcvr.char, prototoken = protolex1(protolex, &protorcvr.lval)
	}
	proton += prototoken
	if proton < 0 || proton >= protoLast {
		goto protodefault
	}
	proton = int(protoAct[proton])
	if int(protoChk[proton]) == prototoken { /* valid shift */
		protorcvr.char = -1
		prototoken = -1
		protoVAL = protorcvr.lval
		protostate = proton
		if Errflag > 0 {
			Errflag--
		}
		goto protostack
	}

protodefault:
	/* default state action */
	proton = int(protoDef[protostate])
	if proton == -2 {
		if protorcvr.char < 0 {
			protorcvr.char, prototoken = protolex1(protolex, &protorcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if protoExca[xi+0] == -1 && int(protoExca[xi+1]) == protostate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			proton = int(protoExca[xi+0])
			if proton < 0 || proton == prototoken {
				break
			}
		}
		proton = int(protoExca[xi+1])
		if proton < 0 {
			goto ret0
		}
	}
	if proton == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			protolex.Error(protoErrorMessage(protostate, prototoken))
			Nerrs++
			if protoDebug >= 1 {
				__yyfmt__.Printf("%s", protoStatname(protostate))
				__yyfmt__.Printf(" saw %s\n", protoTokname(prototoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for protop >= 0 {
				proton = int(protoPact[protoS[protop].yys]) + protoErrCode
				if proton >= 0 && proton < protoLast {
					protostate = int(protoAct[proton]) /* simulate a shift of "error" */
					if int(protoChk[protostate]) == protoErrCode {
						goto protostack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if protoDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", protoS[protop].yys)
				}
				protop--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if protoDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", protoTokname(prototoken))
			}
			if prototoken == protoEofCode {
				goto ret1
			}
			protorcvr.char = -1
			prototoken = -1
			goto protonewstate /* try again in the same state */
		}
	}

	/* reduction by production proton */
	if protoDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", proton, protoStatname(protostate))
	}

	protont := proton
	protopt := protop
	_ = protopt // guard against "declared and not used"

	protop -= int(protoR2[proton])
	// protop is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if protop+1 >= len(protoS) {
		nyys := make([]protoSymType, len(protoS)*2)
		copy(nyys, protoS)
		protoS = nyys
	}
	protoVAL = protoS[protop+1]

	/* consult goto table to find next state */
	proton = int(protoR1[proton])
	protog := int(protoPgo[proton])
	protoj := protog + protoS[protop].yys + 1

	if protoj >= protoLast {
		protostate = int(protoAct[protog])
	} else {
		protostate = int(protoAct[protoj])
		if int(protoChk[protostate]) != -proton {
			protostate = int(protoAct[protog])
		}
	}
	// dummy call; replaced with literal code
	switch protont {

	case 1:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, protoDollar[1].syn, nil, lex.eof)
			lex.res = protoVAL.file
		}
	case 2:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNodeWithEdition(lex.info, protoDollar[1].ed, nil, lex.eof)
			lex.res = protoVAL.file
		}
	case 3:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, nil, protoDollar[1].fileElements, lex.eof)
			lex.res = protoVAL.file
		}
	case 4:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, protoDollar[1].syn, protoDollar[2].fileElements, lex.eof)
			lex.res = protoVAL.file
		}
	case 5:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNodeWithEdition(lex.info, protoDollar[1].ed, protoDollar[2].fileElements, lex.eof)
			lex.res = protoVAL.file
		}
	case 6:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, nil, nil, lex.eof)
			lex.res = protoVAL.file
		}
	case 7:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].fileElement != nil {
				protoVAL.fileElements = append(protoDollar[1].fileElements, protoDollar[2].fileElement)
			} else {
				protoVAL.fileElements = protoDollar[1].fileElements
			}
		}
	case 8:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].fileElement != nil {
				protoVAL.fileElements = []ast.FileElement{protoDollar[1].fileElement}
			} else {
				protoVAL.fileElements = nil
			}
		}
	case 9:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElement = protoDollar[1].imprt
		}
	case 10:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElement = protoDollar[1].pkg
		}
	case 11:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElement = protoDollar[1].opt
		}
	case 12:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElement = protoDollar[1].msg
		}
	case 13:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElement = protoDollar[1].en
		}
	case 14:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElement = protoDollar[1].extend
		}
	case 15:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElement = protoDollar[1].svc
		}
	case 16:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElement = ast.NewEmptyDeclNode(protoDollar[1].b)
		}
	case 17:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElement = nil
		}
	case 18:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.syn = ast.NewSyntaxNode(protoDollar[1].id.ToKeyword(), protoDollar[2].b, protoDollar[3].sv, protoDollar[4].b)
		}
	case 19:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.ed = ast.NewEditionNode(protoDollar[1].id.ToKeyword(), protoDollar[2].b, protoDollar[3].sv, protoDollar[4].b)
		}
	case 20:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.imprt = ast.NewImportNode(protoDollar[1].id.ToKeyword(), nil, nil, protoDollar[2].sv, protoDollar[3].b)
		}
	case 21:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.imprt = ast.NewImportNode(protoDollar[1].id.ToKeyword(), nil, protoDollar[2].id.ToKeyword(), protoDollar[3].sv, protoDollar[4].b)
		}
	case 22:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.imprt = ast.NewImportNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), nil, protoDollar[3].sv, protoDollar[4].b)
		}
	case 23:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.pkg = ast.NewPackageNode(protoDollar[1].id.ToKeyword(), protoDollar[2].cid.toIdentValueNode(nil), protoDollar[3].b)
		}
	case 24:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identSlices{idents: []*ast.IdentNode{protoDollar[1].id}}
		}
	case 25:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].cid.idents = append(protoDollar[1].cid.idents, protoDollar[3].id)
			protoDollar[1].cid.dots = append(protoDollar[1].cid.dots, protoDollar[2].b)
			protoVAL.cid = protoDollar[1].cid
		}
	case 26:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identSlices{idents: []*ast.IdentNode{protoDollar[1].id}}
		}
	case 27:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].cid.idents = append(protoDollar[1].cid.idents, protoDollar[3].id)
			protoDollar[1].cid.dots = append(protoDollar[1].cid.dots, protoDollar[2].b)
			protoVAL.cid = protoDollar[1].cid
		}
	case 28:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identSlices{idents: []*ast.IdentNode{protoDollar[1].id}}
		}
	case 29:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].cid.idents = append(protoDollar[1].cid.idents, protoDollar[3].id)
			protoDollar[1].cid.dots = append(protoDollar[1].cid.dots, protoDollar[2].b)
			protoVAL.cid = protoDollar[1].cid
		}
	case 30:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identSlices{idents: []*ast.IdentNode{protoDollar[1].id}}
		}
	case 31:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].cid.idents = append(protoDollar[1].cid.idents, protoDollar[3].id)
			protoDollar[1].cid.dots = append(protoDollar[1].cid.dots, protoDollar[2].b)
			protoVAL.cid = protoDollar[1].cid
		}
	case 32:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identSlices{idents: []*ast.IdentNode{protoDollar[1].id}}
		}
	case 33:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].cid.idents = append(protoDollar[1].cid.idents, protoDollar[3].id)
			protoDollar[1].cid.dots = append(protoDollar[1].cid.dots, protoDollar[2].b)
			protoVAL.cid = protoDollar[1].cid
		}
	case 34:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identSlices{idents: []*ast.IdentNode{protoDollar[1].id}}
		}
	case 35:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].cid.idents = append(protoDollar[1].cid.idents, protoDollar[3].id)
			protoDollar[1].cid.dots = append(protoDollar[1].cid.dots, protoDollar[2].b)
			protoVAL.cid = protoDollar[1].cid
		}
	case 36:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			optName := ast.NewOptionNameNode(protoDollar[2].optNms.refs, protoDollar[2].optNms.dots)
			protoVAL.opt = ast.NewOptionNode(protoDollar[1].id.ToKeyword(), optName, protoDollar[3].b, protoDollar[4].v, protoDollar[5].b)
		}
	case 37:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			fieldReferenceNode := ast.NewFieldReferenceNode(protoDollar[1].id)
			protoVAL.optNms = &fieldRefSlices{refs: []*ast.FieldReferenceNode{fieldReferenceNode}}
		}
	case 38:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].optNms.refs = append(protoDollar[1].optNms.refs, ast.NewFieldReferenceNode(protoDollar[3].id))
			protoDollar[1].optNms.dots = append(protoDollar[1].optNms.dots, protoDollar[2].b)
			protoVAL.optNms = protoDollar[1].optNms
		}
	case 39:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.optNms = &fieldRefSlices{refs: []*ast.FieldReferenceNode{protoDollar[1].ref}}
		}
	case 40:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].optNms.refs = append(protoDollar[1].optNms.refs, protoDollar[3].ref)
			protoDollar[1].optNms.dots = append(protoDollar[1].optNms.dots, protoDollar[2].b)
			protoVAL.optNms = protoDollar[1].optNms
		}
	case 41:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.ref = ast.NewExtensionFieldReferenceNode(protoDollar[1].b, protoDollar[2].tid, protoDollar[3].b)
		}
	case 44:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].sv
		}
	case 46:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].id
		}
	case 47:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].f
		}
	case 48:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, protoDollar[2].f)
		}
	case 49:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, protoDollar[2].f)
		}
	case 50:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			f := ast.NewSpecialFloatLiteralNode(protoDollar[2].id.ToKeyword())
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, f)
		}
	case 51:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			f := ast.NewSpecialFloatLiteralNode(protoDollar[2].id.ToKeyword())
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, f)
		}
	case 52:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].i
		}
	case 53:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewPositiveUintLiteralNode(protoDollar[1].b, protoDollar[2].i)
		}
	case 54:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].i.Val > math.MaxInt64+1 {
				// can't represent as int so treat as float literal
				protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, protoDollar[2].i)
			} else {
				protoVAL.v = ast.NewNegativeIntLiteralNode(protoDollar[1].b, protoDollar[2].i)
			}
		}
	case 55:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.sv = protoDollar[1].s
		}
	case 56:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.sv = ast.NewCompoundLiteralStringNode(protoDollar[1].str...)
		}
	case 57:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.s = protoDollar[1].s
		}
	case 58:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.str = []*ast.StringLiteralNode{protoDollar[1].s, protoDollar[2].s}
		}
	case 59:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.str = append(protoDollar[1].str, protoDollar[2].s)
		}
	case 60:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[2].msgLitFlds == nil {
				protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, nil, nil, protoDollar[3].b)
			} else {
				fields, delimiters := protoDollar[2].msgLitFlds.toNodes()
				protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, fields, delimiters, protoDollar[3].b)
			}
		}
	case 61:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, nil, nil, protoDollar[2].b)
		}
	case 64:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].msgLitFlds != nil {
				protoDollar[1].msgLitFlds.next = protoDollar[2].msgLitFlds
				protoVAL.msgLitFlds = protoDollar[1].msgLitFlds
			} else {
				protoVAL.msgLitFlds = protoDollar[2].msgLitFlds
			}
		}
	case 65:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].msgLitFld != nil {
				protoVAL.msgLitFlds = &messageFieldList{field: protoDollar[1].msgLitFld}
			} else {
				protoVAL.msgLitFlds = nil
			}
		}
	case 66:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].msgLitFld != nil {
				protoVAL.msgLitFlds = &messageFieldList{field: protoDollar[1].msgLitFld, delimiter: protoDollar[2].b}
			} else {
				protoVAL.msgLitFlds = nil
			}
		}
	case 67:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].msgLitFld != nil {
				protoVAL.msgLitFlds = &messageFieldList{field: protoDollar[1].msgLitFld, delimiter: protoDollar[2].b}
			} else {
				protoVAL.msgLitFlds = nil
			}
		}
	case 68:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.msgLitFlds = nil
		}
	case 69:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.msgLitFlds = nil
		}
	case 70:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgLitFlds = nil
		}
	case 71:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[1].ref != nil && protoDollar[2].b != nil {
				protoVAL.msgLitFld = ast.NewMessageFieldNode(protoDollar[1].ref, protoDollar[2].b, protoDollar[3].v)
			} else {
				protoVAL.msgLitFld = nil
			}
		}
	case 72:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].ref != nil && protoDollar[2].v != nil {
				protoVAL.msgLitFld = ast.NewMessageFieldNode(protoDollar[1].ref, nil, protoDollar[2].v)
			} else {
				protoVAL.msgLitFld = nil
			}
		}
	case 73:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.msgLitFld = nil
		}
	case 74:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ref = ast.NewFieldReferenceNode(protoDollar[1].id)
		}
	case 75:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.ref = ast.NewExtensionFieldReferenceNode(protoDollar[1].b, protoDollar[2].cid.toIdentValueNode(nil), protoDollar[3].b)
		}
	case 76:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.ref = ast.NewAnyTypeReferenceNode(protoDollar[1].b, protoDollar[2].cid.toIdentValueNode(nil), protoDollar[3].b, protoDollar[4].cid.toIdentValueNode(nil), protoDollar[5].b)
		}
	case 77:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.ref = nil
		}
	case 84:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[2].msgLitFlds == nil {
				protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, nil, nil, protoDollar[3].b)
			} else {
				fields, delimiters := protoDollar[2].msgLitFlds.toNodes()
				protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, fields, delimiters, protoDollar[3].b)
			}
		}
	case 85:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, nil, nil, protoDollar[2].b)
		}
	case 86:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			if protoDollar[2].sl == nil {
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[4].b)
			} else {
				if protoDollar[3].b != nil {
					protoDollar[2].sl.commas = append(protoDollar[2].sl.commas, protoDollar[3].b)
				}
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, protoDollar[2].sl.vals, protoDollar[2].sl.commas, protoDollar[4].b)
			}
		}
	case 87:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			if protoDollar[2].sl == nil {
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[5].b)
			} else {
				if protoDollar[3].b != nil {
					protoDollar[2].sl.commas = append(protoDollar[2].sl.commas, protoDollar[3].b)
				}
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, protoDollar[2].sl.vals, protoDollar[2].sl.commas, protoDollar[5].b)
			}
		}
	case 88:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[2].b)
		}
	case 89:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[3].b)
		}
	case 90:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.sl = &valueSlices{vals: []ast.ValueNode{protoDollar[1].v}}
		}
	case 91:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].sl.vals = append(protoDollar[1].sl.vals, protoDollar[3].v)
			protoDollar[1].sl.commas = append(protoDollar[1].sl.commas, protoDollar[2].b)
			protoVAL.sl = protoDollar[1].sl
		}
	case 94:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			if protoDollar[2].sl == nil {
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[4].b)
			} else {
				if protoDollar[3].b != nil {
					protoDollar[2].sl.commas = append(protoDollar[2].sl.commas, protoDollar[3].b)
				}
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, protoDollar[2].sl.vals, protoDollar[2].sl.commas, protoDollar[4].b)
			}
		}
	case 95:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			if protoDollar[2].sl == nil {
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[5].b)
			} else {
				if protoDollar[3].b != nil {
					protoDollar[2].sl.commas = append(protoDollar[2].sl.commas, protoDollar[3].b)
				}
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, protoDollar[2].sl.vals, protoDollar[2].sl.commas, protoDollar[5].b)
			}
		}
	case 96:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[2].b)
		}
	case 97:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[3].b)
		}
	case 98:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.sl = &valueSlices{vals: []ast.ValueNode{protoDollar[1].v}}
		}
	case 99:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].sl.vals = append(protoDollar[1].sl.vals, protoDollar[3].v)
			protoDollar[1].sl.commas = append(protoDollar[1].sl.commas, protoDollar[2].b)
			protoVAL.sl = protoDollar[1].sl
		}
	case 100:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.tid = protoDollar[1].cid.toIdentValueNode(nil)
		}
	case 101:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.tid = protoDollar[2].cid.toIdentValueNode(protoDollar[1].b)
		}
	case 102:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.tid = protoDollar[1].cid.toIdentValueNode(nil)
		}
	case 103:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.tid = protoDollar[2].cid.toIdentValueNode(protoDollar[1].b)
		}
	case 104:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.tid = protoDollar[1].cid.toIdentValueNode(nil)
		}
	case 105:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.tid = protoDollar[2].cid.toIdentValueNode(protoDollar[1].b)
		}
	case 106:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.tid = protoDollar[1].cid.toIdentValueNode(nil)
		}
	case 107:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.tid = protoDollar[2].cid.toIdentValueNode(protoDollar[1].b)
		}
	case 108:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.tid = protoDollar[1].cid.toIdentValueNode(nil)
		}
	case 109:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.tid = protoDollar[2].cid.toIdentValueNode(protoDollar[1].b)
		}
	case 110:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.tid = protoDollar[1].cid.toIdentValueNode(nil)
		}
	case 111:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.tid = protoDollar[2].cid.toIdentValueNode(protoDollar[1].b)
		}
	case 115:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].opts.commas = append(protoDollar[2].opts.commas, protoDollar[3].b)
			}
			protoVAL.cmpctOpts = ast.NewCompactOptionsNode(protoDollar[1].b, protoDollar[2].opts.options, protoDollar[2].opts.commas, protoDollar[4].b)
		}
	case 116:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].opts.commas = append(protoDollar[2].opts.commas, protoDollar[3].b)
			}
			protoVAL.cmpctOpts = ast.NewCompactOptionsNode(protoDollar[1].b, protoDollar[2].opts.options, protoDollar[2].opts.commas, protoDollar[5].b)
		}
	case 117:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.opts = &compactOptionSlices{options: []*ast.OptionNode{protoDollar[1].opt}}
		}
	case 118:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].opts.options = append(protoDollar[1].opts.options, protoDollar[3].opt)
			protoDollar[1].opts.commas = append(protoDollar[1].opts.commas, protoDollar[2].b)
			protoVAL.opts = protoDollar[1].opts
		}
	case 119:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.opts = &compactOptionSlices{options: []*ast.OptionNode{}}
		}
	case 120:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			optName := ast.NewOptionNameNode(protoDollar[1].optNms.refs, protoDollar[1].optNms.dots)
			protoVAL.opt = ast.NewCompactOptionNode(optName, protoDollar[2].b, protoDollar[3].v)
		}
	case 121:
		protoDollar = protoS[protopt-8 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil, protoDollar[6].b, protoDollar[7].msgElements, protoDollar[8].b)
		}
	case 122:
		protoDollar = protoS[protopt-9 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts, protoDollar[7].b, protoDollar[8].msgElements, protoDollar[9].b)
		}
	case 123:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.oo = ast.NewOneofNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].ooElements, protoDollar[5].b)
		}
	case 124:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.ooElements = nil
		}
	case 126:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].ooElement != nil {
				protoVAL.ooElements = append(protoDollar[1].ooElements, protoDollar[2].ooElement)
			} else {
				protoVAL.ooElements = protoDollar[1].ooElements
			}
		}
	case 127:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].ooElement != nil {
				protoVAL.ooElements = []ast.OneofElement{protoDollar[1].ooElement}
			} else {
				protoVAL.ooElements = nil
			}
		}
	case 128:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ooElement = protoDollar[1].opt
		}
	case 129:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ooElement = protoDollar[1].fld
		}
	case 130:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ooElement = protoDollar[1].grp
		}
	case 131:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.ooElement = nil
		}
	case 132:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ooElement = nil
		}
	case 133:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil, protoDollar[5].b)
		}
	case 134:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts, protoDollar[6].b)
		}
	case 135:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(nil, protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil, protoDollar[5].b, protoDollar[6].msgElements, protoDollar[7].b)
		}
	case 136:
		protoDollar = protoS[protopt-8 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(nil, protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts, protoDollar[6].b, protoDollar[7].msgElements, protoDollar[8].b)
		}
	case 137:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.mapFld = ast.NewMapFieldNode(protoDollar[1].mapType, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil, protoDollar[5].b)
		}
	case 138:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.mapFld = ast.NewMapFieldNode(protoDollar[1].mapType, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts, protoDollar[6].b)
		}
	case 139:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.mapType = ast.NewMapTypeNode(protoDollar[1].id.ToKeyword(), protoDollar[2].b, protoDollar[3].id, protoDollar[4].b, protoDollar[5].tid, protoDollar[6].b)
		}
	case 152:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].rngs.commas = append(protoDollar[2].rngs.commas, protoDollar[3].b)
			}
			protoVAL.ext = ast.NewExtensionRangeNode(protoDollar[1].id.ToKeyword(), protoDollar[2].rngs.ranges, protoDollar[2].rngs.commas, nil, protoDollar[4].b)
		}
	case 153:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].rngs.commas = append(protoDollar[2].rngs.commas, protoDollar[3].b)
			}
			protoVAL.ext = ast.NewExtensionRangeNode(protoDollar[1].id.ToKeyword(), protoDollar[2].rngs.ranges, protoDollar[2].rngs.commas, protoDollar[4].cmpctOpts, protoDollar[5].b)
		}
	case 154:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rngs = &rangeSlices{ranges: []*ast.RangeNode{protoDollar[1].rng}}
		}
	case 155:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].rngs.ranges = append(protoDollar[1].rngs.ranges, protoDollar[3].rng)
			protoDollar[1].rngs.commas = append(protoDollar[1].rngs.commas, protoDollar[2].b)
			protoVAL.rngs = protoDollar[1].rngs
		}
	case 156:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].i, nil, nil, nil)
		}
	case 157:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].i, protoDollar[2].id.ToKeyword(), protoDollar[3].i, nil)
		}
	case 158:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].i, protoDollar[2].id.ToKeyword(), nil, protoDollar[3].id.ToKeyword())
		}
	case 159:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rngs = &rangeSlices{ranges: []*ast.RangeNode{protoDollar[1].rng}}
		}
	case 160:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].rngs.ranges = append(protoDollar[1].rngs.ranges, protoDollar[3].rng)
			protoDollar[1].rngs.commas = append(protoDollar[1].rngs.commas, protoDollar[2].b)
			protoVAL.rngs = protoDollar[1].rngs
		}
	case 161:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].il, nil, nil, nil)
		}
	case 162:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].il, protoDollar[2].id.ToKeyword(), protoDollar[3].il, nil)
		}
	case 163:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].il, protoDollar[2].id.ToKeyword(), nil, protoDollar[3].id.ToKeyword())
		}
	case 164:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.il = protoDollar[1].i
		}
	case 165:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.il = ast.NewNegativeIntLiteralNode(protoDollar[1].b, protoDollar[2].i)
		}
	case 166:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].rngs.commas = append(protoDollar[2].rngs.commas, protoDollar[3].b)
			}
			protoVAL.resvd = ast.NewReservedRangesNode(protoDollar[1].id.ToKeyword(), protoDollar[2].rngs.ranges, protoDollar[2].rngs.commas, protoDollar[4].b)
		}
	case 168:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].rngs.commas = append(protoDollar[2].rngs.commas, protoDollar[3].b)
			}
			protoVAL.resvd = ast.NewReservedRangesNode(protoDollar[1].id.ToKeyword(), protoDollar[2].rngs.ranges, protoDollar[2].rngs.commas, protoDollar[4].b)
		}
	case 170:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].names.commas = append(protoDollar[2].names.commas, protoDollar[3].b)
			}
			protoVAL.resvd = ast.NewReservedNamesNode(protoDollar[1].id.ToKeyword(), protoDollar[2].names.names, protoDollar[2].names.commas, protoDollar[4].b)
		}
	case 171:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.resvd = ast.NewReservedIdentifiersNode(protoDollar[1].id.ToKeyword(), protoDollar[2].names.idents, protoDollar[2].names.commas, protoDollar[3].b)
		}
	case 172:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.names = &nameSlices{names: []ast.StringValueNode{protoDollar[1].sv}}
		}
	case 173:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].names.names = append(protoDollar[1].names.names, protoDollar[3].sv)
			protoDollar[1].names.commas = append(protoDollar[1].names.commas, protoDollar[2].b)
			protoVAL.names = protoDollar[1].names
		}
	case 174:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.names = &nameSlices{idents: []*ast.IdentNode{protoDollar[1].id}}
		}
	case 175:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].names.idents = append(protoDollar[1].names.idents, protoDollar[3].id)
			protoDollar[1].names.commas = append(protoDollar[1].names.commas, protoDollar[2].b)
			protoVAL.names = protoDollar[1].names
		}
	case 176:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.en = ast.NewEnumNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].enElements, protoDollar[5].b)
		}
	case 177:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.enElements = nil
		}
	case 179:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].enElement != nil {
				protoVAL.enElements = append(protoDollar[1].enElements, protoDollar[2].enElement)
			} else {
				protoVAL.enElements = protoDollar[1].enElements
			}
		}
	case 180:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].enElement != nil {
				protoVAL.enElements = []ast.EnumElement{protoDollar[1].enElement}
			} else {
				protoVAL.enElements = nil
			}
		}
	case 181:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.enElement = protoDollar[1].opt
		}
	case 182:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.enElement = protoDollar[1].env
		}
	case 183:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.enElement = protoDollar[1].resvd
		}
	case 184:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.enElement = ast.NewEmptyDeclNode(protoDollar[1].b)
		}
	case 185:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.enElement = nil
		}
	case 186:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.env = ast.NewEnumValueNode(protoDollar[1].id, protoDollar[2].b, protoDollar[3].il, nil, protoDollar[4].b)
		}
	case 187:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.env = ast.NewEnumValueNode(protoDollar[1].id, protoDollar[2].b, protoDollar[3].il, protoDollar[4].cmpctOpts, protoDollar[5].b)
		}
	case 188:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.msg = ast.NewMessageNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].msgElements, protoDollar[5].b)
		}
	case 189:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.msgElements = nil
		}
	case 191:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].msgElement != nil {
				protoVAL.msgElements = append(protoDollar[1].msgElements, protoDollar[2].msgElement)
			} else {
				protoVAL.msgElements = protoDollar[1].msgElements
			}
		}
	case 192:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].msgElement != nil {
				protoVAL.msgElements = []ast.MessageElement{protoDollar[1].msgElement}
			} else {
				protoVAL.msgElements = nil
			}
		}
	case 193:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = protoDollar[1].fld
		}
	case 194:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = protoDollar[1].en
		}
	case 195:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = protoDollar[1].msg
		}
	case 196:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = protoDollar[1].extend
		}
	case 197:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = protoDollar[1].ext
		}
	case 198:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = protoDollar[1].grp
		}
	case 199:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = protoDollar[1].opt
		}
	case 200:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = protoDollar[1].oo
		}
	case 201:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = protoDollar[1].mapFld
		}
	case 202:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = protoDollar[1].resvd
		}
	case 203:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = ast.NewEmptyDeclNode(protoDollar[1].b)
		}
	case 204:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = nil
		}
	case 205:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil, protoDollar[6].b)
		}
	case 206:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts, protoDollar[7].b)
		}
	case 207:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil, protoDollar[5].b)
		}
	case 208:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts, protoDollar[6].b)
		}
	case 209:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.extend = ast.NewExtendNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].b, protoDollar[4].extElements, protoDollar[5].b)
		}
	case 210:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.extElements = nil
		}
	case 212:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].extElement != nil {
				protoVAL.extElements = append(protoDollar[1].extElements, protoDollar[2].extElement)
			} else {
				protoVAL.extElements = protoDollar[1].extElements
			}
		}
	case 213:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].extElement != nil {
				protoVAL.extElements = []ast.ExtendElement{protoDollar[1].extElement}
			} else {
				protoVAL.extElements = nil
			}
		}
	case 214:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.extElement = protoDollar[1].fld
		}
	case 215:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.extElement = protoDollar[1].grp
		}
	case 216:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.extElement = nil
		}
	case 217:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.extElement = nil
		}
	case 218:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil, protoDollar[6].b)
		}
	case 219:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts, protoDollar[7].b)
		}
	case 220:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil, protoDollar[5].b)
		}
	case 221:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts, protoDollar[6].b)
		}
	case 222:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.svc = ast.NewServiceNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].svcElements, protoDollar[5].b)
		}
	case 223:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.svcElements = nil
		}
	case 225:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].svcElement != nil {
				protoVAL.svcElements = append(protoDollar[1].svcElements, protoDollar[2].svcElement)
			} else {
				protoVAL.svcElements = protoDollar[1].svcElements
			}
		}
	case 226:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].svcElement != nil {
				protoVAL.svcElements = []ast.ServiceElement{protoDollar[1].svcElement}
			} else {
				protoVAL.svcElements = nil
			}
		}
	case 227:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.svcElement = protoDollar[1].opt
		}
	case 228:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.svcElement = protoDollar[1].mtd
		}
	case 229:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.svcElement = ast.NewEmptyDeclNode(protoDollar[1].b)
		}
	case 230:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.svcElement = nil
		}
	case 231:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.mtd = ast.NewRPCNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].mtdMsgType, protoDollar[4].id.ToKeyword(), protoDollar[5].mtdMsgType, protoDollar[6].b)
		}
	case 232:
		protoDollar = protoS[protopt-8 : protopt+1]
		{
			protoVAL.mtd = ast.NewRPCNodeWithBody(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].mtdMsgType, protoDollar[4].id.ToKeyword(), protoDollar[5].mtdMsgType, protoDollar[6].b, protoDollar[7].mtdElements, protoDollar[8].b)
		}
	case 233:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.mtdMsgType = ast.NewRPCTypeNode(protoDollar[1].b, protoDollar[2].id.ToKeyword(), protoDollar[3].tid, protoDollar[4].b)
		}
	case 234:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.mtdMsgType = ast.NewRPCTypeNode(protoDollar[1].b, nil, protoDollar[2].tid, protoDollar[3].b)
		}
	case 235:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.mtdElements = nil
		}
	case 237:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].mtdElement != nil {
				protoVAL.mtdElements = append(protoDollar[1].mtdElements, protoDollar[2].mtdElement)
			} else {
				protoVAL.mtdElements = protoDollar[1].mtdElements
			}
		}
	case 238:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].mtdElement != nil {
				protoVAL.mtdElements = []ast.RPCElement{protoDollar[1].mtdElement}
			} else {
				protoVAL.mtdElements = nil
			}
		}
	case 239:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.mtdElement = protoDollar[1].opt
		}
	case 240:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.mtdElement = ast.NewEmptyDeclNode(protoDollar[1].b)
		}
	case 241:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.mtdElement = nil
		}
	case 526:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.b = protoDollar[1].b
		}
	case 527:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.b = nil
		}
	case 529:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.b = protoDollar[1].b
		}
	}
	goto protostack /* stack new state and value */
}
