// Code generated by goyacc -o proto.y.go -l -p proto proto.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

//lint:file-ignore SA4006 generated parser has unused values

import (
	"math"

	"github.com/kralicky/protocompile/ast"
)

type protoSymType struct {
	yys          int
	file         *ast.FileNode
	syn          *ast.SyntaxNode
	ed           *ast.EditionNode
	fileElement  ast.FileElement
	fileElements []ast.FileElement
	pkg          *ast.PackageNode
	imprt        *ast.ImportNode
	msg          *ast.MessageNode
	msgElement   ast.MessageElement
	msgElements  []ast.MessageElement
	fld          *ast.FieldNode
	mapFld       *ast.MapFieldNode
	mapType      *ast.MapTypeNode
	grp          *ast.GroupNode
	oo           *ast.OneofNode
	ooElement    ast.OneofElement
	ooElements   []ast.OneofElement
	ext          *ast.ExtensionRangeNode
	resvd        *ast.ReservedNode
	en           *ast.EnumNode
	enElement    ast.EnumElement
	enElements   []ast.EnumElement
	env          *ast.EnumValueNode
	extend       *ast.ExtendNode
	extElement   ast.ExtendElement
	extElements  []ast.ExtendElement
	svc          *ast.ServiceNode
	svcElement   ast.ServiceElement
	svcElements  []ast.ServiceElement
	mtd          *ast.RPCNode
	mtdMsgType   *ast.RPCTypeNode
	mtdElement   ast.RPCElement
	mtdElements  []ast.RPCElement
	opt          *ast.OptionNode
	opts         *compactOptionSlices
	ref          *ast.FieldReferenceNode
	optNms       *fieldRefSlices
	cmpctOpts    *ast.CompactOptionsNode
	rng          *ast.RangeNode
	rngs         *rangeSlices
	names        *nameSlices
	cid          *identSlices
	tid          ast.IdentValueNode
	sl           *valueSlices
	msgLitFlds   *messageFieldList
	msgLitFld    *ast.MessageFieldNode
	v            ast.ValueNode
	il           ast.IntValueNode
	sv           ast.StringValueNode
	i            *ast.UintLiteralNode
	f            *ast.FloatLiteralNode
	id           *ast.IdentNode
	b            *ast.RuneNode
	err          error
}

const _STRING_LIT = 57346
const _INT_LIT = 57347
const _FLOAT_LIT = 57348
const _NAME = 57349
const _SYNTAX = 57350
const _EDITION = 57351
const _IMPORT = 57352
const _WEAK = 57353
const _PUBLIC = 57354
const _PACKAGE = 57355
const _OPTION = 57356
const _TRUE = 57357
const _FALSE = 57358
const _INF = 57359
const _NAN = 57360
const _REPEATED = 57361
const _OPTIONAL = 57362
const _REQUIRED = 57363
const _DOUBLE = 57364
const _FLOAT = 57365
const _INT32 = 57366
const _INT64 = 57367
const _UINT32 = 57368
const _UINT64 = 57369
const _SINT32 = 57370
const _SINT64 = 57371
const _FIXED32 = 57372
const _FIXED64 = 57373
const _SFIXED32 = 57374
const _SFIXED64 = 57375
const _BOOL = 57376
const _STRING = 57377
const _BYTES = 57378
const _GROUP = 57379
const _ONEOF = 57380
const _MAP = 57381
const _EXTENSIONS = 57382
const _TO = 57383
const _MAX = 57384
const _RESERVED = 57385
const _ENUM = 57386
const _MESSAGE = 57387
const _EXTEND = 57388
const _SERVICE = 57389
const _RPC = 57390
const _STREAM = 57391
const _RETURNS = 57392
const _ERROR = 57393

var protoToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"_STRING_LIT",
	"_INT_LIT",
	"_FLOAT_LIT",
	"_NAME",
	"_SYNTAX",
	"_EDITION",
	"_IMPORT",
	"_WEAK",
	"_PUBLIC",
	"_PACKAGE",
	"_OPTION",
	"_TRUE",
	"_FALSE",
	"_INF",
	"_NAN",
	"_REPEATED",
	"_OPTIONAL",
	"_REQUIRED",
	"_DOUBLE",
	"_FLOAT",
	"_INT32",
	"_INT64",
	"_UINT32",
	"_UINT64",
	"_SINT32",
	"_SINT64",
	"_FIXED32",
	"_FIXED64",
	"_SFIXED32",
	"_SFIXED64",
	"_BOOL",
	"_STRING",
	"_BYTES",
	"_GROUP",
	"_ONEOF",
	"_MAP",
	"_EXTENSIONS",
	"_TO",
	"_MAX",
	"_RESERVED",
	"_ENUM",
	"_MESSAGE",
	"_EXTEND",
	"_SERVICE",
	"_RPC",
	"_STREAM",
	"_RETURNS",
	"_ERROR",
	"'='",
	"';'",
	"':'",
	"'{'",
	"'}'",
	"'\\\\'",
	"'/'",
	"'?'",
	"'.'",
	"','",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'('",
	"')'",
	"'['",
	"']'",
	"'*'",
	"'&'",
	"'^'",
	"'%'",
	"'$'",
	"'#'",
	"'@'",
	"'!'",
	"'~'",
	"'`'",
}

var protoStatenames = [...]string{}

const protoEofCode = 1
const protoErrCode = 2
const protoInitialStackSize = 16

var protoExca = [...]int16{
	-1, 0,
	1, 6,
	-2, 0,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 4,
	1, 3,
	-2, 0,
	-1, 23,
	1, 1,
	-2, 0,
	-1, 25,
	1, 2,
	-2, 0,
	-1, 95,
	1, 4,
	-2, 0,
	-1, 96,
	1, 5,
	-2, 0,
	-1, 107,
	56, 172,
	-2, 0,
	-1, 108,
	56, 209,
	-2, 0,
	-1, 110,
	56, 221,
	-2, 0,
	-1, 177,
	56, 173,
	-2, 0,
	-1, 229,
	56, 210,
	-2, 0,
	-1, 280,
	56, 222,
	-2, 0,
	-1, 403,
	56, 58,
	62, 58,
	-2, 0,
	-1, 423,
	56, 120,
	-2, 0,
	-1, 479,
	56, 121,
	-2, 0,
	-1, 657,
	56, 233,
	-2, 0,
	-1, 678,
	56, 234,
	-2, 0,
}

const protoPrivate = 57344

const protoLast = 1729

var protoAct = [...]int16{
	10, 116, 13, 679, 590, 473, 12, 11, 129, 288,
	634, 23, 25, 40, 91, 287, 464, 29, 30, 31,
	609, 451, 480, 87, 588, 420, 400, 92, 382, 360,
	402, 381, 86, 89, 90, 281, 94, 311, 230, 178,
	359, 124, 118, 130, 405, 39, 136, 697, 690, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 101, 603, 7, 101, 685, 600, 692,
	26, 662, 667, 104, 597, 602, 683, 125, 179, 122,
	408, 282, 474, 120, 121, 111, 640, 113, 125, 671,
	122, 109, 682, 604, 120, 121, 292, 114, 300, 289,
	460, 293, 304, 645, 306, 670, 308, 309, 474, 465,
	665, 658, 626, 383, 466, 358, 474, 362, 363, 368,
	232, 293, 234, 115, 185, 452, 664, 371, 383, 465,
	299, 655, 293, 458, 459, 599, 637, 456, 101, 370,
	465, 457, 661, 24, 651, 455, 364, 649, 179, 639,
	536, 377, 650, 705, 532, 444, 428, 427, 374, 376,
	378, 26, 26, 421, 627, 618, 417, 391, 368, 369,
	103, 702, 701, 384, 694, 688, 611, 453, 393, 653,
	385, 372, 298, 703, 15, 689, 657, 373, 384, 423,
	5, 6, 16, 110, 185, 17, 18, 108, 107, 106,
	700, 24, 687, 15, 686, 676, 669, 663, 644, 642,
	387, 16, 641, 630, 17, 18, 629, 615, 595, 390,
	594, 399, 397, 388, 307, 305, 20, 19, 21, 22,
	303, 302, 301, 35, 34, 392, 33, 32, 386, 652,
	537, 232, 389, 234, 470, 20, 19, 21, 22, 469,
	449, 282, 424, 476, 419, 379, 112, 28, 27, 539,
	446, 395, 396, 285, 422, 4, 610, 414, 412, 681,
	398, 411, 409, 675, 674, 18, 622, 407, 606, 413,
	36, 18, 605, 410, 538, 85, 394, 37, 38, 95,
	477, 96, 484, 529, 415, 416, 361, 490, 491, 492,
	493, 494, 495, 496, 18, 497, 498, 499, 500, 286,
	472, 418, 501, 502, 503, 504, 505, 506, 507, 508,
	509, 510, 511, 512, 513, 514, 515, 486, 516, 517,
	518, 519, 520, 521, 522, 523, 524, 525, 526, 527,
	528, 447, 530, 100, 99, 98, 97, 102, 375, 677,
	488, 678, 284, 429, 283, 279, 280, 14, 228, 229,
	425, 426, 180, 176, 177, 123, 380, 181, 128, 366,
	365, 478, 479, 448, 117, 450, 445, 134, 443, 127,
	483, 462, 126, 231, 482, 119, 404, 407, 403, 598,
	631, 541, 485, 235, 481, 131, 542, 312, 487, 236,
	140, 471, 183, 544, 454, 314, 467, 489, 238, 143,
	430, 461, 531, 463, 591, 291, 406, 608, 9, 533,
	8, 475, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 3, 2, 1, 0, 0, 589,
	589, 601, 0, 292, 292, 535, 534, 0, 607, 407,
	481, 0, 0, 0, 0, 593, 0, 0, 86, 0,
	613, 614, 596, 0, 0, 0, 0, 0, 0, 616,
	617, 0, 612, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 619, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 0, 0, 0, 0,
	0, 0, 0, 0, 623, 0, 0, 621, 0, 0,
	0, 0, 0, 0, 0, 625, 0, 0, 0, 0,
	0, 624, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 628, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 636, 0, 0,
	0, 0, 635, 0, 0, 0, 292, 0, 0, 0,
	0, 646, 647, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 638, 0, 0, 0, 656, 0,
	0, 643, 654, 0, 648, 0, 0, 0, 0, 0,
	0, 659, 0, 0, 666, 0, 125, 668, 122, 0,
	0, 0, 120, 121, 0, 0, 0, 660, 680, 0,
	0, 0, 0, 86, 113, 292, 636, 673, 289, 0,
	672, 635, 684, 0, 114, 292, 0, 0, 0, 680,
	691, 693, 695, 0, 0, 0, 0, 0, 0, 696,
	125, 698, 122, 125, 699, 122, 120, 121, 0, 120,
	121, 0, 0, 0, 125, 704, 122, 0, 0, 0,
	120, 121, 633, 0, 290, 297, 294, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 81, 82, 83,
	84, 0, 0, 0, 0, 293, 0, 0, 0, 0,
	0, 0, 0, 465, 296, 295, 0, 0, 0, 632,
	290, 297, 294, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 80, 81, 82, 83, 84, 0, 0, 0,
	0, 293, 0, 0, 0, 0, 0, 0, 0, 465,
	296, 295, 0, 0, 592, 290, 297, 294, 41, 42,
	43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
	83, 84, 0, 0, 0, 0, 293, 0, 0, 0,
	0, 0, 0, 0, 465, 296, 295, 290, 297, 294,
	41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 82, 83, 84, 0, 0, 0, 0, 293, 0,
	0, 0, 0, 0, 405, 0, 0, 296, 295, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 0, 0, 0, 0, 0, 401, 0,
	0, 0, 0, 0, 0, 0, 405, 0, 0, 0,
	408, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 408, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 80, 81, 82, 83, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 367, 383, 105, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 81, 82, 83, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 384, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 80, 81, 82, 83, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 144, 145, 146, 147, 148, 149, 150,
	18, 151, 152, 153, 154, 139, 138, 137, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 164, 165, 166,
	167, 168, 169, 0, 133, 142, 132, 170, 171, 135,
	20, 19, 21, 172, 173, 174, 175, 0, 0, 24,
	0, 0, 0, 0, 0, 0, 141, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 81, 82, 83,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 545, 546, 547, 548, 549, 550, 551, 552, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 578, 579, 580, 581, 582, 583,
	584, 585, 586, 540, 587, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 543, 315, 316, 317, 318, 319,
	320, 321, 322, 323, 324, 325, 326, 327, 328, 329,
	330, 331, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 342, 343, 344, 310, 345, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 0,
	0, 0, 0, 0, 233, 0, 0, 0, 313, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 139, 138, 137, 251, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 0,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 0, 0, 0, 0, 0, 0, 0,
	367, 361, 237, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 80, 81, 82, 83, 84, 468, 0, 0,
	0, 0, 41, 42, 43, 44, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 80, 81, 82, 83, 84, 182, 0, 0, 0,
	0, 186, 187, 188, 189, 190, 191, 192, 18, 193,
	194, 195, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 207, 208, 209, 210, 211, 212, 213,
	214, 215, 216, 217, 218, 219, 220, 184, 221, 222,
	223, 224, 225, 226, 227, 41, 42, 43, 44, 45,
	46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 80, 81, 82, 83, 84,
}

var protoPact = [...]int16{
	212, -1000, 178, 178, 231, 236, 235, -1000, 178, 178,
	178, 214, 213, 211, 210, -1000, 306, 1678, 1206, 1678,
	1678, 1320, 1678, 231, -1000, 231, -1000, 372, 371, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 370, 369, 108,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 140, -1000, -1000, 1086, 174,
	173, 172, 108, 1678, 168, 231, 231, -1000, -1000, -1000,
	-1000, 1678, 234, 1206, 86, -1000, 1266, 1634, 1482, 108,
	291, -1000, 903, -1000, -1000, -1000, 156, 1266, -1000, 178,
	209, 208, 207, 178, 202, 178, 201, 178, 178, -1000,
	1428, 1678, 321, 1678, 1678, 1536, -1000, -1000, -1000, -1000,
	139, 1678, 94, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 155, 1634, -1000, 178,
	120, 178, -1000, 233, 1147, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 154, 1482,
	-1000, 178, 200, -1000, 1428, 1678, 137, 1678, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 152,
	291, -1000, 178, 178, 199, -1000, 1678, -1000, -1000, 198,
	-1000, -1000, -1000, 962, -1000, 296, 292, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1678, 1678, 136, 1678, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 232, 132,
	-1000, 253, 164, 230, 132, 126, 125, -1000, -1000, 1678,
	108, 428, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 153,
	124, -1000, 249, -1000, 366, -1000, -1000, -1000, -1000, 1678,
	228, 1678, 108, -1000, -1000, -1000, -1000, -1000, 89, -1000,
	151, -1000, -1000, 1024, 114, 110, 76, -1000, 1585, -1000,
	-1000, -1000, -1000, -1000, -1000, 227, 222, 1678, 108, 335,
	70, 321, 278, 320, 318, -1000, -1000, 368, 1678, -1000,
	123, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 70, 153, -1000, 138, -1000, 218, 309,
	-1000, 239, 1374, -1000, -1000, -1000, -1000, -1000, -1000, 776,
	776, -1000, 197, 195, -1000, 42, 96, 36, 54, 307,
	303, -1000, 70, -1000, 1206, -1000, -1000, -1000, 150, 320,
	-1000, 178, 178, 194, -1000, 1678, 1678, 135, 1678, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 70,
	-1000, -1000, 1320, -1000, -1000, -1000, -1000, 301, 70, 89,
	1320, 75, 134, 1678, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	193, 190, 710, -1000, -1000, -1000, 104, -1000, 118, -1000,
	47, 189, 186, 1678, 185, 78, 70, -1000, 116, -1000,
	122, -1000, -1000, -1000, -1000, -1000, 217, 157, 1678, 108,
	-1000, 99, 70, -1000, 161, 74, -1000, 1678, 108, -1000,
	-1000, 111, -1000, 32, -1000, -1000, 184, -1000, 87, 107,
	-1000, -1000, -1000, 33, -1000, 1266, 183, -1000, 66, 1206,
	1206, 903, 299, 298, -1000, 182, -1000, 297, -1000, -1000,
	53, 841, -1000, -1000, -1000, 28, 181, 179, 149, 160,
	-1000, -21, -1000, -1000, 70, 44, -1000, 148, 297, -1000,
	178, -1000, -1000, -22, -1000, -1000, -1000, -1000, -1000, 1266,
	-1000, -1000, 1266, 177, -1000, -1000, -1000, -1000, 146, 145,
	158, -1000, -1000, 1266, 127, -1000,
}

var protoPgo = [...]int16{
	0, 466, 465, 464, 95, 295, 450, 448, 0, 20,
	447, 23, 446, 296, 5, 24, 15, 9, 16, 4,
	445, 444, 10, 443, 441, 28, 13, 440, 439, 438,
	437, 435, 433, 432, 43, 27, 430, 429, 428, 427,
	426, 14, 425, 423, 422, 37, 421, 420, 419, 418,
	30, 26, 416, 415, 414, 413, 412, 41, 410, 409,
	407, 7, 42, 404, 1, 22, 402, 401, 400, 399,
	398, 397, 46, 29, 31, 40, 396, 395, 6, 39,
	394, 393, 392, 2, 38, 389, 388, 387, 35, 386,
	385, 384, 382, 3, 381, 379, 21, 378, 25, 377,
	8,
}

var protoR1 = [...]int8{
	0, 1, 1, 1, 1, 1, 1, 5, 5, 4,
	4, 4, 4, 4, 4, 4, 4, 2, 3, 6,
	6, 6, 7, 35, 35, 36, 36, 37, 37, 38,
	38, 39, 39, 40, 40, 8, 13, 13, 13, 13,
	11, 11, 16, 16, 17, 17, 17, 20, 20, 20,
	20, 20, 20, 20, 20, 18, 18, 51, 50, 50,
	49, 49, 49, 49, 49, 49, 52, 52, 52, 12,
	12, 12, 12, 15, 15, 15, 24, 24, 19, 19,
	19, 21, 21, 21, 21, 47, 47, 22, 22, 23,
	23, 23, 23, 48, 48, 41, 41, 42, 42, 43,
	43, 44, 44, 45, 45, 46, 46, 34, 34, 34,
	14, 14, 10, 10, 10, 9, 9, 57, 57, 56,
	67, 67, 66, 66, 65, 65, 65, 65, 54, 54,
	58, 58, 59, 59, 60, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 77, 77, 75,
	75, 73, 73, 73, 76, 76, 74, 74, 74, 25,
	25, 70, 70, 71, 71, 72, 72, 68, 68, 69,
	69, 78, 81, 81, 80, 80, 79, 79, 79, 79,
	82, 82, 61, 64, 64, 63, 63, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 83, 86,
	86, 85, 85, 84, 84, 84, 55, 55, 55, 55,
	87, 90, 90, 89, 89, 88, 88, 88, 88, 91,
	92, 96, 96, 95, 95, 94, 94, 93, 93, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 98, 98, 99, 99, 97, 97, 100,
}

var protoR2 = [...]int8{
	0, 2, 2, 1, 3, 3, 0, 2, 1, 2,
	2, 2, 2, 2, 2, 2, 1, 3, 3, 2,
	3, 3, 2, 1, 3, 1, 3, 1, 3, 1,
	3, 1, 3, 1, 3, 5, 1, 3, 1, 3,
	3, 2, 1, 2, 1, 1, 1, 1, 2, 2,
	2, 2, 1, 2, 2, 3, 2, 1, 1, 2,
	1, 2, 2, 2, 2, 1, 3, 2, 3, 1,
	4, 6, 4, 1, 2, 2, 2, 2, 1, 3,
	2, 4, 5, 2, 3, 1, 3, 1, 2, 4,
	5, 2, 3, 2, 4, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	4, 5, 1, 3, 0, 3, 1, 8, 10, 5,
	0, 1, 2, 1, 2, 2, 2, 1, 4, 5,
	7, 9, 4, 5, 7, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 1,
	3, 1, 3, 3, 1, 3, 1, 3, 3, 1,
	2, 3, 1, 3, 1, 3, 2, 1, 3, 1,
	3, 5, 0, 1, 2, 1, 2, 2, 2, 1,
	3, 4, 5, 0, 1, 2, 1, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 1, 5, 6,
	4, 5, 4, 3, 2, 3, 2, 1, 5, 0,
	1, 2, 1, 2, 2, 1, 5, 6, 4, 5,
	5, 0, 1, 2, 1, 2, 2, 2, 1, 5,
	8, 4, 3, 0, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 0, 1, 1, 1,
}

var protoChk = [...]int16{
	-1000, -1, -2, -3, -5, 8, 9, -4, -6, -7,
	-8, -61, -78, -83, -87, 2, 10, 13, 14, 45,
	44, 46, 47, -100, 53, -100, -4, 52, 52, -100,
	-100, -100, 53, 53, 53, 53, 4, 11, 12, -35,
	-26, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
	26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
	36, 37, 38, 39, 40, 41, 42, 43, 44, 45,
	46, 47, 48, 49, 50, -13, -26, -11, 66, -26,
	-26, -41, -35, 60, -26, -5, -5, 4, 4, 4,
	4, 60, -99, 60, -41, 67, 55, 55, 55, -35,
	55, -26, 52, -26, -11, 67, -64, -63, -62, -53,
	-78, -61, -83, -77, -57, -8, -56, -59, -70, -100,
	-34, -42, 40, 38, -60, 43, -72, 21, 20, 19,
	-36, 60, 39, -28, 7, 8, 9, 10, 11, 12,
	13, 15, 16, 17, 18, 22, 23, 24, 25, 26,
	27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
	41, 42, 47, 48, 49, 50, -81, -80, -79, -8,
	-82, -71, 2, -33, 43, -72, 7, 8, 9, 10,
	11, 12, 13, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 44, 45, 46, 47, 48, 49, 50, -86, -85,
	-84, -55, -57, 2, -34, -43, -37, 60, -29, 7,
	8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
	18, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 36, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, -90,
	-89, -88, -8, -91, -92, 2, 48, -16, -17, -18,
	4, -20, -26, 55, 6, 65, 64, 5, 56, -62,
	-100, 53, 53, 53, -100, 53, -100, 53, -100, -100,
	37, -45, -39, 60, -31, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 38, 39, 40, 41, 42,
	43, 44, 45, 46, 47, 48, 49, 50, -26, -75,
	-73, 5, -26, -26, -75, -68, -69, 4, -26, 60,
	-35, 63, 56, -79, -100, -97, -100, 61, -100, 52,
	-76, -74, -25, 5, 65, 56, -84, -100, 53, -45,
	-26, 60, -35, 56, -88, -100, -100, 53, -26, 53,
	-51, 56, -50, -49, -52, 2, -12, -26, 68, 6,
	17, 5, 6, 17, 5, -26, -26, 60, -35, 52,
	-98, 61, 41, 55, 52, -98, -98, 61, 61, -26,
	-27, 24, 25, 26, 27, 28, 29, 30, 31, 32,
	33, 34, 35, -25, 61, -98, 41, 5, -26, 52,
	-26, -96, 66, 56, -50, 61, 53, 61, 53, 54,
	54, -24, -19, -23, -18, 63, 68, -35, 2, 52,
	52, -26, 5, -14, 68, -73, 5, 42, -67, -66,
	-65, -8, -54, -58, 2, -44, 37, -38, 60, -30,
	7, 8, 9, 10, 11, 12, 13, 15, 16, 17,
	18, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 36, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 5,
	4, -26, 61, -14, -74, -25, 42, 52, 5, 50,
	49, -46, -40, 60, -32, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 50, -15, -17,
	-19, -21, 68, -15, 53, 53, -51, 62, -48, 69,
	2, -19, 69, 58, 69, 5, 5, -14, -10, -9,
	-13, 56, -65, -100, -100, 53, -26, -26, 60, -35,
	-14, -41, 5, -14, -96, -41, 67, 60, -35, 53,
	53, -47, 69, 2, -22, -17, -19, 62, -98, 61,
	69, 53, 53, -35, 53, 55, -14, -14, -98, 61,
	60, 52, 52, 52, -26, 62, -14, 55, 67, -26,
	-98, 61, 69, 53, 69, 53, -19, 69, -64, 53,
	69, 53, -9, -16, 5, 5, 53, -95, -94, -93,
	-8, 2, 69, 53, -22, 69, 53, 53, 56, 55,
	69, -14, 55, -14, 56, -93, -100, 69, -64, -64,
	53, 56, 56, 55, -64, 56,
}

var protoDef = [...]int16{
	-2, -2, 0, 0, -2, 0, 0, 8, 0, 0,
	0, 0, 0, 0, 0, 16, 0, 0, 0, 0,
	0, 0, 0, -2, 529, -2, 7, 0, 0, 9,
	10, 11, 12, 13, 14, 15, 19, 0, 0, 22,
	23, 479, 480, 481, 482, 483, 484, 485, 486, 487,
	488, 489, 490, 491, 492, 493, 494, 495, 496, 497,
	498, 499, 500, 501, 502, 503, 504, 505, 506, 507,
	508, 509, 510, 511, 512, 513, 514, 515, 516, 517,
	518, 519, 520, 521, 522, 526, 36, 38, 0, 0,
	0, 0, 95, 0, 0, -2, -2, 17, 18, 20,
	21, 0, 0, 525, 0, 41, 183, -2, -2, 96,
	-2, 24, 0, 37, 39, 40, 0, 184, 186, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 207, 0, 0, 0, 0, 162, 107, 108, 109,
	97, 0, 265, 25, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	266, 267, 268, 269, 270, 271, 0, -2, 175, 0,
	0, 0, 179, 0, 0, 164, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 323, 324, 325,
	326, 327, 328, 329, 330, 331, 332, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 349, 350, 351, 352, 353, 0, -2,
	212, 0, 0, 215, 0, 0, 99, 0, 27, 272,
	273, 274, 275, 276, 277, 278, 279, 280, 281, 282,
	283, 284, 285, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
	303, 304, 305, 306, 307, 308, 309, 310, 311, 0,
	-2, 224, 0, 0, 0, 228, 0, 35, 42, 0,
	44, 45, 46, 0, 47, 0, 0, 52, 182, 185,
	187, 188, 189, 190, 191, 192, 193, 194, 195, 196,
	0, 204, 103, 0, 31, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 404, 405, 406, 407,
	408, 409, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 422, 423, 424, 425, 426, 427,
	428, 429, 430, 431, 432, 433, 434, 435, 206, 524,
	149, 151, 0, 0, 524, 524, 166, 167, 169, 0,
	98, 0, 171, 174, 176, 177, 527, 528, 178, 0,
	524, 154, 156, 159, 0, 208, 211, 213, 214, 0,
	0, 0, 100, 220, 223, 225, 226, 227, 0, 43,
	0, 56, 57, -2, 60, 65, 0, 69, 0, 48,
	51, 54, 49, 50, 53, 0, 203, 0, 104, 205,
	147, 523, 0, -2, 0, 161, 165, 523, 0, 26,
	0, 135, 136, 137, 138, 139, 140, 141, 142, 143,
	144, 145, 146, 180, 523, 163, 0, 160, 0, 0,
	28, 0, 0, 55, 59, 61, 62, 63, 64, 0,
	0, 67, 0, 0, 78, 0, 0, 0, 0, 0,
	202, 32, 200, 148, 114, 150, 152, 153, 0, -2,
	123, 0, 0, 0, 127, 0, 0, 101, 0, 29,
	354, 355, 356, 357, 358, 359, 360, 361, 362, 363,
	364, 365, 366, 367, 368, 369, 370, 371, 372, 373,
	374, 375, 376, 377, 378, 379, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 392, 132,
	168, 170, 0, 181, 155, 157, 158, 0, 218, 0,
	0, 0, 105, 0, 33, 436, 437, 438, 439, 440,
	441, 442, 443, 444, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 457, 458, 459, 460,
	461, 462, 463, 464, 465, 466, 467, 468, 469, 470,
	471, 472, 473, 474, 475, 476, 477, 478, 68, 73,
	0, 0, 0, 66, 76, 77, 0, 80, 524, 91,
	0, 0, 0, 0, 0, 0, 198, 201, 524, 112,
	116, 119, 122, 124, 125, 126, 0, 0, 0, 102,
	133, 0, 216, 219, 229, 0, 232, 0, 106, 74,
	75, 524, 83, 0, 85, 87, 0, 79, 0, 523,
	92, 93, 70, 0, 72, 183, 0, 199, 0, 523,
	0, 0, 0, 0, 30, 0, 217, -2, 231, 34,
	0, 523, 84, 88, 89, 0, 0, 0, 0, 0,
	110, 0, 113, 115, 128, 0, 134, 0, -2, 236,
	0, 238, 81, 0, 86, 90, 94, 71, 117, 183,
	111, 129, 183, 0, 230, 235, 237, 82, 0, 0,
	0, 118, 130, 183, 0, 131,
}

var protoTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 77, 3, 75, 74, 73, 71, 3,
	66, 67, 70, 64, 61, 65, 60, 58, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 54, 53,
	63, 52, 62, 59, 76, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 68, 57, 69, 72, 3, 79, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 55, 3, 56, 78,
}

var protoTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
}

var protoTok3 = [...]int8{
	0,
}

var protoErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	protoDebug        = 0
	protoErrorVerbose = false
)

type protoLexer interface {
	Lex(lval *protoSymType) int
	Error(s string)
}

type protoParser interface {
	Parse(protoLexer) int
	Lookahead() int
}

type protoParserImpl struct {
	lval  protoSymType
	stack [protoInitialStackSize]protoSymType
	char  int
}

func (p *protoParserImpl) Lookahead() int {
	return p.char
}

func protoNewParser() protoParser {
	return &protoParserImpl{}
}

const protoFlag = -1000

func protoTokname(c int) string {
	if c >= 1 && c-1 < len(protoToknames) {
		if protoToknames[c-1] != "" {
			return protoToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func protoStatname(s int) string {
	if s >= 0 && s < len(protoStatenames) {
		if protoStatenames[s] != "" {
			return protoStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func protoErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !protoErrorVerbose {
		return "syntax error"
	}

	for _, e := range protoErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + protoTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(protoPact[state])
	for tok := TOKSTART; tok-1 < len(protoToknames); tok++ {
		if n := base + tok; n >= 0 && n < protoLast && int(protoChk[int(protoAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if protoDef[state] == -2 {
		i := 0
		for protoExca[i] != -1 || int(protoExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; protoExca[i] >= 0; i += 2 {
			tok := int(protoExca[i])
			if tok < TOKSTART || protoExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if protoExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += protoTokname(tok)
	}
	return res
}

func protolex1(lex protoLexer, lval *protoSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(protoTok1[0])
		goto out
	}
	if char < len(protoTok1) {
		token = int(protoTok1[char])
		goto out
	}
	if char >= protoPrivate {
		if char < protoPrivate+len(protoTok2) {
			token = int(protoTok2[char-protoPrivate])
			goto out
		}
	}
	for i := 0; i < len(protoTok3); i += 2 {
		token = int(protoTok3[i+0])
		if token == char {
			token = int(protoTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(protoTok2[1]) /* unknown char */
	}
	if protoDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", protoTokname(token), uint(char))
	}
	return char, token
}

func protoParse(protolex protoLexer) int {
	return protoNewParser().Parse(protolex)
}

func (protorcvr *protoParserImpl) Parse(protolex protoLexer) int {
	var proton int
	var protoVAL protoSymType
	var protoDollar []protoSymType
	_ = protoDollar // silence set and not used
	protoS := protorcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	protostate := 0
	protorcvr.char = -1
	prototoken := -1 // protorcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		protostate = -1
		protorcvr.char = -1
		prototoken = -1
	}()
	protop := -1
	goto protostack

ret0:
	return 0

ret1:
	return 1

protostack:
	/* put a state and value onto the stack */
	if protoDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", protoTokname(prototoken), protoStatname(protostate))
	}

	protop++
	if protop >= len(protoS) {
		nyys := make([]protoSymType, len(protoS)*2)
		copy(nyys, protoS)
		protoS = nyys
	}
	protoS[protop] = protoVAL
	protoS[protop].yys = protostate

protonewstate:
	proton = int(protoPact[protostate])
	if proton <= protoFlag {
		goto protodefault /* simple state */
	}
	if protorcvr.char < 0 {
		protorcvr.char, prototoken = protolex1(protolex, &protorcvr.lval)
	}
	proton += prototoken
	if proton < 0 || proton >= protoLast {
		goto protodefault
	}
	proton = int(protoAct[proton])
	if int(protoChk[proton]) == prototoken { /* valid shift */
		protorcvr.char = -1
		prototoken = -1
		protoVAL = protorcvr.lval
		protostate = proton
		if Errflag > 0 {
			Errflag--
		}
		goto protostack
	}

protodefault:
	/* default state action */
	proton = int(protoDef[protostate])
	if proton == -2 {
		if protorcvr.char < 0 {
			protorcvr.char, prototoken = protolex1(protolex, &protorcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if protoExca[xi+0] == -1 && int(protoExca[xi+1]) == protostate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			proton = int(protoExca[xi+0])
			if proton < 0 || proton == prototoken {
				break
			}
		}
		proton = int(protoExca[xi+1])
		if proton < 0 {
			goto ret0
		}
	}
	if proton == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			protolex.Error(protoErrorMessage(protostate, prototoken))
			Nerrs++
			if protoDebug >= 1 {
				__yyfmt__.Printf("%s", protoStatname(protostate))
				__yyfmt__.Printf(" saw %s\n", protoTokname(prototoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for protop >= 0 {
				proton = int(protoPact[protoS[protop].yys]) + protoErrCode
				if proton >= 0 && proton < protoLast {
					protostate = int(protoAct[proton]) /* simulate a shift of "error" */
					if int(protoChk[protostate]) == protoErrCode {
						goto protostack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if protoDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", protoS[protop].yys)
				}
				protop--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if protoDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", protoTokname(prototoken))
			}
			if prototoken == protoEofCode {
				goto ret1
			}
			protorcvr.char = -1
			prototoken = -1
			goto protonewstate /* try again in the same state */
		}
	}

	/* reduction by production proton */
	if protoDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", proton, protoStatname(protostate))
	}

	protont := proton
	protopt := protop
	_ = protopt // guard against "declared and not used"

	protop -= int(protoR2[proton])
	// protop is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if protop+1 >= len(protoS) {
		nyys := make([]protoSymType, len(protoS)*2)
		copy(nyys, protoS)
		protoS = nyys
	}
	protoVAL = protoS[protop+1]

	/* consult goto table to find next state */
	proton = int(protoR1[proton])
	protog := int(protoPgo[proton])
	protoj := protog + protoS[protop].yys + 1

	if protoj >= protoLast {
		protostate = int(protoAct[protog])
	} else {
		protostate = int(protoAct[protoj])
		if int(protoChk[protostate]) != -proton {
			protostate = int(protoAct[protog])
		}
	}
	// dummy call; replaced with literal code
	switch protont {

	case 1:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].syn.AddSemicolon(protoDollar[2].b)
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, protoDollar[1].syn, nil, lex.eof)
			lex.res = protoVAL.file
		}
	case 2:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].ed.AddSemicolon(protoDollar[2].b)
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNodeWithEdition(lex.info, protoDollar[1].ed, nil, lex.eof)
			lex.res = protoVAL.file
		}
	case 3:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, nil, protoDollar[1].fileElements, lex.eof)
			lex.res = protoVAL.file
		}
	case 4:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].syn.AddSemicolon(protoDollar[2].b)
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, protoDollar[1].syn, protoDollar[3].fileElements, lex.eof)
			lex.res = protoVAL.file
		}
	case 5:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].ed.AddSemicolon(protoDollar[2].b)
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNodeWithEdition(lex.info, protoDollar[1].ed, protoDollar[3].fileElements, lex.eof)
			lex.res = protoVAL.file
		}
	case 6:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, nil, nil, lex.eof)
			lex.res = protoVAL.file
		}
	case 7:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].fileElement != nil {
				protoVAL.fileElements = append(protoDollar[1].fileElements, protoDollar[2].fileElement)
			} else {
				protoVAL.fileElements = protoDollar[1].fileElements
			}
		}
	case 8:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].fileElement != nil {
				protoVAL.fileElements = []ast.FileElement{protoDollar[1].fileElement}
			} else {
				protoVAL.fileElements = nil
			}
		}
	case 9:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].imprt.AddSemicolon(protoDollar[2].b)
			protoVAL.fileElement = protoDollar[1].imprt
		}
	case 10:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].pkg.AddSemicolon(protoDollar[2].b)
			protoVAL.fileElement = protoDollar[1].pkg
		}
	case 11:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].opt.AddSemicolon(protoDollar[2].b)
			protoVAL.fileElement = protoDollar[1].opt
		}
	case 12:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].msg, protoDollar[2].b)
			protoVAL.fileElement = protoDollar[1].msg
		}
	case 13:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].en, protoDollar[2].b)
			protoVAL.fileElement = protoDollar[1].en
		}
	case 14:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].extend, protoDollar[2].b)
			protoVAL.fileElement = protoDollar[1].extend
		}
	case 15:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].svc, protoDollar[2].b)
			protoVAL.fileElement = protoDollar[1].svc
		}
	case 16:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElement = nil
		}
	case 17:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.syn = ast.NewSyntaxNode(protoDollar[1].id.ToKeyword(), protoDollar[2].b, protoDollar[3].sv)
		}
	case 18:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.ed = ast.NewEditionNode(protoDollar[1].id.ToKeyword(), protoDollar[2].b, protoDollar[3].sv)
		}
	case 19:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.imprt = ast.NewImportNode(protoDollar[1].id.ToKeyword(), nil, nil, protoDollar[2].sv)
		}
	case 20:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.imprt = ast.NewImportNode(protoDollar[1].id.ToKeyword(), nil, protoDollar[2].id.ToKeyword(), protoDollar[3].sv)
		}
	case 21:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.imprt = ast.NewImportNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), nil, protoDollar[3].sv)
		}
	case 22:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.pkg = ast.NewPackageNode(protoDollar[1].id.ToKeyword(), protoDollar[2].cid.toIdentValueNode(nil))
		}
	case 23:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identSlices{idents: []*ast.IdentNode{protoDollar[1].id}}
		}
	case 24:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].cid.idents = append(protoDollar[1].cid.idents, protoDollar[3].id)
			protoDollar[1].cid.dots = append(protoDollar[1].cid.dots, protoDollar[2].b)
			protoVAL.cid = protoDollar[1].cid
		}
	case 25:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identSlices{idents: []*ast.IdentNode{protoDollar[1].id}}
		}
	case 26:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].cid.idents = append(protoDollar[1].cid.idents, protoDollar[3].id)
			protoDollar[1].cid.dots = append(protoDollar[1].cid.dots, protoDollar[2].b)
			protoVAL.cid = protoDollar[1].cid
		}
	case 27:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identSlices{idents: []*ast.IdentNode{protoDollar[1].id}}
		}
	case 28:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].cid.idents = append(protoDollar[1].cid.idents, protoDollar[3].id)
			protoDollar[1].cid.dots = append(protoDollar[1].cid.dots, protoDollar[2].b)
			protoVAL.cid = protoDollar[1].cid
		}
	case 29:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identSlices{idents: []*ast.IdentNode{protoDollar[1].id}}
		}
	case 30:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].cid.idents = append(protoDollar[1].cid.idents, protoDollar[3].id)
			protoDollar[1].cid.dots = append(protoDollar[1].cid.dots, protoDollar[2].b)
			protoVAL.cid = protoDollar[1].cid
		}
	case 31:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identSlices{idents: []*ast.IdentNode{protoDollar[1].id}}
		}
	case 32:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].cid.idents = append(protoDollar[1].cid.idents, protoDollar[3].id)
			protoDollar[1].cid.dots = append(protoDollar[1].cid.dots, protoDollar[2].b)
			protoVAL.cid = protoDollar[1].cid
		}
	case 33:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.cid = &identSlices{idents: []*ast.IdentNode{protoDollar[1].id}}
		}
	case 34:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].cid.idents = append(protoDollar[1].cid.idents, protoDollar[3].id)
			protoDollar[1].cid.dots = append(protoDollar[1].cid.dots, protoDollar[2].b)
			protoVAL.cid = protoDollar[1].cid
		}
	case 35:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			optName := ast.NewOptionNameNode(protoDollar[2].optNms.refs, protoDollar[2].optNms.dots)
			protoVAL.opt = ast.NewOptionNode(protoDollar[1].id.ToKeyword(), optName, protoDollar[4].b, protoDollar[5].v)
		}
	case 36:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			fieldReferenceNode := ast.NewFieldReferenceNode(protoDollar[1].id)
			protoVAL.optNms = &fieldRefSlices{refs: []*ast.FieldReferenceNode{fieldReferenceNode}}
		}
	case 37:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].optNms.refs = append(protoDollar[1].optNms.refs, ast.NewFieldReferenceNode(protoDollar[3].id))
			protoDollar[1].optNms.dots = append(protoDollar[1].optNms.dots, protoDollar[2].b)
			protoVAL.optNms = protoDollar[1].optNms
		}
	case 38:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.optNms = &fieldRefSlices{refs: []*ast.FieldReferenceNode{protoDollar[1].ref}}
		}
	case 39:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].optNms.refs = append(protoDollar[1].optNms.refs, protoDollar[3].ref)
			protoDollar[1].optNms.dots = append(protoDollar[1].optNms.dots, protoDollar[2].b)
			protoVAL.optNms = protoDollar[1].optNms
		}
	case 40:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.ref = ast.NewExtensionFieldReferenceNode(protoDollar[1].b, protoDollar[2].tid, protoDollar[3].b)
		}
	case 41:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing extension name")
			protoVAL.ref = ast.NewIncompleteExtensionFieldReferenceNode(protoDollar[1].b, nil, protoDollar[2].b)
		}
	case 43:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].v.(*ast.MessageLiteralNode), protoDollar[2].b)
			protoVAL.v = protoDollar[1].v
		}
	case 44:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].sv
		}
	case 46:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].id
		}
	case 47:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].f
		}
	case 48:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, protoDollar[2].f)
		}
	case 49:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, protoDollar[2].f)
		}
	case 50:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			f := ast.NewSpecialFloatLiteralNode(protoDollar[2].id.ToKeyword())
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, f)
		}
	case 51:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			f := ast.NewSpecialFloatLiteralNode(protoDollar[2].id.ToKeyword())
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, f)
		}
	case 52:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].i
		}
	case 53:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewPositiveUintLiteralNode(protoDollar[1].b, protoDollar[2].i)
		}
	case 54:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].i.Val > math.MaxInt64+1 {
				// can't represent as int so treat as float literal
				protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, protoDollar[2].i)
			} else {
				protoVAL.v = ast.NewNegativeIntLiteralNode(protoDollar[1].b, protoDollar[2].i)
			}
		}
	case 55:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[2].msgLitFlds == nil {
				protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, nil, nil, protoDollar[3].b)
			} else {
				fields, delimiters := protoDollar[2].msgLitFlds.toNodes()
				protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, fields, delimiters, protoDollar[3].b)
			}
		}
	case 56:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, nil, nil, protoDollar[2].b)
		}
	case 59:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].msgLitFlds != nil {
				protoDollar[1].msgLitFlds.next = protoDollar[2].msgLitFlds
				protoVAL.msgLitFlds = protoDollar[1].msgLitFlds
			} else {
				protoVAL.msgLitFlds = protoDollar[2].msgLitFlds
			}
		}
	case 60:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].msgLitFld != nil {
				protoVAL.msgLitFlds = &messageFieldList{field: protoDollar[1].msgLitFld}
			} else {
				protoVAL.msgLitFlds = nil
			}
		}
	case 61:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].msgLitFld != nil {
				protoVAL.msgLitFlds = &messageFieldList{field: protoDollar[1].msgLitFld, delimiter: protoDollar[2].b}
			} else {
				protoVAL.msgLitFlds = nil
			}
		}
	case 62:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].msgLitFld != nil {
				protoVAL.msgLitFlds = &messageFieldList{field: protoDollar[1].msgLitFld, delimiter: protoDollar[2].b}
			} else {
				protoVAL.msgLitFlds = nil
			}
		}
	case 63:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.msgLitFlds = nil
		}
	case 64:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.msgLitFlds = nil
		}
	case 65:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgLitFlds = nil
		}
	case 66:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[1].ref != nil && protoDollar[2].b != nil {
				protoVAL.msgLitFld = ast.NewMessageFieldNode(protoDollar[1].ref, protoDollar[2].b, protoDollar[3].v)
			} else {
				protoVAL.msgLitFld = nil
			}
		}
	case 67:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].ref != nil && protoDollar[2].v != nil {
				protoVAL.msgLitFld = ast.NewMessageFieldNode(protoDollar[1].ref, nil, protoDollar[2].v)
			} else {
				protoVAL.msgLitFld = nil
			}
		}
	case 68:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.msgLitFld = nil
		}
	case 69:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ref = ast.NewFieldReferenceNode(protoDollar[1].id)
		}
	case 70:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.ref = ast.NewExtensionFieldReferenceNode(protoDollar[1].b, protoDollar[2].cid.toIdentValueNode(nil), protoDollar[3].b)
		}
	case 71:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.ref = ast.NewAnyTypeReferenceNode(protoDollar[1].b, protoDollar[2].cid.toIdentValueNode(nil), protoDollar[3].b, protoDollar[4].cid.toIdentValueNode(nil), protoDollar[5].b)
		}
	case 72:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.ref = nil
		}
	case 74:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].v.(*ast.MessageLiteralNode), protoDollar[2].b)
			protoVAL.v = protoDollar[1].v
		}
	case 75:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].v.(*ast.ArrayLiteralNode), protoDollar[2].b)
			protoVAL.v = protoDollar[1].v
		}
	case 76:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].v.(*ast.MessageLiteralNode), protoDollar[2].b)
			protoVAL.v = protoDollar[1].v
		}
	case 77:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].v.(*ast.ArrayLiteralNode), protoDollar[2].b)
			protoVAL.v = protoDollar[1].v
		}
	case 79:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[2].msgLitFlds == nil {
				protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, nil, nil, protoDollar[3].b)
			} else {
				fields, delimiters := protoDollar[2].msgLitFlds.toNodes()
				protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, fields, delimiters, protoDollar[3].b)
			}
		}
	case 80:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, nil, nil, protoDollar[2].b)
		}
	case 81:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			if protoDollar[2].sl == nil {
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[4].b)
			} else {
				if protoDollar[3].b != nil {
					protoDollar[2].sl.commas = append(protoDollar[2].sl.commas, protoDollar[3].b)
				}
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, protoDollar[2].sl.vals, protoDollar[2].sl.commas, protoDollar[4].b)
			}
		}
	case 82:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			if protoDollar[2].sl == nil {
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[5].b)
			} else {
				if protoDollar[3].b != nil {
					protoDollar[2].sl.commas = append(protoDollar[2].sl.commas, protoDollar[3].b)
				}
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, protoDollar[2].sl.vals, protoDollar[2].sl.commas, protoDollar[5].b)
			}
		}
	case 83:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[2].b)
		}
	case 84:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[3].b)
		}
	case 85:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.sl = &valueSlices{vals: []ast.ValueNode{protoDollar[1].v}}
		}
	case 86:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].sl.vals = append(protoDollar[1].sl.vals, protoDollar[3].v)
			protoDollar[1].sl.commas = append(protoDollar[1].sl.commas, protoDollar[2].b)
			protoVAL.sl = protoDollar[1].sl
		}
	case 88:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].v.(*ast.MessageLiteralNode), protoDollar[2].b)
			protoVAL.v = protoDollar[1].v
		}
	case 89:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			if protoDollar[2].sl == nil {
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[4].b)
			} else {
				if protoDollar[3].b != nil {
					protoDollar[2].sl.commas = append(protoDollar[2].sl.commas, protoDollar[3].b)
				}
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, protoDollar[2].sl.vals, protoDollar[2].sl.commas, protoDollar[4].b)
			}
		}
	case 90:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			if protoDollar[2].sl == nil {
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[5].b)
			} else {
				if protoDollar[3].b != nil {
					protoDollar[2].sl.commas = append(protoDollar[2].sl.commas, protoDollar[3].b)
				}
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, protoDollar[2].sl.vals, protoDollar[2].sl.commas, protoDollar[5].b)
			}
		}
	case 91:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[2].b)
		}
	case 92:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[3].b)
		}
	case 93:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].v.(*ast.MessageLiteralNode), protoDollar[2].b)
			protoVAL.sl = &valueSlices{vals: []ast.ValueNode{protoDollar[1].v}}
		}
	case 94:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[3].v.(*ast.MessageLiteralNode), protoDollar[4].b)
			protoDollar[1].sl.vals = append(protoDollar[1].sl.vals, protoDollar[3].v)
			protoDollar[1].sl.commas = append(protoDollar[1].sl.commas, protoDollar[2].b)
			protoVAL.sl = protoDollar[1].sl
		}
	case 95:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.tid = protoDollar[1].cid.toIdentValueNode(nil)
		}
	case 96:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.tid = protoDollar[2].cid.toIdentValueNode(protoDollar[1].b)
		}
	case 97:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.tid = protoDollar[1].cid.toIdentValueNode(nil)
		}
	case 98:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.tid = protoDollar[2].cid.toIdentValueNode(protoDollar[1].b)
		}
	case 99:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.tid = protoDollar[1].cid.toIdentValueNode(nil)
		}
	case 100:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.tid = protoDollar[2].cid.toIdentValueNode(protoDollar[1].b)
		}
	case 101:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.tid = protoDollar[1].cid.toIdentValueNode(nil)
		}
	case 102:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.tid = protoDollar[2].cid.toIdentValueNode(protoDollar[1].b)
		}
	case 103:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.tid = protoDollar[1].cid.toIdentValueNode(nil)
		}
	case 104:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.tid = protoDollar[2].cid.toIdentValueNode(protoDollar[1].b)
		}
	case 105:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.tid = protoDollar[1].cid.toIdentValueNode(nil)
		}
	case 106:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.tid = protoDollar[2].cid.toIdentValueNode(protoDollar[1].b)
		}
	case 110:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].opts.commas = append(protoDollar[2].opts.commas, protoDollar[3].b)
			}
			if len(protoDollar[2].opts.options) == 0 {
				protolex.(*protoLex).ErrExtendedSyntax("compact options list cannot be empty")
			}
			protoVAL.cmpctOpts = ast.NewCompactOptionsNode(protoDollar[1].b, protoDollar[2].opts.options, protoDollar[2].opts.commas, protoDollar[4].b)
		}
	case 111:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].opts.commas = append(protoDollar[2].opts.commas, protoDollar[3].b)
			}
			if len(protoDollar[2].opts.options) == 0 {
				protolex.(*protoLex).ErrExtendedSyntax("compact options list cannot be empty")
			}
			protoVAL.cmpctOpts = ast.NewCompactOptionsNode(protoDollar[1].b, protoDollar[2].opts.options, protoDollar[2].opts.commas, protoDollar[5].b)
		}
	case 112:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.opts = &compactOptionSlices{options: []*ast.OptionNode{protoDollar[1].opt}}
		}
	case 113:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].opts.options = append(protoDollar[1].opts.options, protoDollar[3].opt)
			protoDollar[1].opts.commas = append(protoDollar[1].opts.commas, protoDollar[2].b)
			protoVAL.opts = protoDollar[1].opts
		}
	case 114:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.opts = &compactOptionSlices{options: []*ast.OptionNode{}}
		}
	case 115:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			optName := ast.NewOptionNameNode(protoDollar[1].optNms.refs, protoDollar[1].optNms.dots)
			protoVAL.opt = ast.NewCompactOptionNode(optName, protoDollar[2].b, protoDollar[3].v)
		}
	case 116:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expected '='")
			optName := ast.NewOptionNameNode(protoDollar[1].optNms.refs, protoDollar[1].optNms.dots)
			protoVAL.opt = ast.NewIncompleteCompactOptionNode(optName, nil, nil)
		}
	case 117:
		protoDollar = protoS[protopt-8 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil, protoDollar[6].b, protoDollar[7].msgElements, protoDollar[8].b)
		}
	case 118:
		protoDollar = protoS[protopt-10 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts, protoDollar[8].b, protoDollar[9].msgElements, protoDollar[10].b)
		}
	case 119:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.oo = ast.NewOneofNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].ooElements, protoDollar[5].b)
		}
	case 120:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.ooElements = nil
		}
	case 122:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].ooElement != nil {
				protoVAL.ooElements = append(protoDollar[1].ooElements, protoDollar[2].ooElement)
			} else {
				protoVAL.ooElements = protoDollar[1].ooElements
			}
		}
	case 123:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].ooElement != nil {
				protoVAL.ooElements = []ast.OneofElement{protoDollar[1].ooElement}
			} else {
				protoVAL.ooElements = nil
			}
		}
	case 124:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].opt.AddSemicolon(protoDollar[2].b)
			protoVAL.ooElement = protoDollar[1].opt
		}
	case 125:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].fld.AddSemicolon(protoDollar[2].b)
			protoVAL.ooElement = protoDollar[1].fld
		}
	case 126:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].grp, protoDollar[2].b)
			protoVAL.ooElement = protoDollar[1].grp
		}
	case 127:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ooElement = nil
		}
	case 128:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil)
		}
	case 129:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts)
		}
	case 130:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(nil, protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil, protoDollar[5].b, protoDollar[6].msgElements, protoDollar[7].b)
		}
	case 131:
		protoDollar = protoS[protopt-9 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(nil, protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts, protoDollar[7].b, protoDollar[8].msgElements, protoDollar[9].b)
		}
	case 132:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.mapFld = ast.NewMapFieldNode(protoDollar[1].mapType, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil)
		}
	case 133:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.mapFld = ast.NewMapFieldNode(protoDollar[1].mapType, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts)
		}
	case 134:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			protoVAL.mapType = ast.NewMapTypeNode(protoDollar[1].id.ToKeyword(), protoDollar[2].b, protoDollar[3].id, protoDollar[4].b, protoDollar[5].tid, protoDollar[6].b)
			ast.AddVirtualSemicolon(protoVAL.mapType, protoDollar[7].b)
		}
	case 147:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].rngs.commas = append(protoDollar[2].rngs.commas, protoDollar[3].b)
			}
			protoVAL.ext = ast.NewExtensionRangeNode(protoDollar[1].id.ToKeyword(), protoDollar[2].rngs.ranges, protoDollar[2].rngs.commas, nil)
		}
	case 148:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].rngs.commas = append(protoDollar[2].rngs.commas, protoDollar[3].b)
			}
			protoVAL.ext = ast.NewExtensionRangeNode(protoDollar[1].id.ToKeyword(), protoDollar[2].rngs.ranges, protoDollar[2].rngs.commas, protoDollar[4].cmpctOpts)
		}
	case 149:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rngs = &rangeSlices{ranges: []*ast.RangeNode{protoDollar[1].rng}}
		}
	case 150:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].rngs.ranges = append(protoDollar[1].rngs.ranges, protoDollar[3].rng)
			protoDollar[1].rngs.commas = append(protoDollar[1].rngs.commas, protoDollar[2].b)
			protoVAL.rngs = protoDollar[1].rngs
		}
	case 151:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].i, nil, nil, nil)
		}
	case 152:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].i, protoDollar[2].id.ToKeyword(), protoDollar[3].i, nil)
		}
	case 153:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].i, protoDollar[2].id.ToKeyword(), nil, protoDollar[3].id.ToKeyword())
		}
	case 154:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rngs = &rangeSlices{ranges: []*ast.RangeNode{protoDollar[1].rng}}
		}
	case 155:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].rngs.ranges = append(protoDollar[1].rngs.ranges, protoDollar[3].rng)
			protoDollar[1].rngs.commas = append(protoDollar[1].rngs.commas, protoDollar[2].b)
			protoVAL.rngs = protoDollar[1].rngs
		}
	case 156:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].il, nil, nil, nil)
		}
	case 157:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].il, protoDollar[2].id.ToKeyword(), protoDollar[3].il, nil)
		}
	case 158:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].il, protoDollar[2].id.ToKeyword(), nil, protoDollar[3].id.ToKeyword())
		}
	case 159:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.il = protoDollar[1].i
		}
	case 160:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.il = ast.NewNegativeIntLiteralNode(protoDollar[1].b, protoDollar[2].i)
		}
	case 161:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].rngs.commas = append(protoDollar[2].rngs.commas, protoDollar[3].b)
			}
			protoVAL.resvd = ast.NewReservedRangesNode(protoDollar[1].id.ToKeyword(), protoDollar[2].rngs.ranges, protoDollar[2].rngs.commas)
		}
	case 163:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].rngs.commas = append(protoDollar[2].rngs.commas, protoDollar[3].b)
			}
			protoVAL.resvd = ast.NewReservedRangesNode(protoDollar[1].id.ToKeyword(), protoDollar[2].rngs.ranges, protoDollar[2].rngs.commas)
		}
	case 165:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].names.commas = append(protoDollar[2].names.commas, protoDollar[3].b)
			}
			protoVAL.resvd = ast.NewReservedNamesNode(protoDollar[1].id.ToKeyword(), protoDollar[2].names.names, protoDollar[2].names.commas)
		}
	case 166:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.resvd = ast.NewReservedIdentifiersNode(protoDollar[1].id.ToKeyword(), protoDollar[2].names.idents, protoDollar[2].names.commas)
		}
	case 167:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.names = &nameSlices{names: []ast.StringValueNode{protoDollar[1].sv}}
		}
	case 168:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].names.names = append(protoDollar[1].names.names, protoDollar[3].sv)
			protoDollar[1].names.commas = append(protoDollar[1].names.commas, protoDollar[2].b)
			protoVAL.names = protoDollar[1].names
		}
	case 169:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.names = &nameSlices{idents: []*ast.IdentNode{protoDollar[1].id}}
		}
	case 170:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].names.idents = append(protoDollar[1].names.idents, protoDollar[3].id)
			protoDollar[1].names.commas = append(protoDollar[1].names.commas, protoDollar[2].b)
			protoVAL.names = protoDollar[1].names
		}
	case 171:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.en = ast.NewEnumNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].enElements, protoDollar[5].b)
		}
	case 172:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.enElements = nil
		}
	case 174:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].enElement != nil {
				protoVAL.enElements = append(protoDollar[1].enElements, protoDollar[2].enElement)
			} else {
				protoVAL.enElements = protoDollar[1].enElements
			}
		}
	case 175:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].enElement != nil {
				protoVAL.enElements = []ast.EnumElement{protoDollar[1].enElement}
			} else {
				protoVAL.enElements = nil
			}
		}
	case 176:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].opt.AddSemicolon(protoDollar[2].b)
			protoVAL.enElement = protoDollar[1].opt
		}
	case 177:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].env.AddSemicolon(protoDollar[2].b)
			protoVAL.enElement = protoDollar[1].env
		}
	case 178:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].resvd.AddSemicolon(protoDollar[2].b)
			protoVAL.enElement = protoDollar[1].resvd
		}
	case 179:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.enElement = nil
		}
	case 180:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.env = ast.NewEnumValueNode(protoDollar[1].id, protoDollar[2].b, protoDollar[3].il, nil)
		}
	case 181:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.env = ast.NewEnumValueNode(protoDollar[1].id, protoDollar[2].b, protoDollar[3].il, protoDollar[4].cmpctOpts)
		}
	case 182:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.msg = ast.NewMessageNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].msgElements, protoDollar[5].b)
		}
	case 183:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.msgElements = nil
		}
	case 185:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].msgElement != nil {
				protoVAL.msgElements = append(protoDollar[1].msgElements, protoDollar[2].msgElement)
			} else {
				protoVAL.msgElements = protoDollar[1].msgElements
			}
		}
	case 186:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].msgElement != nil {
				protoVAL.msgElements = []ast.MessageElement{protoDollar[1].msgElement}
			} else {
				protoVAL.msgElements = nil
			}
		}
	case 187:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].fld.AddSemicolon(protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].fld
		}
	case 188:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].en, protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].en
		}
	case 189:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].msg, protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].msg
		}
	case 190:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].extend, protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].extend
		}
	case 191:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].ext.AddSemicolon(protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].ext
		}
	case 192:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].grp, protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].grp
		}
	case 193:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].opt.AddSemicolon(protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].opt
		}
	case 194:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].oo, protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].oo
		}
	case 195:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].mapFld.AddSemicolon(protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].mapFld
		}
	case 196:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].resvd.AddSemicolon(protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].resvd
		}
	case 197:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = ast.NewEmptyDeclNode(protoDollar[1].b)
		}
	case 198:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil)
		}
	case 199:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts)
		}
	case 200:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil)
		}
	case 201:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts)
		}
	case 202:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing field number after '='")
			protoVAL.fld = ast.NewIncompleteFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, protoDollar[4].b, nil, nil)
		}
	case 203:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing '=' after field name")
			protoVAL.fld = ast.NewIncompleteFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, nil, nil, nil)
		}
	case 204:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing field name")
			protoVAL.fld = ast.NewIncompleteFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, nil, nil, nil, nil)
		}
	case 205:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing field number after '='")
			protoVAL.fld = ast.NewIncompleteFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, nil, nil)
		}
	case 206:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing '=' after field name")
			protoVAL.fld = ast.NewIncompleteFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, nil, nil, nil)
		}
	case 207:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing field name")
			protoVAL.fld = ast.NewIncompleteFieldNode(nil, protoDollar[1].tid, nil, nil, nil, nil)
		}
	case 208:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.extend = ast.NewExtendNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].b, protoDollar[4].extElements, protoDollar[5].b)
		}
	case 209:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.extElements = nil
		}
	case 211:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].extElement != nil {
				protoVAL.extElements = append(protoDollar[1].extElements, protoDollar[2].extElement)
			} else {
				protoVAL.extElements = protoDollar[1].extElements
			}
		}
	case 212:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].extElement != nil {
				protoVAL.extElements = []ast.ExtendElement{protoDollar[1].extElement}
			} else {
				protoVAL.extElements = nil
			}
		}
	case 213:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].fld.AddSemicolon(protoDollar[2].b)
			protoVAL.extElement = protoDollar[1].fld
		}
	case 214:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].grp, protoDollar[2].b)
			protoVAL.extElement = protoDollar[1].grp
		}
	case 215:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.extElement = nil
		}
	case 216:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil)
		}
	case 217:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].tid, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts)
		}
	case 218:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil)
		}
	case 219:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].tid, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts)
		}
	case 220:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.svc = ast.NewServiceNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].svcElements, protoDollar[5].b)
		}
	case 221:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.svcElements = nil
		}
	case 223:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].svcElement != nil {
				protoVAL.svcElements = append(protoDollar[1].svcElements, protoDollar[2].svcElement)
			} else {
				protoVAL.svcElements = protoDollar[1].svcElements
			}
		}
	case 224:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].svcElement != nil {
				protoVAL.svcElements = []ast.ServiceElement{protoDollar[1].svcElement}
			} else {
				protoVAL.svcElements = nil
			}
		}
	case 225:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].opt.AddSemicolon(protoDollar[2].b)
			protoVAL.svcElement = protoDollar[1].opt
		}
	case 226:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].mtd.AddSemicolon(protoDollar[2].b)
			protoVAL.svcElement = protoDollar[1].mtd
		}
	case 227:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].mtd, protoDollar[2].b)
			protoVAL.svcElement = protoDollar[1].mtd
		}
	case 228:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.svcElement = nil
		}
	case 229:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.mtd = ast.NewRPCNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].mtdMsgType, protoDollar[4].id.ToKeyword(), protoDollar[5].mtdMsgType)
		}
	case 230:
		protoDollar = protoS[protopt-8 : protopt+1]
		{
			protoVAL.mtd = ast.NewRPCNodeWithBody(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].mtdMsgType, protoDollar[4].id.ToKeyword(), protoDollar[5].mtdMsgType, protoDollar[6].b, protoDollar[7].mtdElements, protoDollar[8].b)
		}
	case 231:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.mtdMsgType = ast.NewRPCTypeNode(protoDollar[1].b, protoDollar[2].id.ToKeyword(), protoDollar[3].tid, protoDollar[4].b)
		}
	case 232:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.mtdMsgType = ast.NewRPCTypeNode(protoDollar[1].b, nil, protoDollar[2].tid, protoDollar[3].b)
		}
	case 233:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.mtdElements = nil
		}
	case 235:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].mtdElement != nil {
				protoVAL.mtdElements = append(protoDollar[1].mtdElements, protoDollar[2].mtdElement)
			} else {
				protoVAL.mtdElements = protoDollar[1].mtdElements
			}
		}
	case 236:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].mtdElement != nil {
				protoVAL.mtdElements = []ast.RPCElement{protoDollar[1].mtdElement}
			} else {
				protoVAL.mtdElements = nil
			}
		}
	case 237:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].opt.AddSemicolon(protoDollar[2].b)
			protoVAL.mtdElement = protoDollar[1].opt
		}
	case 238:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.mtdElement = nil
		}
	case 523:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("unexpected trailing comma")
			protoVAL.b = protoDollar[1].b
		}
	case 524:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.b = nil
		}
	case 525:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("unexpected trailing '.'")
			protoVAL.b = protoDollar[1].b
		}
	case 526:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.b = nil
		}
	case 527:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.b = protoDollar[1].b
		}
	case 528:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expected ';', found ','")
			protoVAL.b = protoDollar[1].b
		}
	case 529:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].b.Virtual {
				protolex.(*protoLex).ErrExtendedSyntax("expected ';'")
			}
			protoVAL.b = protoDollar[1].b
		}
	}
	goto protostack /* stack new state and value */
}
