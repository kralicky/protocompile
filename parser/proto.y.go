// Code generated by goyacc -o proto.y.go -l -p proto proto.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

//lint:file-ignore SA4006 generated parser has unused values

import (
	"math"

	"github.com/kralicky/protocompile/ast"
)

type protoSymType struct {
	yys          int
	file         *ast.FileNode
	syn          *ast.SyntaxNode
	ed           *ast.EditionNode
	fileElement  ast.FileElement
	fileElements []ast.FileElement
	pkg          *ast.PackageNode
	imprt        *ast.ImportNode
	msg          *ast.MessageNode
	msgElement   ast.MessageElement
	msgElements  []ast.MessageElement
	fld          *ast.FieldNode
	mapFld       *ast.MapFieldNode
	mapType      *ast.MapTypeNode
	grp          *ast.GroupNode
	oo           *ast.OneofNode
	ooElement    ast.OneofElement
	ooElements   []ast.OneofElement
	ext          *ast.ExtensionRangeNode
	resvd        *ast.ReservedNode
	en           *ast.EnumNode
	enElement    ast.EnumElement
	enElements   []ast.EnumElement
	env          *ast.EnumValueNode
	extend       *ast.ExtendNode
	extElement   ast.ExtendElement
	extElements  []ast.ExtendElement
	svc          *ast.ServiceNode
	svcElement   ast.ServiceElement
	svcElements  []ast.ServiceElement
	mtd          *ast.RPCNode
	mtdMsgType   *ast.RPCTypeNode
	mtdElement   ast.RPCElement
	mtdElements  []ast.RPCElement
	opt          *ast.OptionNode
	opts         *compactOptionSlices
	ref          *ast.FieldReferenceNode
	refp         *fieldRefParens
	optName      *ast.OptionNameNode
	cmpctOpts    *ast.CompactOptionsNode
	rng          *ast.RangeNode
	rngs         *rangeSlices
	names        *nameSlices
	cid          *identSlices
	xid          *identSlices
	idv          ast.IdentValueNode
	sl           *valueSlices
	msgLitFlds   *messageFieldList
	msgLitFld    *ast.MessageFieldNode
	v            ast.ValueNode
	il           ast.IntValueNode
	sv           ast.StringValueNode
	i            *ast.UintLiteralNode
	f            *ast.FloatLiteralNode
	id           *ast.IdentNode
	b            *ast.RuneNode
	err          error
}

const _STRING_LIT = 57346
const _INT_LIT = 57347
const _FLOAT_LIT = 57348
const _EXTENSION_IDENT = 57349
const _SYNTAX = 57350
const _EDITION = 57351
const _IMPORT = 57352
const _WEAK = 57353
const _PUBLIC = 57354
const _PACKAGE = 57355
const _OPTION = 57356
const _TRUE = 57357
const _FALSE = 57358
const _INF = 57359
const _NAN = 57360
const _REPEATED = 57361
const _OPTIONAL = 57362
const _REQUIRED = 57363
const _DOUBLE = 57364
const _FLOAT = 57365
const _INT32 = 57366
const _INT64 = 57367
const _UINT32 = 57368
const _UINT64 = 57369
const _SINT32 = 57370
const _SINT64 = 57371
const _FIXED32 = 57372
const _FIXED64 = 57373
const _SFIXED32 = 57374
const _SFIXED64 = 57375
const _BOOL = 57376
const _STRING = 57377
const _BYTES = 57378
const _GROUP = 57379
const _ONEOF = 57380
const _MAP = 57381
const _EXTENSIONS = 57382
const _TO = 57383
const _MAX = 57384
const _RESERVED = 57385
const _ENUM = 57386
const _MESSAGE = 57387
const _EXTEND = 57388
const _SERVICE = 57389
const _RPC = 57390
const _STREAM = 57391
const _RETURNS = 57392
const _SINGULAR_IDENT = 57393
const _QUALIFIED_IDENT = 57394
const _FULLY_QUALIFIED_IDENT = 57395
const _ERROR = 57396

var protoToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"_STRING_LIT",
	"_INT_LIT",
	"_FLOAT_LIT",
	"_EXTENSION_IDENT",
	"_SYNTAX",
	"_EDITION",
	"_IMPORT",
	"_WEAK",
	"_PUBLIC",
	"_PACKAGE",
	"_OPTION",
	"_TRUE",
	"_FALSE",
	"_INF",
	"_NAN",
	"_REPEATED",
	"_OPTIONAL",
	"_REQUIRED",
	"_DOUBLE",
	"_FLOAT",
	"_INT32",
	"_INT64",
	"_UINT32",
	"_UINT64",
	"_SINT32",
	"_SINT64",
	"_FIXED32",
	"_FIXED64",
	"_SFIXED32",
	"_SFIXED64",
	"_BOOL",
	"_STRING",
	"_BYTES",
	"_GROUP",
	"_ONEOF",
	"_MAP",
	"_EXTENSIONS",
	"_TO",
	"_MAX",
	"_RESERVED",
	"_ENUM",
	"_MESSAGE",
	"_EXTEND",
	"_SERVICE",
	"_RPC",
	"_STREAM",
	"_RETURNS",
	"_SINGULAR_IDENT",
	"_QUALIFIED_IDENT",
	"_FULLY_QUALIFIED_IDENT",
	"_ERROR",
	"'='",
	"';'",
	"':'",
	"'{'",
	"'}'",
	"'\\\\'",
	"'/'",
	"'?'",
	"','",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'('",
	"')'",
	"'['",
	"']'",
	"'*'",
	"'&'",
	"'^'",
	"'%'",
	"'$'",
	"'#'",
	"'@'",
	"'!'",
	"'~'",
	"'`'",
}

var protoStatenames = [...]string{}

const protoEofCode = 1
const protoErrCode = 2
const protoInitialStackSize = 16

var protoExca = [...]int16{
	-1, 0,
	1, 6,
	-2, 0,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 4,
	1, 3,
	-2, 0,
	-1, 24,
	1, 1,
	-2, 0,
	-1, 26,
	1, 2,
	-2, 0,
	-1, 98,
	1, 4,
	-2, 0,
	-1, 99,
	1, 5,
	-2, 0,
	-1, 106,
	59, 182,
	-2, 0,
	-1, 107,
	59, 222,
	-2, 0,
	-1, 108,
	59, 234,
	-2, 0,
	-1, 183,
	59, 183,
	-2, 0,
	-1, 236,
	59, 223,
	-2, 0,
	-1, 287,
	59, 235,
	-2, 0,
	-1, 299,
	59, 50,
	64, 50,
	-2, 0,
	-1, 426,
	59, 130,
	-2, 0,
	-1, 481,
	59, 131,
	-2, 0,
	-1, 645,
	59, 246,
	-2, 0,
	-1, 664,
	59, 247,
	-2, 0,
}

const protoPrivate = 57344

const protoLast = 1605

var protoAct = [...]int16{
	10, 475, 13, 665, 12, 611, 11, 110, 122, 459,
	599, 423, 461, 543, 135, 452, 390, 24, 26, 93,
	391, 482, 598, 30, 31, 32, 597, 371, 296, 295,
	288, 90, 322, 92, 95, 130, 97, 184, 42, 42,
	237, 370, 42, 136, 124, 470, 648, 668, 142, 33,
	41, 655, 632, 650, 96, 469, 673, 414, 412, 120,
	7, 647, 35, 36, 37, 27, 121, 631, 476, 467,
	635, 417, 643, 634, 629, 602, 471, 476, 646, 626,
	392, 453, 476, 392, 120, 380, 411, 297, 409, 25,
	639, 121, 298, 410, 628, 408, 386, 601, 534, 446,
	431, 430, 424, 685, 682, 681, 131, 185, 128, 289,
	126, 675, 127, 669, 113, 111, 613, 115, 400, 394,
	538, 381, 309, 683, 131, 120, 128, 670, 126, 303,
	127, 645, 121, 448, 426, 108, 680, 107, 466, 106,
	311, 105, 393, 239, 315, 393, 317, 25, 319, 320,
	369, 241, 373, 374, 379, 191, 34, 654, 652, 27,
	27, 606, 604, 16, 404, 642, 641, 640, 310, 5,
	6, 17, 539, 473, 18, 19, 312, 313, 314, 472,
	316, 16, 318, 375, 185, 451, 427, 422, 388, 17,
	104, 29, 18, 19, 28, 419, 541, 292, 425, 478,
	383, 385, 387, 379, 4, 21, 20, 22, 23, 19,
	667, 38, 15, 612, 661, 306, 305, 660, 39, 40,
	622, 382, 19, 21, 20, 22, 23, 592, 593, 98,
	15, 99, 191, 89, 306, 305, 479, 116, 608, 607,
	540, 531, 372, 293, 474, 418, 307, 308, 449, 532,
	103, 102, 101, 396, 100, 399, 433, 434, 435, 436,
	437, 438, 439, 440, 441, 442, 443, 444, 384, 663,
	664, 291, 239, 290, 398, 286, 287, 395, 14, 235,
	241, 236, 186, 182, 183, 129, 389, 187, 289, 397,
	134, 377, 376, 480, 481, 123, 140, 133, 485, 132,
	238, 484, 125, 300, 402, 403, 405, 294, 299, 465,
	594, 487, 303, 415, 242, 137, 192, 189, 401, 544,
	323, 489, 243, 146, 406, 432, 413, 416, 407, 457,
	114, 657, 109, 454, 420, 421, 302, 596, 610, 458,
	119, 117, 9, 46, 47, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
	83, 84, 85, 86, 87, 88, 94, 428, 429, 8,
	3, 2, 1, 120, 0, 0, 0, 0, 0, 0,
	121, 447, 460, 0, 0, 0, 595, 0, 0, 445,
	0, 450, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 456, 0, 0, 0, 483, 468, 0,
	0, 0, 0, 0, 0, 455, 0, 0, 0, 0,
	0, 0, 0, 0, 533, 0, 0, 535, 0, 0,
	0, 0, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 536, 0, 463, 464, 0, 0, 537,
	0, 0, 0, 0, 0, 0, 609, 600, 0, 0,
	0, 0, 483, 0, 0, 0, 0, 0, 0, 0,
	42, 0, 0, 0, 0, 0, 42, 0, 615, 616,
	618, 619, 605, 614, 0, 0, 590, 591, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 603, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 0, 617, 0, 0, 0, 0,
	0, 0, 623, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 42, 0, 625, 624, 0, 0,
	0, 0, 0, 0, 0, 0, 621, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 636,
	637, 0, 633, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 638, 0, 644, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 0, 128, 0,
	126, 0, 127, 0, 653, 656, 666, 0, 658, 630,
	113, 659, 0, 115, 0, 649, 0, 0, 0, 42,
	0, 0, 672, 674, 0, 666, 0, 0, 676, 0,
	0, 131, 0, 128, 131, 126, 128, 127, 126, 678,
	127, 677, 679, 651, 131, 0, 128, 0, 126, 0,
	127, 0, 684, 662, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 458, 119, 117, 671,
	46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
	86, 87, 88, 94, 0, 0, 0, 0, 0, 0,
	120, 0, 0, 0, 0, 0, 0, 121, 301, 460,
	0, 0, 462, 0, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 94, 0, 0,
	0, 0, 0, 0, 0, 297, 0, 0, 0, 0,
	298, 0, 0, 112, 119, 117, 304, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 80, 81, 82, 83, 84, 85, 86, 87, 88,
	94, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 0, 0, 0, 121, 0, 118, 458, 119, 117,
	0, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 94, 0, 0, 0, 0, 0,
	0, 120, 0, 0, 0, 301, 0, 0, 121, 0,
	460, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	378, 392, 0, 304, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 94, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 393, 151, 152, 153, 154, 155, 156,
	19, 157, 158, 159, 160, 145, 144, 143, 161, 162,
	163, 164, 165, 166, 167, 168, 169, 170, 171, 172,
	173, 174, 175, 0, 139, 150, 138, 176, 177, 141,
	21, 20, 22, 178, 179, 180, 181, 147, 148, 149,
	0, 0, 25, 91, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 43, 44, 45,
	46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
	86, 87, 88, 43, 44, 45, 548, 549, 550, 551,
	552, 553, 554, 555, 556, 557, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 577, 578, 579, 580, 581,
	582, 583, 584, 585, 586, 587, 588, 542, 589, 545,
	546, 547, 327, 328, 329, 330, 331, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 349, 350, 351, 352, 353, 354,
	355, 321, 356, 357, 358, 359, 360, 361, 362, 363,
	364, 365, 366, 367, 368, 324, 325, 326, 240, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 145, 144, 143, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 0, 273, 274, 275, 276, 277, 278,
	279, 280, 281, 282, 283, 284, 285, 244, 245, 246,
	548, 549, 550, 551, 552, 553, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 580, 581, 582, 583, 584, 585, 586, 587,
	588, 486, 589, 545, 546, 547, 0, 493, 494, 495,
	496, 497, 498, 19, 499, 500, 501, 502, 0, 0,
	0, 503, 504, 505, 506, 507, 508, 509, 510, 511,
	512, 513, 514, 515, 516, 517, 488, 518, 519, 520,
	521, 522, 523, 524, 525, 526, 527, 528, 529, 530,
	490, 491, 492, 378, 372, 0, 0, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 80, 81, 82, 83, 84, 85, 86, 87, 88,
	94, 188, 0, 0, 0, 0, 0, 194, 195, 196,
	197, 198, 199, 19, 200, 201, 202, 203, 204, 205,
	206, 207, 208, 209, 210, 211, 212, 213, 214, 215,
	216, 217, 218, 219, 220, 221, 222, 223, 224, 225,
	226, 227, 190, 228, 229, 230, 231, 232, 233, 234,
	193, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 94,
}

var protoPact = [...]int16{
	161, -1000, 91, 91, 179, 139, 136, -1000, 91, 91,
	91, 100, 100, 100, 100, -1000, -1000, 207, 1172, 1126,
	1553, 1553, 1172, 1553, 179, -1000, 179, -1000, 250, 248,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 247,
	246, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 135,
	-1000, -1000, 83, -1000, -1000, 81, 79, 77, 179, 179,
	-1000, -1000, -1000, -1000, 829, 1076, 1509, 1316, 195, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 766, -1000, 229, -1000,
	-1000, -1000, 63, 1076, -1000, 91, 100, 100, 100, 91,
	100, 91, 100, 91, 91, -1000, 1264, 1553, 237, 1553,
	1553, 1459, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	20, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 62, 1509, -1000, 91, 33, 91, -1000, 133,
	1016, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 60, 1316, -1000, 91, 100,
	-1000, 1264, 1553, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 59, 195, -1000, 91,
	91, 108, -1000, 1553, 28, -1000, -1000, -1000, -1000, 953,
	32, 30, 1, -1000, 193, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1553, 1553, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 132,
	39, -1000, 157, 76, 131, 39, 38, 37, -1000, -1000,
	232, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 75, 36,
	-1000, 92, -1000, 243, -1000, -1000, -1000, -1000, 1553, 130,
	-1000, -1000, -1000, -1000, -1000, 13, -1000, -1000, -1000, -1000,
	-1000, -1000, 702, -1000, -1000, 100, 100, 67, -16, 5,
	124, 118, 239, 7, 237, 194, 1409, 236, -1000, -1000,
	245, 1553, 35, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 7, 75, -1000, 78, -1000,
	117, 235, 146, 1218, -1000, -1000, 100, 100, -1000, -1000,
	210, -1000, 335, -1000, -1000, 34, -1000, 4, 100, 106,
	1172, 105, 234, 233, 7, -1000, 1126, -1000, -1000, -1000,
	57, 1409, -1000, 91, 91, 100, -1000, 1553, 1553, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 7, -1000, -1000, 1172, -1000, -1000, -1000, -1000, 215,
	7, 13, 1362, 10, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 31, -1000, 3, -1000, -1000, 100,
	-4, 26, -1000, -1000, -1000, 2, -1000, 12, 7, -1000,
	27, -1000, 112, -1000, -1000, -1000, -1000, -1000, 111, 110,
	-1000, 8, 7, -1000, 73, 9, -1000, -10, 893, -1000,
	-1000, -1000, -18, 100, 102, 1076, 101, -1000, -20, 1126,
	829, 212, 209, 100, -1000, 208, -1000, -1000, -24, -1000,
	-1000, -1000, -1000, 54, 69, -1000, -1000, -1000, -1000, 100,
	7, -2, -1000, 52, 208, -1000, 91, -1000, -1000, -1000,
	1076, -1000, -1000, 1076, 80, -1000, -1000, -1000, 46, 45,
	65, -1000, -1000, 1076, 44, -1000,
}

var protoPgo = [...]int16{
	0, 392, 391, 390, 60, 204, 389, 342, 0, 5,
	338, 336, 213, 1, 333, 332, 331, 7, 22, 10,
	9, 330, 329, 26, 327, 326, 20, 12, 19, 325,
	43, 323, 322, 321, 320, 319, 317, 316, 31, 315,
	314, 311, 32, 13, 310, 309, 308, 28, 307, 303,
	302, 301, 300, 299, 35, 298, 297, 296, 6, 44,
	295, 8, 21, 294, 293, 292, 291, 290, 287, 48,
	27, 16, 41, 286, 285, 4, 37, 284, 283, 282,
	2, 40, 281, 279, 278, 30, 276, 275, 273, 271,
	3, 270, 269, 15, 268, 11, 14, 49, 237, 29,
}

var protoR1 = [...]int8{
	0, 1, 1, 1, 1, 1, 1, 5, 5, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 2, 3,
	6, 6, 6, 6, 6, 6, 7, 7, 8, 8,
	8, 12, 12, 15, 15, 16, 16, 17, 17, 17,
	17, 20, 20, 20, 20, 21, 21, 19, 19, 48,
	47, 47, 46, 46, 46, 46, 46, 46, 49, 49,
	49, 27, 27, 38, 38, 38, 38, 11, 11, 11,
	11, 14, 14, 14, 18, 18, 18, 18, 18, 25,
	25, 22, 22, 22, 22, 44, 44, 23, 23, 24,
	24, 24, 24, 45, 45, 39, 39, 39, 39, 40,
	40, 40, 40, 41, 41, 41, 41, 42, 42, 42,
	42, 43, 43, 43, 43, 43, 36, 36, 30, 30,
	30, 13, 10, 10, 10, 9, 9, 54, 54, 53,
	64, 64, 63, 63, 62, 62, 62, 62, 51, 51,
	55, 55, 56, 56, 57, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 74, 74, 72,
	72, 70, 70, 70, 73, 73, 71, 71, 71, 26,
	26, 67, 67, 68, 68, 69, 69, 65, 65, 66,
	66, 75, 78, 78, 77, 77, 76, 76, 76, 76,
	79, 79, 58, 61, 61, 60, 60, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 80,
	80, 80, 83, 83, 82, 82, 81, 81, 81, 52,
	52, 52, 52, 84, 87, 87, 86, 86, 85, 85,
	85, 85, 88, 89, 93, 93, 92, 92, 91, 91,
	90, 90, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 95,
	95, 94, 94, 96, 97, 98, 98, 99, 99,
}

var protoR2 = [...]int8{
	0, 2, 2, 1, 3, 3, 0, 2, 1, 2,
	2, 2, 2, 2, 2, 2, 1, 1, 3, 3,
	2, 3, 3, 1, 2, 2, 2, 1, 4, 2,
	1, 1, 1, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 2, 2, 3, 2, 1,
	1, 2, 1, 2, 2, 2, 2, 1, 3, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 4, 6,
	4, 1, 2, 2, 1, 1, 2, 2, 1, 2,
	2, 4, 5, 2, 3, 1, 3, 1, 2, 4,
	5, 2, 3, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	1, 4, 1, 3, 0, 3, 1, 8, 10, 5,
	0, 1, 2, 1, 2, 2, 2, 1, 4, 5,
	7, 9, 4, 5, 7, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 1,
	3, 1, 3, 3, 1, 3, 1, 3, 3, 1,
	2, 3, 1, 3, 1, 3, 2, 1, 3, 1,
	3, 5, 0, 1, 2, 1, 2, 2, 2, 1,
	3, 4, 5, 0, 1, 2, 1, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 1, 5, 6,
	4, 5, 4, 3, 2, 3, 2, 1, 1, 5,
	2, 1, 0, 1, 2, 1, 2, 2, 1, 5,
	6, 4, 5, 5, 0, 1, 2, 1, 2, 2,
	2, 1, 5, 8, 4, 3, 0, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 1, 1, 1, 1,
}

var protoChk = [...]int16{
	-1000, -1, -2, -3, -5, 8, 9, -4, -6, -7,
	-8, -58, -75, -80, -84, 51, 2, 10, 13, 14,
	45, 44, 46, 47, -96, 56, -96, -4, 55, 55,
	-96, -96, -96, -97, 56, -97, -97, -97, 4, 11,
	12, -38, -28, 51, 52, 53, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, -12,
	-38, 7, -27, -28, 51, -27, -38, -27, -5, -5,
	4, 4, 4, 4, 55, 58, 58, 58, 58, -15,
	-17, -19, 4, -20, -21, -27, -98, 6, 67, 5,
	58, 65, -61, -60, -59, -50, -75, -58, -80, -74,
	-54, -8, -53, -56, -67, -96, -30, -39, 40, 38,
	-57, 43, -69, 21, 20, 19, -31, 51, 52, 53,
	39, 8, 9, 10, 11, 12, 13, 15, 16, 17,
	18, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 36, 41, 42, 47, 48,
	49, 50, -78, -77, -76, -8, -79, -68, 2, -36,
	43, -69, -37, 51, 8, 9, 10, 11, 12, 13,
	15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
	25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
	35, 36, 37, 38, 39, 40, 41, 42, 44, 45,
	46, 47, 48, 49, 50, -83, -82, -81, -52, -54,
	2, -30, -40, -32, 51, 52, 53, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 22, 23,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, -87, -86, -85, -8,
	-88, -89, 2, 48, -48, -99, -47, 59, 64, -46,
	-49, 2, -11, -27, 70, 6, 5, 17, 18, 59,
	-59, -96, -97, -97, -97, -96, -97, -96, -97, -96,
	-96, 37, -42, -34, 51, 52, 53, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 36, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, -27,
	-72, -70, 5, -27, -27, -72, -65, -66, 4, -27,
	65, 59, -76, -96, -94, -96, 63, -96, 55, -73,
	-71, -26, 5, 67, 59, -81, -96, -97, -42, -27,
	59, -85, -96, -96, 56, -27, -99, -47, 63, 56,
	63, 56, 57, -25, 56, -19, -24, 70, 52, 2,
	-27, -27, 55, -95, 63, 41, 58, 55, -95, -95,
	63, 63, -29, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, -26, 63, -95, 41, 5,
	-27, 55, -93, 68, -14, -18, -19, -22, 4, -20,
	67, -27, 70, -97, -97, -45, 71, 2, -19, 71,
	61, 71, 55, 55, 5, -13, 70, -70, 5, 42,
	-64, -63, -62, -8, -51, -55, 2, -41, 37, -33,
	51, 52, 53, 8, 9, 10, 11, 12, 13, 15,
	16, 17, 18, 22, 23, 24, 25, 26, 27, 28,
	29, 30, 31, 32, 33, 34, 35, 36, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 5, 4, -27, 63, -13, -71, -26, 42, 55,
	5, 50, 49, -43, -35, 51, 52, 53, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 50,
	-97, -97, 17, 18, -44, 71, 2, -23, -18, -19,
	-95, 63, 71, -97, 56, -38, 56, 5, 5, -13,
	-10, -9, -12, 59, -62, -96, -96, -97, -27, -27,
	-13, -38, 5, -13, -93, -43, 69, -95, 63, 71,
	-97, 71, 56, -19, 71, 58, -13, -13, -95, 63,
	55, 55, 55, 64, -13, 58, 69, 71, 56, -23,
	71, -97, 56, -61, 56, 71, -9, -16, -17, -19,
	5, 5, -97, -92, -91, -90, -8, 2, 71, 59,
	58, -97, -13, 58, -13, 59, -90, -96, -61, -61,
	56, 59, 59, 58, -61, 59,
}

var protoDef = [...]int16{
	-2, -2, 0, 0, -2, 0, 0, 8, 0, 0,
	0, 0, 0, 0, 0, 16, 17, 23, 27, 30,
	0, 0, 221, 0, -2, 533, -2, 7, 0, 0,
	9, 10, 11, 12, 534, 13, 14, 15, 20, 24,
	25, 26, 63, 64, 65, 66, 486, 487, 488, 489,
	490, 491, 492, 493, 494, 495, 496, 497, 498, 499,
	500, 501, 502, 503, 504, 505, 506, 507, 508, 509,
	510, 511, 512, 513, 514, 515, 516, 517, 518, 519,
	520, 521, 522, 523, 524, 525, 526, 527, 528, 29,
	31, 32, 0, 61, 62, 0, 220, 0, -2, -2,
	18, 19, 21, 22, 0, 193, -2, -2, -2, 28,
	33, 34, 37, 38, 39, 40, 0, 41, 0, 43,
	535, 536, 0, 194, 196, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 218, 217, 0, 0,
	0, 0, 172, 118, 119, 120, 95, 96, 97, 98,
	277, 252, 253, 254, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 278, 279, 280, 281,
	282, 283, 0, -2, 185, 0, 0, 0, 189, 0,
	0, 174, 116, 117, 323, 324, 325, 326, 327, 328,
	329, 330, 331, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 358,
	359, 360, 361, 362, 363, 0, -2, 225, 0, 0,
	228, 0, 0, 99, 100, 101, 102, 284, 285, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 295, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 306,
	307, 308, 309, 310, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 322, 0, -2, 237, 0,
	0, 0, 241, 0, 0, 48, 49, 537, 538, -2,
	52, 57, 0, 67, 0, 42, 44, 45, 46, 192,
	195, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 0, 214, 107, 108, 109, 110, 402, 403, 404,
	405, 406, 407, 408, 409, 410, 411, 412, 413, 414,
	415, 416, 417, 418, 419, 420, 421, 422, 423, 424,
	425, 426, 427, 428, 429, 430, 431, 432, 433, 434,
	435, 436, 437, 438, 439, 440, 441, 442, 443, 216,
	530, 159, 161, 0, 0, 530, 530, 176, 177, 179,
	0, 181, 184, 186, 187, 531, 532, 188, 0, 530,
	164, 166, 169, 0, 219, 224, 226, 227, 0, 0,
	233, 236, 238, 239, 240, 0, 47, 51, 53, 54,
	55, 56, 0, 59, 60, 0, 0, 0, 0, 0,
	0, 213, 215, 157, 529, 0, -2, 0, 171, 175,
	529, 0, 0, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 190, 529, 173, 0, 170,
	0, 0, 0, 115, 58, 71, 0, 0, 74, 75,
	0, 78, 0, 79, 80, 530, 91, 0, 0, 0,
	0, 0, 0, 212, 210, 158, 124, 160, 162, 163,
	0, -2, 133, 0, 0, 0, 137, 0, 0, 103,
	104, 105, 106, 364, 365, 366, 367, 368, 369, 370,
	371, 372, 373, 374, 375, 376, 377, 378, 379, 380,
	381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
	391, 392, 393, 394, 395, 396, 397, 398, 399, 400,
	401, 142, 178, 180, 0, 191, 165, 167, 168, 0,
	231, 0, 115, 0, 111, 112, 113, 114, 444, 445,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
	456, 457, 458, 459, 460, 461, 462, 463, 464, 465,
	466, 467, 468, 469, 470, 471, 472, 473, 474, 475,
	476, 477, 478, 479, 480, 481, 482, 483, 484, 485,
	72, 73, 76, 77, 530, 83, 0, 85, 87, 0,
	0, 529, 92, 93, 68, 0, 70, 0, 208, 211,
	530, 122, 126, 129, 132, 134, 135, 136, 0, 0,
	143, 0, 229, 232, 242, 0, 245, 0, 529, 84,
	88, 89, 0, 0, 0, 193, 0, 209, 0, 529,
	0, 0, 0, 0, 230, -2, 244, 81, 0, 86,
	90, 94, 69, 0, 0, 121, 123, 125, 35, 0,
	138, 0, 144, 0, -2, 249, 0, 251, 82, 127,
	193, 36, 139, 193, 0, 243, 248, 250, 0, 0,
	0, 128, 140, 193, 0, 141,
}

var protoTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 77, 76, 75, 73, 3,
	68, 69, 72, 66, 63, 67, 3, 61, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 57, 56,
	65, 55, 64, 62, 78, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 70, 60, 71, 74, 3, 81, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 58, 3, 59, 80,
}

var protoTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54,
}

var protoTok3 = [...]int8{
	0,
}

var protoErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	protoDebug        = 0
	protoErrorVerbose = false
)

type protoLexer interface {
	Lex(lval *protoSymType) int
	Error(s string)
}

type protoParser interface {
	Parse(protoLexer) int
	Lookahead() int
}

type protoParserImpl struct {
	lval  protoSymType
	stack [protoInitialStackSize]protoSymType
	char  int
}

func (p *protoParserImpl) Lookahead() int {
	return p.char
}

func protoNewParser() protoParser {
	return &protoParserImpl{}
}

const protoFlag = -1000

func protoTokname(c int) string {
	if c >= 1 && c-1 < len(protoToknames) {
		if protoToknames[c-1] != "" {
			return protoToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func protoStatname(s int) string {
	if s >= 0 && s < len(protoStatenames) {
		if protoStatenames[s] != "" {
			return protoStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func protoErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !protoErrorVerbose {
		return "syntax error"
	}

	for _, e := range protoErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + protoTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(protoPact[state])
	for tok := TOKSTART; tok-1 < len(protoToknames); tok++ {
		if n := base + tok; n >= 0 && n < protoLast && int(protoChk[int(protoAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if protoDef[state] == -2 {
		i := 0
		for protoExca[i] != -1 || int(protoExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; protoExca[i] >= 0; i += 2 {
			tok := int(protoExca[i])
			if tok < TOKSTART || protoExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if protoExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += protoTokname(tok)
	}
	return res
}

func protolex1(lex protoLexer, lval *protoSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(protoTok1[0])
		goto out
	}
	if char < len(protoTok1) {
		token = int(protoTok1[char])
		goto out
	}
	if char >= protoPrivate {
		if char < protoPrivate+len(protoTok2) {
			token = int(protoTok2[char-protoPrivate])
			goto out
		}
	}
	for i := 0; i < len(protoTok3); i += 2 {
		token = int(protoTok3[i+0])
		if token == char {
			token = int(protoTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(protoTok2[1]) /* unknown char */
	}
	if protoDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", protoTokname(token), uint(char))
	}
	return char, token
}

func protoParse(protolex protoLexer) int {
	return protoNewParser().Parse(protolex)
}

func (protorcvr *protoParserImpl) Parse(protolex protoLexer) int {
	var proton int
	var protoVAL protoSymType
	var protoDollar []protoSymType
	_ = protoDollar // silence set and not used
	protoS := protorcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	protostate := 0
	protorcvr.char = -1
	prototoken := -1 // protorcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		protostate = -1
		protorcvr.char = -1
		prototoken = -1
	}()
	protop := -1
	goto protostack

ret0:
	return 0

ret1:
	return 1

protostack:
	/* put a state and value onto the stack */
	if protoDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", protoTokname(prototoken), protoStatname(protostate))
	}

	protop++
	if protop >= len(protoS) {
		nyys := make([]protoSymType, len(protoS)*2)
		copy(nyys, protoS)
		protoS = nyys
	}
	protoS[protop] = protoVAL
	protoS[protop].yys = protostate

protonewstate:
	proton = int(protoPact[protostate])
	if proton <= protoFlag {
		goto protodefault /* simple state */
	}
	if protorcvr.char < 0 {
		protorcvr.char, prototoken = protolex1(protolex, &protorcvr.lval)
	}
	proton += prototoken
	if proton < 0 || proton >= protoLast {
		goto protodefault
	}
	proton = int(protoAct[proton])
	if int(protoChk[proton]) == prototoken { /* valid shift */
		protorcvr.char = -1
		prototoken = -1
		protoVAL = protorcvr.lval
		protostate = proton
		if Errflag > 0 {
			Errflag--
		}
		goto protostack
	}

protodefault:
	/* default state action */
	proton = int(protoDef[protostate])
	if proton == -2 {
		if protorcvr.char < 0 {
			protorcvr.char, prototoken = protolex1(protolex, &protorcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if protoExca[xi+0] == -1 && int(protoExca[xi+1]) == protostate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			proton = int(protoExca[xi+0])
			if proton < 0 || proton == prototoken {
				break
			}
		}
		proton = int(protoExca[xi+1])
		if proton < 0 {
			goto ret0
		}
	}
	if proton == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			protolex.Error(protoErrorMessage(protostate, prototoken))
			Nerrs++
			if protoDebug >= 1 {
				__yyfmt__.Printf("%s", protoStatname(protostate))
				__yyfmt__.Printf(" saw %s\n", protoTokname(prototoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for protop >= 0 {
				proton = int(protoPact[protoS[protop].yys]) + protoErrCode
				if proton >= 0 && proton < protoLast {
					protostate = int(protoAct[proton]) /* simulate a shift of "error" */
					if int(protoChk[protostate]) == protoErrCode {
						goto protostack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if protoDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", protoS[protop].yys)
				}
				protop--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if protoDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", protoTokname(prototoken))
			}
			if prototoken == protoEofCode {
				goto ret1
			}
			protorcvr.char = -1
			prototoken = -1
			goto protonewstate /* try again in the same state */
		}
	}

	/* reduction by production proton */
	if protoDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", proton, protoStatname(protostate))
	}

	protont := proton
	protopt := protop
	_ = protopt // guard against "declared and not used"

	protop -= int(protoR2[proton])
	// protop is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if protop+1 >= len(protoS) {
		nyys := make([]protoSymType, len(protoS)*2)
		copy(nyys, protoS)
		protoS = nyys
	}
	protoVAL = protoS[protop+1]

	/* consult goto table to find next state */
	proton = int(protoR1[proton])
	protog := int(protoPgo[proton])
	protoj := protog + protoS[protop].yys + 1

	if protoj >= protoLast {
		protostate = int(protoAct[protog])
	} else {
		protostate = int(protoAct[protoj])
		if int(protoChk[protostate]) != -proton {
			protostate = int(protoAct[protog])
		}
	}
	// dummy call; replaced with literal code
	switch protont {

	case 1:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].syn.AddSemicolon(protoDollar[2].b)
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, protoDollar[1].syn, nil, lex.eof)
			lex.res = protoVAL.file
		}
	case 2:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].ed.AddSemicolon(protoDollar[2].b)
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNodeWithEdition(lex.info, protoDollar[1].ed, nil, lex.eof)
			lex.res = protoVAL.file
		}
	case 3:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, nil, protoDollar[1].fileElements, lex.eof)
			lex.res = protoVAL.file
		}
	case 4:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].syn.AddSemicolon(protoDollar[2].b)
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, protoDollar[1].syn, protoDollar[3].fileElements, lex.eof)
			lex.res = protoVAL.file
		}
	case 5:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].ed.AddSemicolon(protoDollar[2].b)
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNodeWithEdition(lex.info, protoDollar[1].ed, protoDollar[3].fileElements, lex.eof)
			lex.res = protoVAL.file
		}
	case 6:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, nil, nil, lex.eof)
			lex.res = protoVAL.file
		}
	case 7:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].fileElement != nil {
				protoVAL.fileElements = append(protoDollar[1].fileElements, protoDollar[2].fileElement)
			} else {
				protoVAL.fileElements = protoDollar[1].fileElements
			}
		}
	case 8:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].fileElement != nil {
				protoVAL.fileElements = []ast.FileElement{protoDollar[1].fileElement}
			} else {
				protoVAL.fileElements = nil
			}
		}
	case 9:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].imprt.AddSemicolon(protoDollar[2].b)
			protoVAL.fileElement = protoDollar[1].imprt
		}
	case 10:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].pkg.AddSemicolon(protoDollar[2].b)
			protoVAL.fileElement = protoDollar[1].pkg
		}
	case 11:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].opt.AddSemicolon(protoDollar[2].b)
			protoVAL.fileElement = protoDollar[1].opt
		}
	case 12:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].msg, protoDollar[2].b)
			protoVAL.fileElement = protoDollar[1].msg
		}
	case 13:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].en, protoDollar[2].b)
			protoVAL.fileElement = protoDollar[1].en
		}
	case 14:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].extend, protoDollar[2].b)
			protoVAL.fileElement = protoDollar[1].extend
		}
	case 15:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].svc, protoDollar[2].b)
			protoVAL.fileElement = protoDollar[1].svc
		}
	case 16:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntaxAt("unexpected identifier", protoDollar[1].id, CategoryIncompleteDecl)
			protoVAL.fileElement = ast.NewErrorNode(protoDollar[1].id)
		}
	case 17:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElement = nil
		}
	case 18:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.syn = ast.NewSyntaxNode(protoDollar[1].id.ToKeyword(), protoDollar[2].b, protoDollar[3].sv)
		}
	case 19:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.ed = ast.NewEditionNode(protoDollar[1].id.ToKeyword(), protoDollar[2].b, protoDollar[3].sv)
		}
	case 20:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.imprt = ast.NewImportNode(protoDollar[1].id.ToKeyword(), nil, nil, protoDollar[2].sv)
		}
	case 21:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.imprt = ast.NewImportNode(protoDollar[1].id.ToKeyword(), nil, protoDollar[2].id.ToKeyword(), protoDollar[3].sv)
		}
	case 22:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.imprt = ast.NewImportNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), nil, protoDollar[3].sv)
		}
	case 23:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expecting string literal or \"weak\" or \"public\"", CategoryIncompleteDecl)
			protoVAL.imprt = ast.NewIncompleteImportNode(protoDollar[1].id.ToKeyword(), nil, nil)
		}
	case 24:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expecting string literal", CategoryIncompleteDecl)
			protoVAL.imprt = ast.NewIncompleteImportNode(protoDollar[1].id.ToKeyword(), nil, protoDollar[2].id.ToKeyword())
		}
	case 25:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expecting string literal", CategoryIncompleteDecl)
			protoVAL.imprt = ast.NewIncompleteImportNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), nil)
		}
	case 26:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.pkg = ast.NewPackageNode(protoDollar[1].id.ToKeyword(), protoDollar[2].idv)
		}
	case 27:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expected package name", CategoryIncompleteDecl)
			protoVAL.pkg = ast.NewIncompletePackageNode(protoDollar[1].id.ToKeyword())
		}
	case 28:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.opt = ast.NewOptionNode(protoDollar[1].id.ToKeyword(), protoDollar[2].optName, protoDollar[3].b, protoDollar[4].v)
		}
	case 29:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expected '='", CategoryIncompleteDecl)
			protoVAL.opt = ast.NewIncompleteOptionNode(protoDollar[1].id.ToKeyword(), protoDollar[2].optName, nil, nil)
		}
	case 30:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expected option name", CategoryIncompleteDecl)
			protoVAL.opt = ast.NewIncompleteOptionNode(protoDollar[1].id.ToKeyword(), nil, nil, nil)
		}
	case 31:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.optName = ast.OptionNameNodeFromIdentValue(protoDollar[1].idv)
		}
	case 32:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.optName = protoDollar[1].optName
		}
	case 36:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].v.(*ast.MessageLiteralNode), protoDollar[2].b)
			protoVAL.v = protoDollar[1].v
		}
	case 37:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].sv
		}
	case 40:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].id
		}
	case 41:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].f
		}
	case 42:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, protoDollar[2].f)
		}
	case 43:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].i
		}
	case 44:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].i.Val > math.MaxInt64+1 {
				// can't represent as int so treat as float literal
				protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, protoDollar[2].i)
			} else {
				protoVAL.v = ast.NewNegativeIntLiteralNode(protoDollar[1].b, protoDollar[2].i)
			}
		}
	case 45:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			f := ast.NewSpecialFloatLiteralNode(protoDollar[2].id.ToKeyword())
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, f)
		}
	case 46:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			f := ast.NewSpecialFloatLiteralNode(protoDollar[2].id.ToKeyword())
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, f)
		}
	case 47:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[2].msgLitFlds == nil {
				protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, nil, nil, protoDollar[3].b)
			} else {
				fields, delimiters := protoDollar[2].msgLitFlds.toNodes()
				protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, fields, delimiters, protoDollar[3].b)
			}
		}
	case 48:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, nil, nil, protoDollar[2].b)
		}
	case 51:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].msgLitFlds != nil {
				protoDollar[1].msgLitFlds.next = protoDollar[2].msgLitFlds
				protoVAL.msgLitFlds = protoDollar[1].msgLitFlds
			} else {
				protoVAL.msgLitFlds = protoDollar[2].msgLitFlds
			}
		}
	case 52:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].msgLitFld != nil {
				protoVAL.msgLitFlds = &messageFieldList{field: protoDollar[1].msgLitFld}
			} else {
				protoVAL.msgLitFlds = nil
			}
		}
	case 53:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].msgLitFld != nil {
				protoVAL.msgLitFlds = &messageFieldList{field: protoDollar[1].msgLitFld, delimiter: protoDollar[2].b}
			} else {
				protoVAL.msgLitFlds = nil
			}
		}
	case 54:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].msgLitFld != nil {
				protoVAL.msgLitFlds = &messageFieldList{field: protoDollar[1].msgLitFld, delimiter: protoDollar[2].b}
			} else {
				protoVAL.msgLitFlds = nil
			}
		}
	case 55:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.msgLitFlds = nil
		}
	case 56:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.msgLitFlds = nil
		}
	case 57:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgLitFlds = nil
		}
	case 58:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[1].ref != nil && protoDollar[2].b != nil {
				protoVAL.msgLitFld = ast.NewMessageFieldNode(protoDollar[1].ref, protoDollar[2].b, protoDollar[3].v)
			} else {
				protoVAL.msgLitFld = nil
			}
		}
	case 59:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].ref != nil && protoDollar[2].v != nil {
				protoVAL.msgLitFld = ast.NewMessageFieldNode(protoDollar[1].ref, nil, protoDollar[2].v)
			} else {
				protoVAL.msgLitFld = nil
			}
		}
	case 60:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expected ':'", CategoryIncompleteDecl)
			protoVAL.msgLitFld = ast.NewIncompleteMessageFieldNode(protoDollar[1].ref, nil, nil)
		}
	case 61:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.id = protoDollar[1].id
		}
	case 63:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 64:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 67:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ref = ast.NewFieldReferenceNode(protoDollar[1].id)
		}
	case 68:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.ref = ast.NewExtensionFieldReferenceNode(protoDollar[1].b, protoDollar[2].idv, protoDollar[3].b)
		}
	case 69:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.ref = ast.NewAnyTypeReferenceNode(protoDollar[1].b, protoDollar[2].idv, protoDollar[3].b, protoDollar[4].idv, protoDollar[5].b)
		}
	case 70:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.ref = nil
		}
	case 72:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].v.(*ast.MessageLiteralNode), protoDollar[2].b)
			protoVAL.v = protoDollar[1].v
		}
	case 73:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].v.(*ast.ArrayLiteralNode), protoDollar[2].b)
			protoVAL.v = protoDollar[1].v
		}
	case 74:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].sv
		}
	case 76:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			kw := protoDollar[2].id.ToKeyword()
			f := ast.NewSpecialFloatLiteralNode(kw)
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, f)
		}
	case 77:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			kw := protoDollar[2].id.ToKeyword()
			f := ast.NewSpecialFloatLiteralNode(kw)
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, f)
		}
	case 78:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].id
		}
	case 79:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].v.(*ast.MessageLiteralNode), protoDollar[2].b)
			protoVAL.v = protoDollar[1].v
		}
	case 80:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].v.(*ast.ArrayLiteralNode), protoDollar[2].b)
			protoVAL.v = protoDollar[1].v
		}
	case 81:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			if protoDollar[2].sl == nil {
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[4].b)
			} else {
				if protoDollar[3].b != nil {
					protoDollar[2].sl.commas = append(protoDollar[2].sl.commas, protoDollar[3].b)
				}
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, protoDollar[2].sl.vals, protoDollar[2].sl.commas, protoDollar[4].b)
			}
		}
	case 82:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			if protoDollar[2].sl == nil {
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[5].b)
			} else {
				if protoDollar[3].b != nil {
					protoDollar[2].sl.commas = append(protoDollar[2].sl.commas, protoDollar[3].b)
				}
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, protoDollar[2].sl.vals, protoDollar[2].sl.commas, protoDollar[5].b)
			}
		}
	case 83:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[2].b)
		}
	case 84:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[3].b)
		}
	case 85:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.sl = &valueSlices{vals: []ast.ValueNode{protoDollar[1].v}}
		}
	case 86:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].sl.vals = append(protoDollar[1].sl.vals, protoDollar[3].v)
			protoDollar[1].sl.commas = append(protoDollar[1].sl.commas, protoDollar[2].b)
			protoVAL.sl = protoDollar[1].sl
		}
	case 88:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].v.(*ast.MessageLiteralNode), protoDollar[2].b)
			protoVAL.v = protoDollar[1].v
		}
	case 89:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			if protoDollar[2].sl == nil {
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[4].b)
			} else {
				if protoDollar[3].b != nil {
					protoDollar[2].sl.commas = append(protoDollar[2].sl.commas, protoDollar[3].b)
				}
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, protoDollar[2].sl.vals, protoDollar[2].sl.commas, protoDollar[4].b)
			}
		}
	case 90:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			if protoDollar[2].sl == nil {
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[5].b)
			} else {
				if protoDollar[3].b != nil {
					protoDollar[2].sl.commas = append(protoDollar[2].sl.commas, protoDollar[3].b)
				}
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, protoDollar[2].sl.vals, protoDollar[2].sl.commas, protoDollar[5].b)
			}
		}
	case 91:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[2].b)
		}
	case 92:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[3].b)
		}
	case 93:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].v.(*ast.MessageLiteralNode), protoDollar[2].b)
			protoVAL.sl = &valueSlices{vals: []ast.ValueNode{protoDollar[1].v}}
		}
	case 94:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[3].v.(*ast.MessageLiteralNode), protoDollar[4].b)
			protoDollar[1].sl.vals = append(protoDollar[1].sl.vals, protoDollar[3].v)
			protoDollar[1].sl.commas = append(protoDollar[1].sl.commas, protoDollar[2].b)
			protoVAL.sl = protoDollar[1].sl
		}
	case 95:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 96:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 99:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 100:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 103:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 104:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 107:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 108:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 111:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 112:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 115:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expected message type", CategoryIncompleteDecl)
			protoVAL.idv = nil
		}
	case 117:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.id = protoDollar[1].id
		}
	case 121:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].opts.commas = append(protoDollar[2].opts.commas, protoDollar[3].b)
			}
			if len(protoDollar[2].opts.options) == 0 {
				protolex.(*protoLex).ErrExtendedSyntax("compact options list cannot be empty", CategoryEmptyDecl)
			}
			protoVAL.cmpctOpts = ast.NewCompactOptionsNode(protoDollar[1].b, protoDollar[2].opts.options, protoDollar[2].opts.commas, protoDollar[4].b)
		}
	case 122:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.opts = &compactOptionSlices{options: []*ast.OptionNode{protoDollar[1].opt}}
		}
	case 123:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if len(protoDollar[1].opts.options) == 0 {
				protolex.(*protoLex).ErrExtendedSyntaxAt("expected option before ','", protoDollar[2].b, CategoryExtraTokens)
			}
			protoDollar[1].opts.options = append(protoDollar[1].opts.options, protoDollar[3].opt)
			protoDollar[1].opts.commas = append(protoDollar[1].opts.commas, protoDollar[2].b)
			protoVAL.opts = protoDollar[1].opts
		}
	case 124:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.opts = &compactOptionSlices{options: []*ast.OptionNode{}}
		}
	case 125:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.opt = ast.NewCompactOptionNode(protoDollar[1].optName, protoDollar[2].b, protoDollar[3].v)
		}
	case 126:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expected '='", CategoryIncompleteDecl)
			protoVAL.opt = ast.NewIncompleteCompactOptionNode(protoDollar[1].optName, nil, nil)
		}
	case 127:
		protoDollar = protoS[protopt-8 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil, protoDollar[6].b, protoDollar[7].msgElements, protoDollar[8].b)
		}
	case 128:
		protoDollar = protoS[protopt-10 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts, protoDollar[8].b, protoDollar[9].msgElements, protoDollar[10].b)
		}
	case 129:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.oo = ast.NewOneofNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].ooElements, protoDollar[5].b)
		}
	case 130:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.ooElements = nil
		}
	case 132:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].ooElement != nil {
				protoVAL.ooElements = append(protoDollar[1].ooElements, protoDollar[2].ooElement)
			} else {
				protoVAL.ooElements = protoDollar[1].ooElements
			}
		}
	case 133:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].ooElement != nil {
				protoVAL.ooElements = []ast.OneofElement{protoDollar[1].ooElement}
			} else {
				protoVAL.ooElements = nil
			}
		}
	case 134:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].opt.AddSemicolon(protoDollar[2].b)
			protoVAL.ooElement = protoDollar[1].opt
		}
	case 135:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].fld.AddSemicolon(protoDollar[2].b)
			protoVAL.ooElement = protoDollar[1].fld
		}
	case 136:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].grp, protoDollar[2].b)
			protoVAL.ooElement = protoDollar[1].grp
		}
	case 137:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ooElement = nil
		}
	case 138:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].idv, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil)
		}
	case 139:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].idv, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts)
		}
	case 140:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(nil, protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil, protoDollar[5].b, protoDollar[6].msgElements, protoDollar[7].b)
		}
	case 141:
		protoDollar = protoS[protopt-9 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(nil, protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts, protoDollar[7].b, protoDollar[8].msgElements, protoDollar[9].b)
		}
	case 142:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.mapFld = ast.NewMapFieldNode(protoDollar[1].mapType, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil)
		}
	case 143:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.mapFld = ast.NewMapFieldNode(protoDollar[1].mapType, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts)
		}
	case 144:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			protoVAL.mapType = ast.NewMapTypeNode(protoDollar[1].id.ToKeyword(), protoDollar[2].b, protoDollar[3].id, protoDollar[4].b, protoDollar[5].idv, protoDollar[6].b)
			ast.AddVirtualSemicolon(protoVAL.mapType, protoDollar[7].b)
		}
	case 157:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].rngs.commas = append(protoDollar[2].rngs.commas, protoDollar[3].b)
			}
			protoVAL.ext = ast.NewExtensionRangeNode(protoDollar[1].id.ToKeyword(), protoDollar[2].rngs.ranges, protoDollar[2].rngs.commas, nil)
		}
	case 158:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].rngs.commas = append(protoDollar[2].rngs.commas, protoDollar[3].b)
			}
			protoVAL.ext = ast.NewExtensionRangeNode(protoDollar[1].id.ToKeyword(), protoDollar[2].rngs.ranges, protoDollar[2].rngs.commas, protoDollar[4].cmpctOpts)
		}
	case 159:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rngs = &rangeSlices{ranges: []*ast.RangeNode{protoDollar[1].rng}}
		}
	case 160:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].rngs.ranges = append(protoDollar[1].rngs.ranges, protoDollar[3].rng)
			protoDollar[1].rngs.commas = append(protoDollar[1].rngs.commas, protoDollar[2].b)
			protoVAL.rngs = protoDollar[1].rngs
		}
	case 161:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].i, nil, nil, nil)
		}
	case 162:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].i, protoDollar[2].id.ToKeyword(), protoDollar[3].i, nil)
		}
	case 163:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].i, protoDollar[2].id.ToKeyword(), nil, protoDollar[3].id.ToKeyword())
		}
	case 164:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rngs = &rangeSlices{ranges: []*ast.RangeNode{protoDollar[1].rng}}
		}
	case 165:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].rngs.ranges = append(protoDollar[1].rngs.ranges, protoDollar[3].rng)
			protoDollar[1].rngs.commas = append(protoDollar[1].rngs.commas, protoDollar[2].b)
			protoVAL.rngs = protoDollar[1].rngs
		}
	case 166:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].il, nil, nil, nil)
		}
	case 167:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].il, protoDollar[2].id.ToKeyword(), protoDollar[3].il, nil)
		}
	case 168:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].il, protoDollar[2].id.ToKeyword(), nil, protoDollar[3].id.ToKeyword())
		}
	case 169:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.il = protoDollar[1].i
		}
	case 170:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.il = ast.NewNegativeIntLiteralNode(protoDollar[1].b, protoDollar[2].i)
		}
	case 171:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].rngs.commas = append(protoDollar[2].rngs.commas, protoDollar[3].b)
			}
			protoVAL.resvd = ast.NewReservedRangesNode(protoDollar[1].id.ToKeyword(), protoDollar[2].rngs.ranges, protoDollar[2].rngs.commas)
		}
	case 173:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].rngs.commas = append(protoDollar[2].rngs.commas, protoDollar[3].b)
			}
			protoVAL.resvd = ast.NewReservedRangesNode(protoDollar[1].id.ToKeyword(), protoDollar[2].rngs.ranges, protoDollar[2].rngs.commas)
		}
	case 175:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].names.commas = append(protoDollar[2].names.commas, protoDollar[3].b)
			}
			protoVAL.resvd = ast.NewReservedNamesNode(protoDollar[1].id.ToKeyword(), protoDollar[2].names.names, protoDollar[2].names.commas)
		}
	case 176:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.resvd = ast.NewReservedIdentifiersNode(protoDollar[1].id.ToKeyword(), protoDollar[2].names.idents, protoDollar[2].names.commas)
		}
	case 177:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.names = &nameSlices{names: []ast.StringValueNode{protoDollar[1].sv}}
		}
	case 178:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].names.names = append(protoDollar[1].names.names, protoDollar[3].sv)
			protoDollar[1].names.commas = append(protoDollar[1].names.commas, protoDollar[2].b)
			protoVAL.names = protoDollar[1].names
		}
	case 179:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.names = &nameSlices{idents: []*ast.IdentNode{protoDollar[1].id}}
		}
	case 180:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].names.idents = append(protoDollar[1].names.idents, protoDollar[3].id)
			protoDollar[1].names.commas = append(protoDollar[1].names.commas, protoDollar[2].b)
			protoVAL.names = protoDollar[1].names
		}
	case 181:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.en = ast.NewEnumNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].enElements, protoDollar[5].b)
		}
	case 182:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.enElements = nil
		}
	case 184:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].enElement != nil {
				protoVAL.enElements = append(protoDollar[1].enElements, protoDollar[2].enElement)
			} else {
				protoVAL.enElements = protoDollar[1].enElements
			}
		}
	case 185:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].enElement != nil {
				protoVAL.enElements = []ast.EnumElement{protoDollar[1].enElement}
			} else {
				protoVAL.enElements = nil
			}
		}
	case 186:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].opt.AddSemicolon(protoDollar[2].b)
			protoVAL.enElement = protoDollar[1].opt
		}
	case 187:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].env.AddSemicolon(protoDollar[2].b)
			protoVAL.enElement = protoDollar[1].env
		}
	case 188:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].resvd.AddSemicolon(protoDollar[2].b)
			protoVAL.enElement = protoDollar[1].resvd
		}
	case 189:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.enElement = nil
		}
	case 190:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.env = ast.NewEnumValueNode(protoDollar[1].id, protoDollar[2].b, protoDollar[3].il, nil)
		}
	case 191:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.env = ast.NewEnumValueNode(protoDollar[1].id, protoDollar[2].b, protoDollar[3].il, protoDollar[4].cmpctOpts)
		}
	case 192:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.msg = ast.NewMessageNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].msgElements, protoDollar[5].b)
		}
	case 193:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.msgElements = nil
		}
	case 195:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].msgElement != nil {
				protoVAL.msgElements = append(protoDollar[1].msgElements, protoDollar[2].msgElement)
			} else {
				protoVAL.msgElements = protoDollar[1].msgElements
			}
		}
	case 196:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].msgElement != nil {
				protoVAL.msgElements = []ast.MessageElement{protoDollar[1].msgElement}
			} else {
				protoVAL.msgElements = nil
			}
		}
	case 197:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].fld.AddSemicolon(protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].fld
		}
	case 198:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].en, protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].en
		}
	case 199:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].msg, protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].msg
		}
	case 200:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].extend, protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].extend
		}
	case 201:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].ext.AddSemicolon(protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].ext
		}
	case 202:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].grp, protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].grp
		}
	case 203:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].opt.AddSemicolon(protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].opt
		}
	case 204:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].oo, protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].oo
		}
	case 205:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].mapFld.AddSemicolon(protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].mapFld
		}
	case 206:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].resvd.AddSemicolon(protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].resvd
		}
	case 207:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = ast.NewEmptyDeclNode(protoDollar[1].b)
		}
	case 208:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].idv, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil)
		}
	case 209:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].idv, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts)
		}
	case 210:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].idv, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil)
		}
	case 211:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].idv, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts)
		}
	case 212:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing field number after '='", CategoryIncompleteDecl)
			protoVAL.fld = ast.NewIncompleteFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].idv, protoDollar[3].id, protoDollar[4].b, nil, nil)
		}
	case 213:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing '=' after field name", CategoryIncompleteDecl)
			protoVAL.fld = ast.NewIncompleteFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].idv, protoDollar[3].id, nil, nil, nil)
		}
	case 214:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing field name", CategoryIncompleteDecl)
			protoVAL.fld = ast.NewIncompleteFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].idv, nil, nil, nil, nil)
		}
	case 215:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing field number after '='", CategoryIncompleteDecl)
			protoVAL.fld = ast.NewIncompleteFieldNode(nil, protoDollar[1].idv, protoDollar[2].id, protoDollar[3].b, nil, nil)
		}
	case 216:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing '=' after field name", CategoryIncompleteDecl)
			protoVAL.fld = ast.NewIncompleteFieldNode(nil, protoDollar[1].idv, protoDollar[2].id, nil, nil, nil)
		}
	case 217:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing field name", CategoryIncompleteDecl)
			protoVAL.fld = ast.NewIncompleteFieldNode(nil, protoDollar[1].idv, nil, nil, nil, nil)
		}
	case 218:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing field type", CategoryIncompleteDecl)
			protoVAL.fld = ast.NewIncompleteFieldNode(protoDollar[1].id.ToKeyword(), nil, nil, nil, nil, nil)
		}
	case 219:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.extend = ast.NewExtendNode(protoDollar[1].id.ToKeyword(), protoDollar[2].idv, protoDollar[3].b, protoDollar[4].extElements, protoDollar[5].b)
		}
	case 220:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expected '{'", CategoryIncompleteDecl)
			protoVAL.extend = ast.NewIncompleteExtendNode(protoDollar[1].id.ToKeyword(), protoDollar[2].idv)
		}
	case 221:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expected message name", CategoryIncompleteDecl)
			protoVAL.extend = ast.NewIncompleteExtendNode(protoDollar[1].id.ToKeyword(), nil)
		}
	case 222:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.extElements = nil
		}
	case 224:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].extElement != nil {
				protoVAL.extElements = append(protoDollar[1].extElements, protoDollar[2].extElement)
			} else {
				protoVAL.extElements = protoDollar[1].extElements
			}
		}
	case 225:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].extElement != nil {
				protoVAL.extElements = []ast.ExtendElement{protoDollar[1].extElement}
			} else {
				protoVAL.extElements = nil
			}
		}
	case 226:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].fld.AddSemicolon(protoDollar[2].b)
			protoVAL.extElement = protoDollar[1].fld
		}
	case 227:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].grp, protoDollar[2].b)
			protoVAL.extElement = protoDollar[1].grp
		}
	case 228:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.extElement = nil
		}
	case 229:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].idv, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil)
		}
	case 230:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].idv, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts)
		}
	case 231:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].idv, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil)
		}
	case 232:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].idv, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts)
		}
	case 233:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.svc = ast.NewServiceNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].svcElements, protoDollar[5].b)
		}
	case 234:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.svcElements = nil
		}
	case 236:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].svcElement != nil {
				protoVAL.svcElements = append(protoDollar[1].svcElements, protoDollar[2].svcElement)
			} else {
				protoVAL.svcElements = protoDollar[1].svcElements
			}
		}
	case 237:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].svcElement != nil {
				protoVAL.svcElements = []ast.ServiceElement{protoDollar[1].svcElement}
			} else {
				protoVAL.svcElements = nil
			}
		}
	case 238:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].opt.AddSemicolon(protoDollar[2].b)
			protoVAL.svcElement = protoDollar[1].opt
		}
	case 239:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].mtd.AddSemicolon(protoDollar[2].b)
			protoVAL.svcElement = protoDollar[1].mtd
		}
	case 240:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].mtd, protoDollar[2].b)
			protoVAL.svcElement = protoDollar[1].mtd
		}
	case 241:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.svcElement = nil
		}
	case 242:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.mtd = ast.NewRPCNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].mtdMsgType, protoDollar[4].id.ToKeyword(), protoDollar[5].mtdMsgType)
		}
	case 243:
		protoDollar = protoS[protopt-8 : protopt+1]
		{
			protoVAL.mtd = ast.NewRPCNodeWithBody(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].mtdMsgType, protoDollar[4].id.ToKeyword(), protoDollar[5].mtdMsgType, protoDollar[6].b, protoDollar[7].mtdElements, protoDollar[8].b)
		}
	case 244:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			if protoDollar[3].idv == nil {
				protoVAL.mtdMsgType = ast.NewIncompleteRPCTypeNode(protoDollar[1].b, protoDollar[2].id.ToKeyword(), nil, protoDollar[4].b)
			} else {
				protoVAL.mtdMsgType = ast.NewRPCTypeNode(protoDollar[1].b, protoDollar[2].id.ToKeyword(), protoDollar[3].idv, protoDollar[4].b)
			}
		}
	case 245:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[2].idv == nil {
				protoVAL.mtdMsgType = ast.NewIncompleteRPCTypeNode(protoDollar[1].b, nil, nil, protoDollar[3].b)
			} else {
				protoVAL.mtdMsgType = ast.NewRPCTypeNode(protoDollar[1].b, nil, protoDollar[2].idv, protoDollar[3].b)
			}
		}
	case 246:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.mtdElements = nil
		}
	case 248:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].mtdElement != nil {
				protoVAL.mtdElements = append(protoDollar[1].mtdElements, protoDollar[2].mtdElement)
			} else {
				protoVAL.mtdElements = protoDollar[1].mtdElements
			}
		}
	case 249:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].mtdElement != nil {
				protoVAL.mtdElements = []ast.RPCElement{protoDollar[1].mtdElement}
			} else {
				protoVAL.mtdElements = nil
			}
		}
	case 250:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].opt.AddSemicolon(protoDollar[2].b)
			protoVAL.mtdElement = protoDollar[1].opt
		}
	case 251:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.mtdElement = nil
		}
	case 529:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntaxAt("unexpected trailing comma", protoDollar[1].b, CategoryExtraTokens)
			protoVAL.b = protoDollar[1].b
		}
	case 530:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.b = nil
		}
	case 531:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.b = protoDollar[1].b
		}
	case 532:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntaxAt("expected ';', found ','", protoDollar[1].b, CategoryIncorrectToken)
			protoVAL.b = protoDollar[1].b
		}
	case 533:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].b.Virtual {
				protolex.(*protoLex).ErrExtendedSyntaxAt("expected ';'", protoDollar[1].b, CategoryMissingToken)
			}
			protoVAL.b = protoDollar[1].b
		}
	case 534:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if !protoDollar[1].b.Virtual {
				protolex.(*protoLex).ErrExtendedSyntaxAt("unexpected ';'", protoDollar[1].b, CategoryExtraTokens)
			}
			protoVAL.b = protoDollar[1].b
		}
	case 535:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.b = protoDollar[1].b
		}
	case 536:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.b = protoDollar[1].b
		}
	case 537:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.b = protoDollar[1].b
		}
	case 538:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.b = protoDollar[1].b
		}
	}
	goto protostack /* stack new state and value */
}
