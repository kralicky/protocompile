// Code generated by goyacc -o proto.y.go -l -p proto proto.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

//lint:file-ignore SA4006 generated parser has unused values

import (
	"math"

	"github.com/kralicky/protocompile/ast"
)

type protoSymType struct {
	yys          int
	file         *ast.FileNode
	syn          *ast.SyntaxNode
	ed           *ast.EditionNode
	fileElement  ast.FileElement
	fileElements []ast.FileElement
	pkg          *ast.PackageNode
	imprt        *ast.ImportNode
	msg          *ast.MessageNode
	msgElement   ast.MessageElement
	msgElements  []ast.MessageElement
	fld          *ast.FieldNode
	mapFld       *ast.MapFieldNode
	mapType      *ast.MapTypeNode
	grp          *ast.GroupNode
	oo           *ast.OneofNode
	ooElement    ast.OneofElement
	ooElements   []ast.OneofElement
	ext          *ast.ExtensionRangeNode
	resvd        *ast.ReservedNode
	en           *ast.EnumNode
	enElement    ast.EnumElement
	enElements   []ast.EnumElement
	env          *ast.EnumValueNode
	extend       *ast.ExtendNode
	extElement   ast.ExtendElement
	extElements  []ast.ExtendElement
	svc          *ast.ServiceNode
	svcElement   ast.ServiceElement
	svcElements  []ast.ServiceElement
	mtd          *ast.RPCNode
	mtdMsgType   *ast.RPCTypeNode
	mtdElement   ast.RPCElement
	mtdElements  []ast.RPCElement
	opt          *ast.OptionNode
	opts         *compactOptionSlices
	ref          *ast.FieldReferenceNode
	refp         *fieldRefParens
	optName      *ast.OptionNameNode
	cmpctOpts    *ast.CompactOptionsNode
	rng          *ast.RangeNode
	rngs         *rangeSlices
	names        *nameSlices
	cid          *identSlices
	xid          *identSlices
	idv          ast.IdentValueNode
	sl           *valueSlices
	msgLitFlds   *messageFieldList
	msgLitFld    *ast.MessageFieldNode
	v            ast.ValueNode
	il           ast.IntValueNode
	sv           ast.StringValueNode
	i            *ast.UintLiteralNode
	f            *ast.FloatLiteralNode
	id           *ast.IdentNode
	b            *ast.RuneNode
	err          error
}

const _STRING_LIT = 57346
const _INT_LIT = 57347
const _FLOAT_LIT = 57348
const _EXTENSION_IDENT = 57349
const _SYNTAX = 57350
const _EDITION = 57351
const _IMPORT = 57352
const _WEAK = 57353
const _PUBLIC = 57354
const _PACKAGE = 57355
const _OPTION = 57356
const _TRUE = 57357
const _FALSE = 57358
const _INF = 57359
const _NAN = 57360
const _REPEATED = 57361
const _OPTIONAL = 57362
const _REQUIRED = 57363
const _DOUBLE = 57364
const _FLOAT = 57365
const _INT32 = 57366
const _INT64 = 57367
const _UINT32 = 57368
const _UINT64 = 57369
const _SINT32 = 57370
const _SINT64 = 57371
const _FIXED32 = 57372
const _FIXED64 = 57373
const _SFIXED32 = 57374
const _SFIXED64 = 57375
const _BOOL = 57376
const _STRING = 57377
const _BYTES = 57378
const _GROUP = 57379
const _ONEOF = 57380
const _MAP = 57381
const _EXTENSIONS = 57382
const _TO = 57383
const _MAX = 57384
const _RESERVED = 57385
const _ENUM = 57386
const _MESSAGE = 57387
const _EXTEND = 57388
const _SERVICE = 57389
const _RPC = 57390
const _STREAM = 57391
const _RETURNS = 57392
const _SINGULAR_IDENT = 57393
const _QUALIFIED_IDENT = 57394
const _FULLY_QUALIFIED_IDENT = 57395
const _ERROR = 57396

var protoToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"_STRING_LIT",
	"_INT_LIT",
	"_FLOAT_LIT",
	"_EXTENSION_IDENT",
	"_SYNTAX",
	"_EDITION",
	"_IMPORT",
	"_WEAK",
	"_PUBLIC",
	"_PACKAGE",
	"_OPTION",
	"_TRUE",
	"_FALSE",
	"_INF",
	"_NAN",
	"_REPEATED",
	"_OPTIONAL",
	"_REQUIRED",
	"_DOUBLE",
	"_FLOAT",
	"_INT32",
	"_INT64",
	"_UINT32",
	"_UINT64",
	"_SINT32",
	"_SINT64",
	"_FIXED32",
	"_FIXED64",
	"_SFIXED32",
	"_SFIXED64",
	"_BOOL",
	"_STRING",
	"_BYTES",
	"_GROUP",
	"_ONEOF",
	"_MAP",
	"_EXTENSIONS",
	"_TO",
	"_MAX",
	"_RESERVED",
	"_ENUM",
	"_MESSAGE",
	"_EXTEND",
	"_SERVICE",
	"_RPC",
	"_STREAM",
	"_RETURNS",
	"_SINGULAR_IDENT",
	"_QUALIFIED_IDENT",
	"_FULLY_QUALIFIED_IDENT",
	"_ERROR",
	"'='",
	"';'",
	"':'",
	"'{'",
	"'}'",
	"'\\\\'",
	"'/'",
	"'?'",
	"','",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'('",
	"')'",
	"'['",
	"']'",
	"'*'",
	"'&'",
	"'^'",
	"'%'",
	"'$'",
	"'#'",
	"'@'",
	"'!'",
	"'~'",
	"'`'",
}

var protoStatenames = [...]string{}

const protoEofCode = 1
const protoErrCode = 2
const protoInitialStackSize = 16

var protoExca = [...]int16{
	-1, 0,
	1, 6,
	-2, 0,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 4,
	1, 3,
	-2, 0,
	-1, 24,
	1, 1,
	-2, 0,
	-1, 26,
	1, 2,
	-2, 0,
	-1, 97,
	1, 4,
	-2, 0,
	-1, 98,
	1, 5,
	-2, 0,
	-1, 105,
	59, 174,
	-2, 0,
	-1, 106,
	59, 212,
	-2, 0,
	-1, 107,
	59, 224,
	-2, 0,
	-1, 182,
	59, 175,
	-2, 0,
	-1, 235,
	59, 213,
	-2, 0,
	-1, 286,
	59, 225,
	-2, 0,
	-1, 298,
	59, 48,
	64, 48,
	-2, 0,
	-1, 427,
	59, 122,
	-2, 0,
	-1, 478,
	59, 123,
	-2, 0,
	-1, 640,
	59, 236,
	-2, 0,
	-1, 659,
	59, 237,
	-2, 0,
}

const protoPrivate = 57344

const protoLast = 1430

var protoAct = [...]int16{
	10, 472, 13, 660, 12, 606, 11, 424, 121, 92,
	594, 593, 592, 540, 134, 453, 89, 24, 26, 479,
	113, 392, 295, 30, 31, 32, 391, 287, 41, 41,
	372, 294, 41, 323, 129, 40, 236, 135, 183, 95,
	141, 91, 94, 371, 96, 123, 663, 650, 645, 629,
	624, 597, 468, 473, 7, 641, 111, 118, 115, 27,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 93, 621, 130, 184, 127, 288, 125,
	119, 126, 668, 464, 110, 109, 643, 120, 117, 116,
	467, 627, 459, 130, 473, 127, 630, 125, 393, 126,
	466, 642, 454, 393, 381, 302, 626, 296, 473, 312,
	638, 238, 297, 316, 240, 318, 190, 320, 321, 415,
	413, 119, 27, 27, 634, 119, 678, 370, 120, 374,
	375, 380, 120, 418, 412, 535, 410, 623, 311, 119,
	25, 411, 596, 409, 637, 531, 120, 387, 447, 432,
	431, 425, 463, 184, 376, 16, 680, 675, 677, 676,
	394, 5, 6, 17, 670, 394, 18, 19, 664, 384,
	386, 388, 608, 401, 395, 382, 310, 665, 640, 427,
	380, 107, 106, 105, 16, 104, 25, 666, 657, 649,
	647, 383, 17, 190, 646, 18, 19, 21, 20, 22,
	23, 625, 612, 601, 15, 599, 598, 588, 587, 420,
	461, 460, 405, 398, 319, 317, 315, 314, 313, 36,
	35, 34, 397, 33, 636, 635, 21, 20, 22, 23,
	536, 470, 400, 15, 469, 452, 428, 538, 423, 389,
	238, 103, 396, 240, 399, 29, 28, 449, 291, 475,
	426, 4, 656, 655, 617, 607, 603, 288, 602, 419,
	19, 434, 435, 436, 437, 438, 439, 440, 441, 442,
	443, 444, 445, 403, 404, 88, 97, 537, 98, 528,
	309, 307, 416, 406, 402, 662, 476, 306, 304, 302,
	373, 408, 308, 37, 292, 407, 483, 19, 471, 305,
	38, 39, 490, 491, 492, 493, 494, 495, 19, 496,
	497, 498, 499, 421, 422, 450, 500, 501, 502, 503,
	504, 505, 506, 507, 508, 509, 510, 511, 512, 513,
	514, 485, 515, 516, 517, 518, 519, 520, 521, 522,
	523, 524, 525, 526, 527, 487, 488, 489, 529, 102,
	101, 100, 99, 114, 429, 430, 385, 658, 659, 290,
	289, 285, 286, 14, 234, 235, 185, 181, 448, 182,
	128, 390, 186, 133, 378, 377, 477, 478, 122, 139,
	132, 446, 482, 131, 237, 481, 124, 299, 293, 298,
	451, 462, 589, 484, 457, 456, 241, 136, 480, 465,
	191, 188, 541, 324, 486, 242, 145, 433, 414, 417,
	458, 112, 652, 108, 455, 301, 605, 9, 532, 8,
	3, 2, 1, 530, 0, 0, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	595, 534, 0, 604, 533, 0, 0, 41, 0, 480,
	0, 0, 0, 41, 600, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 610, 611, 0, 609, 0,
	0, 0, 0, 0, 0, 613, 614, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	615, 0, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 41, 0, 0, 0, 0, 0, 0, 616, 0,
	0, 0, 0, 620, 619, 0, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 554, 555, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 585, 622, 586, 542,
	543, 544, 0, 0, 631, 632, 0, 628, 0, 0,
	0, 0, 0, 633, 0, 0, 0, 0, 0, 639,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 130, 0, 127, 0, 125, 644, 126, 0, 648,
	651, 661, 0, 0, 41, 0, 654, 653, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 667, 669, 0,
	661, 0, 0, 671, 0, 0, 130, 0, 127, 130,
	125, 127, 126, 125, 673, 126, 672, 674, 0, 130,
	0, 127, 0, 125, 0, 126, 591, 679, 111, 118,
	115, 0, 45, 46, 47, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
	83, 84, 85, 86, 87, 93, 0, 0, 0, 0,
	0, 0, 119, 0, 0, 0, 0, 0, 0, 120,
	117, 116, 111, 118, 115, 590, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 80, 81, 82, 83, 84, 85, 86, 87, 93,
	0, 0, 0, 0, 0, 0, 119, 0, 0, 0,
	300, 0, 0, 120, 117, 116, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 80, 81, 82, 83, 84, 85, 86, 87, 93,
	0, 0, 0, 0, 0, 0, 0, 296, 0, 0,
	0, 0, 297, 300, 0, 0, 0, 0, 303, 45,
	46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
	86, 87, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 379, 393,
	0, 303, 45, 46, 47, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
	83, 84, 85, 86, 87, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 394, 150, 151, 152, 153, 154, 155, 19, 156,
	157, 158, 159, 144, 143, 142, 160, 161, 162, 163,
	164, 165, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 0, 138, 149, 137, 175, 176, 140, 21, 20,
	22, 177, 178, 179, 180, 146, 147, 148, 0, 0,
	25, 90, 45, 46, 47, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
	83, 84, 85, 86, 87, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 81, 82, 83, 84, 85, 86,
	87, 42, 43, 44, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 554, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 539, 586, 542, 543, 544,
	328, 329, 330, 331, 332, 333, 334, 335, 336, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 322,
	357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 325, 326, 327, 239, 0, 0, 0,
	0, 0, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 144, 143, 142, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 0, 272, 273, 274, 275, 276, 277, 278, 279,
	280, 281, 282, 283, 284, 243, 244, 245, 379, 373,
	0, 0, 45, 46, 47, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
	83, 84, 85, 86, 87, 93, 187, 0, 0, 0,
	0, 0, 193, 194, 195, 196, 197, 198, 19, 199,
	200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
	210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
	220, 221, 222, 223, 224, 225, 226, 189, 227, 228,
	229, 230, 231, 232, 233, 192, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 80, 81, 82, 83, 84, 85, 86, 87, 93,
}

var protoPact = [...]int16{
	183, -1000, 160, 160, 212, 221, 220, -1000, 160, 160,
	160, 197, 195, 194, 193, -1000, -1000, 319, 1090, 1044,
	1378, 1378, 1090, 1378, 212, -1000, 212, -1000, 378, 377,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 376, 375,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 216, -1000,
	-1000, 157, -1000, -1000, 155, 154, 153, 212, 212, -1000,
	-1000, -1000, -1000, 748, 994, 1334, 1234, 276, -1000, -1000,
	-1000, -1000, -1000, -1000, 808, -1000, 312, 305, -1000, -1000,
	-1000, 147, 994, -1000, 160, 192, 191, 190, 160, 189,
	160, 188, 160, 160, -1000, 1182, 1378, 315, 1378, 1378,
	1284, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 69,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 146, 1334, -1000, 160, 114, 160, -1000, 214, 934,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 145, 1234, -1000, 160, 187, -1000,
	1182, 1378, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 144, 276, -1000, 160, 160,
	186, -1000, 1378, 78, -1000, -1000, -1000, -1000, 871, 110,
	108, 93, -1000, 237, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1378, 1378, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	213, 118, -1000, 239, 151, 211, 118, 117, 116, -1000,
	-1000, 267, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 128,
	115, -1000, 236, -1000, 340, -1000, -1000, -1000, -1000, 1378,
	210, -1000, -1000, -1000, -1000, -1000, 64, -1000, -1000, -1000,
	-1000, -1000, -1000, 52, -1000, -1000, 185, 184, 111, 59,
	-19, 209, 206, 323, -17, 315, 274, 324, 304, -1000,
	-1000, 374, 1378, 112, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -17, 128, -1000, 123,
	-1000, 205, 302, 217, 1136, -1000, -1000, 182, 181, 684,
	-1000, -1000, 109, -1000, -20, 180, 179, 1090, 177, 283,
	281, -17, -1000, 1044, -1000, -1000, -1000, 143, 324, -1000,
	160, 160, 176, -1000, 1378, 1378, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -17, -1000,
	-1000, 1090, -1000, -1000, -1000, -1000, 279, -17, 64, 548,
	35, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 104,
	-1000, -21, -1000, -1000, 175, 65, 97, -1000, -1000, -1000,
	-22, -1000, 68, -17, -1000, 91, -1000, 200, -1000, -1000,
	-1000, -1000, -1000, 199, 119, -1000, 76, -17, -1000, 150,
	-14, -1000, 60, 748, -1000, -1000, -1000, -23, 168, 164,
	994, 163, -1000, -24, 1044, 748, 278, 277, 162, -1000,
	313, -1000, -1000, -25, -1000, -1000, -1000, -1000, 139, 149,
	-1000, -1000, -1000, -1000, 161, -17, 54, -1000, 135, 313,
	-1000, 160, -1000, -1000, -1000, 994, -1000, -1000, 994, 131,
	-1000, -1000, -1000, 130, 129, 98, -1000, -1000, 994, 127,
	-1000,
}

var protoPgo = [...]int16{
	0, 452, 451, 450, 54, 281, 449, 447, 0, 5,
	446, 445, 285, 1, 444, 443, 442, 11, 10, 441,
	440, 12, 439, 438, 21, 20, 9, 437, 37, 436,
	435, 434, 433, 432, 431, 430, 16, 427, 426, 423,
	33, 13, 422, 421, 419, 22, 418, 417, 416, 415,
	414, 413, 34, 412, 410, 409, 6, 45, 408, 8,
	19, 407, 406, 405, 404, 403, 402, 40, 30, 26,
	43, 401, 400, 4, 38, 399, 397, 396, 2, 36,
	395, 394, 393, 27, 392, 391, 390, 389, 3, 388,
	387, 15, 386, 7, 14, 383, 31,
}

var protoR1 = [...]int8{
	0, 1, 1, 1, 1, 1, 1, 5, 5, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 2, 3,
	6, 6, 6, 7, 7, 8, 8, 8, 12, 12,
	15, 15, 16, 16, 17, 17, 17, 19, 19, 19,
	19, 19, 19, 19, 19, 18, 18, 46, 45, 45,
	44, 44, 44, 44, 44, 44, 47, 47, 47, 25,
	25, 36, 36, 36, 36, 11, 11, 11, 11, 14,
	14, 14, 23, 23, 20, 20, 20, 20, 42, 42,
	21, 21, 22, 22, 22, 22, 43, 43, 37, 37,
	37, 37, 38, 38, 38, 38, 39, 39, 39, 39,
	40, 40, 40, 40, 41, 41, 41, 41, 34, 34,
	28, 28, 28, 13, 10, 10, 10, 9, 9, 52,
	52, 51, 62, 62, 61, 61, 60, 60, 60, 60,
	49, 49, 53, 53, 54, 54, 55, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 72,
	72, 70, 70, 68, 68, 68, 71, 71, 69, 69,
	69, 24, 24, 65, 65, 66, 66, 67, 67, 63,
	63, 64, 64, 73, 76, 76, 75, 75, 74, 74,
	74, 74, 77, 77, 56, 59, 59, 58, 58, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 78, 81, 81, 80, 80, 79, 79, 79, 50,
	50, 50, 50, 82, 85, 85, 84, 84, 83, 83,
	83, 83, 86, 87, 91, 91, 90, 90, 89, 89,
	88, 88, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 93,
	93, 92, 92, 94, 95, 95, 96, 96,
}

var protoR2 = [...]int8{
	0, 2, 2, 1, 3, 3, 0, 2, 1, 2,
	2, 2, 2, 2, 2, 2, 1, 1, 3, 3,
	2, 3, 3, 2, 1, 4, 2, 1, 1, 1,
	1, 1, 1, 2, 1, 1, 1, 1, 2, 2,
	2, 2, 1, 2, 2, 3, 2, 1, 1, 2,
	1, 2, 2, 2, 2, 1, 3, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 4, 6, 4, 1,
	2, 2, 2, 2, 4, 5, 2, 3, 1, 3,
	1, 2, 4, 5, 2, 3, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 1, 3, 0, 3, 1, 8,
	10, 5, 0, 1, 2, 1, 2, 2, 2, 1,
	4, 5, 7, 9, 4, 5, 7, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 1, 3, 1, 3, 3, 1, 3, 1, 3,
	3, 1, 2, 3, 1, 3, 1, 3, 2, 1,
	3, 1, 3, 5, 0, 1, 2, 1, 2, 2,
	2, 1, 3, 4, 5, 0, 1, 2, 1, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	5, 6, 4, 5, 4, 3, 2, 3, 2, 1,
	1, 5, 0, 1, 2, 1, 2, 2, 1, 5,
	6, 4, 5, 5, 0, 1, 2, 1, 2, 2,
	2, 1, 5, 8, 4, 3, 0, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 1, 1, 1,
}

var protoChk = [...]int16{
	-1000, -1, -2, -3, -5, 8, 9, -4, -6, -7,
	-8, -56, -73, -78, -82, 51, 2, 10, 13, 14,
	45, 44, 46, 47, -94, 56, -94, -4, 55, 55,
	-94, -94, -94, 56, 56, 56, 56, 4, 11, 12,
	-36, -26, 51, 52, 53, 8, 9, 10, 11, 12,
	13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
	23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
	33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
	43, 44, 45, 46, 47, 48, 49, 50, -12, -36,
	7, -25, -26, 51, -25, -36, -25, -5, -5, 4,
	4, 4, 4, 55, 58, 58, 58, 58, -15, -17,
	-18, 4, -19, -25, -95, 6, 67, 66, 5, 58,
	65, -59, -58, -57, -48, -73, -56, -78, -72, -52,
	-8, -51, -54, -65, -94, -28, -37, 40, 38, -55,
	43, -67, 21, 20, 19, -29, 51, 52, 53, 39,
	8, 9, 10, 11, 12, 13, 15, 16, 17, 18,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 41, 42, 47, 48, 49,
	50, -76, -75, -74, -8, -77, -66, 2, -34, 43,
	-67, -35, 51, 8, 9, 10, 11, 12, 13, 15,
	16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
	26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
	36, 37, 38, 39, 40, 41, 42, 44, 45, 46,
	47, 48, 49, 50, -81, -80, -79, -50, -52, 2,
	-28, -38, -30, 51, 52, 53, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 22, 23, 24,
	25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
	35, 36, 38, 39, 40, 41, 42, 43, 44, 45,
	46, 47, 48, 49, 50, -85, -84, -83, -8, -86,
	-87, 2, 48, -46, -96, -45, 59, 64, -44, -47,
	2, -11, -25, 70, 6, 17, 5, 6, 17, 5,
	59, -57, -94, 56, 56, 56, -94, 56, -94, 56,
	-94, -94, 37, -40, -32, 51, 52, 53, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
	-25, -70, -68, 5, -25, -25, -70, -63, -64, 4,
	-25, 65, 59, -74, -94, -92, -94, 63, -94, 55,
	-71, -69, -24, 5, 67, 59, -79, -94, 56, -40,
	-25, 59, -83, -94, -94, 56, -25, -96, -45, 63,
	56, 63, 56, 57, -23, 56, -18, -22, 70, 52,
	2, -25, -25, 55, -93, 63, 41, 58, 55, -93,
	-93, 63, 63, -27, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, -24, 63, -93, 41,
	5, -25, 55, -91, 68, -14, -17, -18, -20, 70,
	56, 56, -43, 71, 2, -18, 71, 61, 71, 55,
	55, 5, -13, 70, -68, 5, 42, -62, -61, -60,
	-8, -49, -53, 2, -39, 37, -31, 51, 52, 53,
	8, 9, 10, 11, 12, 13, 15, 16, 17, 18,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 38, 39, 40, 41, 42,
	43, 44, 45, 46, 47, 48, 49, 50, 5, 4,
	-25, 63, -13, -69, -24, 42, 55, 5, 50, 49,
	-41, -33, 51, 52, 53, 8, 9, 10, 11, 12,
	13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
	23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
	33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
	43, 44, 45, 46, 47, 48, 50, 56, 56, -42,
	71, 2, -21, -17, -18, -93, 63, 71, 56, 56,
	-36, 56, 5, 5, -13, -10, -9, -12, 59, -60,
	-94, -94, 56, -25, -25, -13, -36, 5, -13, -91,
	-41, 69, -93, 63, 71, 56, 71, 56, -18, 71,
	58, -13, -13, -93, 63, 55, 55, 55, 64, -13,
	58, 69, 71, 56, -21, 71, 56, 56, -59, 56,
	71, -9, -16, -17, -18, 5, 5, 56, -90, -89,
	-88, -8, 2, 71, 59, 58, 56, -13, 58, -13,
	59, -88, -94, -59, -59, 56, 59, 59, 58, -59,
	59,
}

var protoDef = [...]int16{
	-2, -2, 0, 0, -2, 0, 0, 8, 0, 0,
	0, 0, 0, 0, 0, 16, 17, 0, 24, 27,
	0, 0, 0, 0, -2, 523, -2, 7, 0, 0,
	9, 10, 11, 12, 13, 14, 15, 20, 0, 0,
	23, 61, 62, 63, 64, 476, 477, 478, 479, 480,
	481, 482, 483, 484, 485, 486, 487, 488, 489, 490,
	491, 492, 493, 494, 495, 496, 497, 498, 499, 500,
	501, 502, 503, 504, 505, 506, 507, 508, 509, 510,
	511, 512, 513, 514, 515, 516, 517, 518, 26, 28,
	29, 0, 59, 60, 0, 0, 0, -2, -2, 18,
	19, 21, 22, 0, 185, -2, -2, -2, 25, 30,
	31, 34, 35, 36, 0, 37, 0, 0, 42, 524,
	525, 0, 186, 188, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 210, 209, 0, 0, 0,
	0, 164, 110, 111, 112, 88, 89, 90, 91, 267,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 268, 269, 270, 271, 272,
	273, 0, -2, 177, 0, 0, 0, 181, 0, 0,
	166, 108, 109, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 323, 324, 325, 326, 327, 328, 329,
	330, 331, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 349,
	350, 351, 352, 353, 0, -2, 215, 0, 0, 218,
	0, 0, 92, 93, 94, 95, 274, 275, 276, 277,
	278, 279, 280, 281, 282, 283, 284, 285, 286, 287,
	288, 289, 290, 291, 292, 293, 294, 295, 296, 297,
	298, 299, 300, 301, 302, 303, 304, 305, 306, 307,
	308, 309, 310, 311, 312, 0, -2, 227, 0, 0,
	0, 231, 0, 0, 46, 47, 526, 527, -2, 50,
	55, 0, 65, 0, 38, 41, 44, 39, 40, 43,
	184, 187, 189, 190, 191, 192, 193, 194, 195, 196,
	197, 198, 0, 206, 100, 101, 102, 103, 392, 393,
	394, 395, 396, 397, 398, 399, 400, 401, 402, 403,
	404, 405, 406, 407, 408, 409, 410, 411, 412, 413,
	414, 415, 416, 417, 418, 419, 420, 421, 422, 423,
	424, 425, 426, 427, 428, 429, 430, 431, 432, 433,
	208, 520, 151, 153, 0, 0, 520, 520, 168, 169,
	171, 0, 173, 176, 178, 179, 521, 522, 180, 0,
	520, 156, 158, 161, 0, 211, 214, 216, 217, 0,
	0, 223, 226, 228, 229, 230, 0, 45, 49, 51,
	52, 53, 54, 0, 57, 58, 0, 0, 0, 0,
	0, 0, 205, 207, 149, 519, 0, -2, 0, 163,
	167, 519, 0, 0, 137, 138, 139, 140, 141, 142,
	143, 144, 145, 146, 147, 148, 182, 519, 165, 0,
	162, 0, 0, 0, 0, 56, 69, 0, 0, 0,
	72, 73, 520, 84, 0, 0, 0, 0, 0, 0,
	204, 202, 150, 116, 152, 154, 155, 0, -2, 125,
	0, 0, 0, 129, 0, 0, 96, 97, 98, 99,
	354, 355, 356, 357, 358, 359, 360, 361, 362, 363,
	364, 365, 366, 367, 368, 369, 370, 371, 372, 373,
	374, 375, 376, 377, 378, 379, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 134, 170,
	172, 0, 183, 157, 159, 160, 0, 221, 0, 0,
	0, 104, 105, 106, 107, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 457, 458,
	459, 460, 461, 462, 463, 464, 465, 466, 467, 468,
	469, 470, 471, 472, 473, 474, 475, 70, 71, 520,
	76, 0, 78, 80, 0, 0, 519, 85, 86, 66,
	0, 68, 0, 200, 203, 520, 114, 118, 121, 124,
	126, 127, 128, 0, 0, 135, 0, 219, 222, 232,
	0, 235, 0, 519, 77, 81, 82, 0, 0, 0,
	185, 0, 201, 0, 519, 0, 0, 0, 0, 220,
	-2, 234, 74, 0, 79, 83, 87, 67, 0, 0,
	113, 115, 117, 32, 0, 130, 0, 136, 0, -2,
	239, 0, 241, 75, 119, 185, 33, 131, 185, 0,
	233, 238, 240, 0, 0, 0, 120, 132, 185, 0,
	133,
}

var protoTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 77, 76, 75, 73, 3,
	68, 69, 72, 66, 63, 67, 3, 61, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 57, 56,
	65, 55, 64, 62, 78, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 70, 60, 71, 74, 3, 81, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 58, 3, 59, 80,
}

var protoTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54,
}

var protoTok3 = [...]int8{
	0,
}

var protoErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	protoDebug        = 0
	protoErrorVerbose = false
)

type protoLexer interface {
	Lex(lval *protoSymType) int
	Error(s string)
}

type protoParser interface {
	Parse(protoLexer) int
	Lookahead() int
}

type protoParserImpl struct {
	lval  protoSymType
	stack [protoInitialStackSize]protoSymType
	char  int
}

func (p *protoParserImpl) Lookahead() int {
	return p.char
}

func protoNewParser() protoParser {
	return &protoParserImpl{}
}

const protoFlag = -1000

func protoTokname(c int) string {
	if c >= 1 && c-1 < len(protoToknames) {
		if protoToknames[c-1] != "" {
			return protoToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func protoStatname(s int) string {
	if s >= 0 && s < len(protoStatenames) {
		if protoStatenames[s] != "" {
			return protoStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func protoErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !protoErrorVerbose {
		return "syntax error"
	}

	for _, e := range protoErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + protoTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(protoPact[state])
	for tok := TOKSTART; tok-1 < len(protoToknames); tok++ {
		if n := base + tok; n >= 0 && n < protoLast && int(protoChk[int(protoAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if protoDef[state] == -2 {
		i := 0
		for protoExca[i] != -1 || int(protoExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; protoExca[i] >= 0; i += 2 {
			tok := int(protoExca[i])
			if tok < TOKSTART || protoExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if protoExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += protoTokname(tok)
	}
	return res
}

func protolex1(lex protoLexer, lval *protoSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(protoTok1[0])
		goto out
	}
	if char < len(protoTok1) {
		token = int(protoTok1[char])
		goto out
	}
	if char >= protoPrivate {
		if char < protoPrivate+len(protoTok2) {
			token = int(protoTok2[char-protoPrivate])
			goto out
		}
	}
	for i := 0; i < len(protoTok3); i += 2 {
		token = int(protoTok3[i+0])
		if token == char {
			token = int(protoTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(protoTok2[1]) /* unknown char */
	}
	if protoDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", protoTokname(token), uint(char))
	}
	return char, token
}

func protoParse(protolex protoLexer) int {
	return protoNewParser().Parse(protolex)
}

func (protorcvr *protoParserImpl) Parse(protolex protoLexer) int {
	var proton int
	var protoVAL protoSymType
	var protoDollar []protoSymType
	_ = protoDollar // silence set and not used
	protoS := protorcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	protostate := 0
	protorcvr.char = -1
	prototoken := -1 // protorcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		protostate = -1
		protorcvr.char = -1
		prototoken = -1
	}()
	protop := -1
	goto protostack

ret0:
	return 0

ret1:
	return 1

protostack:
	/* put a state and value onto the stack */
	if protoDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", protoTokname(prototoken), protoStatname(protostate))
	}

	protop++
	if protop >= len(protoS) {
		nyys := make([]protoSymType, len(protoS)*2)
		copy(nyys, protoS)
		protoS = nyys
	}
	protoS[protop] = protoVAL
	protoS[protop].yys = protostate

protonewstate:
	proton = int(protoPact[protostate])
	if proton <= protoFlag {
		goto protodefault /* simple state */
	}
	if protorcvr.char < 0 {
		protorcvr.char, prototoken = protolex1(protolex, &protorcvr.lval)
	}
	proton += prototoken
	if proton < 0 || proton >= protoLast {
		goto protodefault
	}
	proton = int(protoAct[proton])
	if int(protoChk[proton]) == prototoken { /* valid shift */
		protorcvr.char = -1
		prototoken = -1
		protoVAL = protorcvr.lval
		protostate = proton
		if Errflag > 0 {
			Errflag--
		}
		goto protostack
	}

protodefault:
	/* default state action */
	proton = int(protoDef[protostate])
	if proton == -2 {
		if protorcvr.char < 0 {
			protorcvr.char, prototoken = protolex1(protolex, &protorcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if protoExca[xi+0] == -1 && int(protoExca[xi+1]) == protostate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			proton = int(protoExca[xi+0])
			if proton < 0 || proton == prototoken {
				break
			}
		}
		proton = int(protoExca[xi+1])
		if proton < 0 {
			goto ret0
		}
	}
	if proton == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			protolex.Error(protoErrorMessage(protostate, prototoken))
			Nerrs++
			if protoDebug >= 1 {
				__yyfmt__.Printf("%s", protoStatname(protostate))
				__yyfmt__.Printf(" saw %s\n", protoTokname(prototoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for protop >= 0 {
				proton = int(protoPact[protoS[protop].yys]) + protoErrCode
				if proton >= 0 && proton < protoLast {
					protostate = int(protoAct[proton]) /* simulate a shift of "error" */
					if int(protoChk[protostate]) == protoErrCode {
						goto protostack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if protoDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", protoS[protop].yys)
				}
				protop--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if protoDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", protoTokname(prototoken))
			}
			if prototoken == protoEofCode {
				goto ret1
			}
			protorcvr.char = -1
			prototoken = -1
			goto protonewstate /* try again in the same state */
		}
	}

	/* reduction by production proton */
	if protoDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", proton, protoStatname(protostate))
	}

	protont := proton
	protopt := protop
	_ = protopt // guard against "declared and not used"

	protop -= int(protoR2[proton])
	// protop is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if protop+1 >= len(protoS) {
		nyys := make([]protoSymType, len(protoS)*2)
		copy(nyys, protoS)
		protoS = nyys
	}
	protoVAL = protoS[protop+1]

	/* consult goto table to find next state */
	proton = int(protoR1[proton])
	protog := int(protoPgo[proton])
	protoj := protog + protoS[protop].yys + 1

	if protoj >= protoLast {
		protostate = int(protoAct[protog])
	} else {
		protostate = int(protoAct[protoj])
		if int(protoChk[protostate]) != -proton {
			protostate = int(protoAct[protog])
		}
	}
	// dummy call; replaced with literal code
	switch protont {

	case 1:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].syn.AddSemicolon(protoDollar[2].b)
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, protoDollar[1].syn, nil, lex.eof)
			lex.res = protoVAL.file
		}
	case 2:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].ed.AddSemicolon(protoDollar[2].b)
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNodeWithEdition(lex.info, protoDollar[1].ed, nil, lex.eof)
			lex.res = protoVAL.file
		}
	case 3:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, nil, protoDollar[1].fileElements, lex.eof)
			lex.res = protoVAL.file
		}
	case 4:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].syn.AddSemicolon(protoDollar[2].b)
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, protoDollar[1].syn, protoDollar[3].fileElements, lex.eof)
			lex.res = protoVAL.file
		}
	case 5:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].ed.AddSemicolon(protoDollar[2].b)
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNodeWithEdition(lex.info, protoDollar[1].ed, protoDollar[3].fileElements, lex.eof)
			lex.res = protoVAL.file
		}
	case 6:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, nil, nil, lex.eof)
			lex.res = protoVAL.file
		}
	case 7:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].fileElement != nil {
				protoVAL.fileElements = append(protoDollar[1].fileElements, protoDollar[2].fileElement)
			} else {
				protoVAL.fileElements = protoDollar[1].fileElements
			}
		}
	case 8:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].fileElement != nil {
				protoVAL.fileElements = []ast.FileElement{protoDollar[1].fileElement}
			} else {
				protoVAL.fileElements = nil
			}
		}
	case 9:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].imprt.AddSemicolon(protoDollar[2].b)
			protoVAL.fileElement = protoDollar[1].imprt
		}
	case 10:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].pkg.AddSemicolon(protoDollar[2].b)
			protoVAL.fileElement = protoDollar[1].pkg
		}
	case 11:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].opt.AddSemicolon(protoDollar[2].b)
			protoVAL.fileElement = protoDollar[1].opt
		}
	case 12:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].msg, protoDollar[2].b)
			protoVAL.fileElement = protoDollar[1].msg
		}
	case 13:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].en, protoDollar[2].b)
			protoVAL.fileElement = protoDollar[1].en
		}
	case 14:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].extend, protoDollar[2].b)
			protoVAL.fileElement = protoDollar[1].extend
		}
	case 15:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].svc, protoDollar[2].b)
			protoVAL.fileElement = protoDollar[1].svc
		}
	case 16:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntaxAt("unexpected identifier", protoDollar[1].id, CategoryIncompleteDecl)
			protoVAL.fileElement = ast.NewErrorNode(protoDollar[1].id)
		}
	case 17:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElement = nil
		}
	case 18:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.syn = ast.NewSyntaxNode(protoDollar[1].id.ToKeyword(), protoDollar[2].b, protoDollar[3].sv)
		}
	case 19:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.ed = ast.NewEditionNode(protoDollar[1].id.ToKeyword(), protoDollar[2].b, protoDollar[3].sv)
		}
	case 20:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.imprt = ast.NewImportNode(protoDollar[1].id.ToKeyword(), nil, nil, protoDollar[2].sv)
		}
	case 21:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.imprt = ast.NewImportNode(protoDollar[1].id.ToKeyword(), nil, protoDollar[2].id.ToKeyword(), protoDollar[3].sv)
		}
	case 22:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.imprt = ast.NewImportNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), nil, protoDollar[3].sv)
		}
	case 23:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.pkg = ast.NewPackageNode(protoDollar[1].id.ToKeyword(), protoDollar[2].idv)
		}
	case 24:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expected package name", CategoryIncompleteDecl)
			protoVAL.pkg = ast.NewIncompletePackageNode(protoDollar[1].id.ToKeyword())

		}
	case 25:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.opt = ast.NewOptionNode(protoDollar[1].id.ToKeyword(), protoDollar[2].optName, protoDollar[3].b, protoDollar[4].v)
		}
	case 26:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expected '='", CategoryIncompleteDecl)
			protoVAL.opt = ast.NewIncompleteOptionNode(protoDollar[1].id.ToKeyword(), protoDollar[2].optName, nil, nil)
		}
	case 27:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expected option name", CategoryIncompleteDecl)
			protoVAL.opt = ast.NewIncompleteOptionNode(protoDollar[1].id.ToKeyword(), nil, nil, nil)
		}
	case 28:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.optName = ast.OptionNameNodeFromIdentValue(protoDollar[1].idv)
		}
	case 29:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.optName = protoDollar[1].optName
		}
	case 33:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].v.(*ast.MessageLiteralNode), protoDollar[2].b)
			protoVAL.v = protoDollar[1].v
		}
	case 34:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].sv
		}
	case 36:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].id
		}
	case 37:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].f
		}
	case 38:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, protoDollar[2].f)
		}
	case 39:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, protoDollar[2].f)
		}
	case 40:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			f := ast.NewSpecialFloatLiteralNode(protoDollar[2].id.ToKeyword())
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, f)
		}
	case 41:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			f := ast.NewSpecialFloatLiteralNode(protoDollar[2].id.ToKeyword())
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, f)
		}
	case 42:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].i
		}
	case 43:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewPositiveUintLiteralNode(protoDollar[1].b, protoDollar[2].i)
		}
	case 44:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].i.Val > math.MaxInt64+1 {
				// can't represent as int so treat as float literal
				protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, protoDollar[2].i)
			} else {
				protoVAL.v = ast.NewNegativeIntLiteralNode(protoDollar[1].b, protoDollar[2].i)
			}
		}
	case 45:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[2].msgLitFlds == nil {
				protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, nil, nil, protoDollar[3].b)
			} else {
				fields, delimiters := protoDollar[2].msgLitFlds.toNodes()
				protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, fields, delimiters, protoDollar[3].b)
			}
		}
	case 46:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, nil, nil, protoDollar[2].b)
		}
	case 49:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].msgLitFlds != nil {
				protoDollar[1].msgLitFlds.next = protoDollar[2].msgLitFlds
				protoVAL.msgLitFlds = protoDollar[1].msgLitFlds
			} else {
				protoVAL.msgLitFlds = protoDollar[2].msgLitFlds
			}
		}
	case 50:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].msgLitFld != nil {
				protoVAL.msgLitFlds = &messageFieldList{field: protoDollar[1].msgLitFld}
			} else {
				protoVAL.msgLitFlds = nil
			}
		}
	case 51:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].msgLitFld != nil {
				protoVAL.msgLitFlds = &messageFieldList{field: protoDollar[1].msgLitFld, delimiter: protoDollar[2].b}
			} else {
				protoVAL.msgLitFlds = nil
			}
		}
	case 52:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].msgLitFld != nil {
				protoVAL.msgLitFlds = &messageFieldList{field: protoDollar[1].msgLitFld, delimiter: protoDollar[2].b}
			} else {
				protoVAL.msgLitFlds = nil
			}
		}
	case 53:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.msgLitFlds = nil
		}
	case 54:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.msgLitFlds = nil
		}
	case 55:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgLitFlds = nil
		}
	case 56:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[1].ref != nil && protoDollar[2].b != nil {
				protoVAL.msgLitFld = ast.NewMessageFieldNode(protoDollar[1].ref, protoDollar[2].b, protoDollar[3].v)
			} else {
				protoVAL.msgLitFld = nil
			}
		}
	case 57:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].ref != nil && protoDollar[2].v != nil {
				protoVAL.msgLitFld = ast.NewMessageFieldNode(protoDollar[1].ref, nil, protoDollar[2].v)
			} else {
				protoVAL.msgLitFld = nil
			}
		}
	case 58:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expected ':'", CategoryIncompleteDecl)
			protoVAL.msgLitFld = ast.NewIncompleteMessageFieldNode(protoDollar[1].ref, nil, nil)
		}
	case 59:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.id = protoDollar[1].id
		}
	case 61:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 62:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 65:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ref = ast.NewFieldReferenceNode(protoDollar[1].id)
		}
	case 66:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.ref = ast.NewExtensionFieldReferenceNode(protoDollar[1].b, protoDollar[2].idv, protoDollar[3].b)
		}
	case 67:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.ref = ast.NewAnyTypeReferenceNode(protoDollar[1].b, protoDollar[2].idv, protoDollar[3].b, protoDollar[4].idv, protoDollar[5].b)
		}
	case 68:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.ref = nil
		}
	case 70:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].v.(*ast.MessageLiteralNode), protoDollar[2].b)
			protoVAL.v = protoDollar[1].v
		}
	case 71:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].v.(*ast.ArrayLiteralNode), protoDollar[2].b)
			protoVAL.v = protoDollar[1].v
		}
	case 72:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].v.(*ast.MessageLiteralNode), protoDollar[2].b)
			protoVAL.v = protoDollar[1].v
		}
	case 73:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].v.(*ast.ArrayLiteralNode), protoDollar[2].b)
			protoVAL.v = protoDollar[1].v
		}
	case 74:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			if protoDollar[2].sl == nil {
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[4].b)
			} else {
				if protoDollar[3].b != nil {
					protoDollar[2].sl.commas = append(protoDollar[2].sl.commas, protoDollar[3].b)
				}
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, protoDollar[2].sl.vals, protoDollar[2].sl.commas, protoDollar[4].b)
			}
		}
	case 75:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			if protoDollar[2].sl == nil {
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[5].b)
			} else {
				if protoDollar[3].b != nil {
					protoDollar[2].sl.commas = append(protoDollar[2].sl.commas, protoDollar[3].b)
				}
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, protoDollar[2].sl.vals, protoDollar[2].sl.commas, protoDollar[5].b)
			}
		}
	case 76:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[2].b)
		}
	case 77:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[3].b)
		}
	case 78:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.sl = &valueSlices{vals: []ast.ValueNode{protoDollar[1].v}}
		}
	case 79:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].sl.vals = append(protoDollar[1].sl.vals, protoDollar[3].v)
			protoDollar[1].sl.commas = append(protoDollar[1].sl.commas, protoDollar[2].b)
			protoVAL.sl = protoDollar[1].sl
		}
	case 81:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].v.(*ast.MessageLiteralNode), protoDollar[2].b)
			protoVAL.v = protoDollar[1].v
		}
	case 82:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			if protoDollar[2].sl == nil {
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[4].b)
			} else {
				if protoDollar[3].b != nil {
					protoDollar[2].sl.commas = append(protoDollar[2].sl.commas, protoDollar[3].b)
				}
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, protoDollar[2].sl.vals, protoDollar[2].sl.commas, protoDollar[4].b)
			}
		}
	case 83:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			if protoDollar[2].sl == nil {
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[5].b)
			} else {
				if protoDollar[3].b != nil {
					protoDollar[2].sl.commas = append(protoDollar[2].sl.commas, protoDollar[3].b)
				}
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, protoDollar[2].sl.vals, protoDollar[2].sl.commas, protoDollar[5].b)
			}
		}
	case 84:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[2].b)
		}
	case 85:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[3].b)
		}
	case 86:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].v.(*ast.MessageLiteralNode), protoDollar[2].b)
			protoVAL.sl = &valueSlices{vals: []ast.ValueNode{protoDollar[1].v}}
		}
	case 87:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[3].v.(*ast.MessageLiteralNode), protoDollar[4].b)
			protoDollar[1].sl.vals = append(protoDollar[1].sl.vals, protoDollar[3].v)
			protoDollar[1].sl.commas = append(protoDollar[1].sl.commas, protoDollar[2].b)
			protoVAL.sl = protoDollar[1].sl
		}
	case 88:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 89:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 92:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 93:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 96:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 97:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 100:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 101:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 104:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 105:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 109:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.id = protoDollar[1].id
		}
	case 113:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].opts.commas = append(protoDollar[2].opts.commas, protoDollar[3].b)
			}
			if len(protoDollar[2].opts.options) == 0 {
				protolex.(*protoLex).ErrExtendedSyntax("compact options list cannot be empty", CategoryEmptyDecl)
			}
			protoVAL.cmpctOpts = ast.NewCompactOptionsNode(protoDollar[1].b, protoDollar[2].opts.options, protoDollar[2].opts.commas, protoDollar[4].b)
		}
	case 114:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.opts = &compactOptionSlices{options: []*ast.OptionNode{protoDollar[1].opt}}
		}
	case 115:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if len(protoDollar[1].opts.options) == 0 {
				protolex.(*protoLex).ErrExtendedSyntaxAt("expected option before ','", protoDollar[2].b, CategoryExtraTokens)
			}
			protoDollar[1].opts.options = append(protoDollar[1].opts.options, protoDollar[3].opt)
			protoDollar[1].opts.commas = append(protoDollar[1].opts.commas, protoDollar[2].b)
			protoVAL.opts = protoDollar[1].opts
		}
	case 116:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.opts = &compactOptionSlices{options: []*ast.OptionNode{}}
		}
	case 117:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.opt = ast.NewCompactOptionNode(protoDollar[1].optName, protoDollar[2].b, protoDollar[3].v)
		}
	case 118:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expected '='", CategoryIncompleteDecl)
			protoVAL.opt = ast.NewIncompleteCompactOptionNode(protoDollar[1].optName, nil, nil)
		}
	case 119:
		protoDollar = protoS[protopt-8 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil, protoDollar[6].b, protoDollar[7].msgElements, protoDollar[8].b)
		}
	case 120:
		protoDollar = protoS[protopt-10 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts, protoDollar[8].b, protoDollar[9].msgElements, protoDollar[10].b)
		}
	case 121:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.oo = ast.NewOneofNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].ooElements, protoDollar[5].b)
		}
	case 122:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.ooElements = nil
		}
	case 124:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].ooElement != nil {
				protoVAL.ooElements = append(protoDollar[1].ooElements, protoDollar[2].ooElement)
			} else {
				protoVAL.ooElements = protoDollar[1].ooElements
			}
		}
	case 125:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].ooElement != nil {
				protoVAL.ooElements = []ast.OneofElement{protoDollar[1].ooElement}
			} else {
				protoVAL.ooElements = nil
			}
		}
	case 126:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].opt.AddSemicolon(protoDollar[2].b)
			protoVAL.ooElement = protoDollar[1].opt
		}
	case 127:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].fld.AddSemicolon(protoDollar[2].b)
			protoVAL.ooElement = protoDollar[1].fld
		}
	case 128:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].grp, protoDollar[2].b)
			protoVAL.ooElement = protoDollar[1].grp
		}
	case 129:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ooElement = nil
		}
	case 130:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].idv, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil)
		}
	case 131:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].idv, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts)
		}
	case 132:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(nil, protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil, protoDollar[5].b, protoDollar[6].msgElements, protoDollar[7].b)
		}
	case 133:
		protoDollar = protoS[protopt-9 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(nil, protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts, protoDollar[7].b, protoDollar[8].msgElements, protoDollar[9].b)
		}
	case 134:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.mapFld = ast.NewMapFieldNode(protoDollar[1].mapType, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil)
		}
	case 135:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.mapFld = ast.NewMapFieldNode(protoDollar[1].mapType, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts)
		}
	case 136:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			protoVAL.mapType = ast.NewMapTypeNode(protoDollar[1].id.ToKeyword(), protoDollar[2].b, protoDollar[3].id, protoDollar[4].b, protoDollar[5].idv, protoDollar[6].b)
			ast.AddVirtualSemicolon(protoVAL.mapType, protoDollar[7].b)
		}
	case 149:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].rngs.commas = append(protoDollar[2].rngs.commas, protoDollar[3].b)
			}
			protoVAL.ext = ast.NewExtensionRangeNode(protoDollar[1].id.ToKeyword(), protoDollar[2].rngs.ranges, protoDollar[2].rngs.commas, nil)
		}
	case 150:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].rngs.commas = append(protoDollar[2].rngs.commas, protoDollar[3].b)
			}
			protoVAL.ext = ast.NewExtensionRangeNode(protoDollar[1].id.ToKeyword(), protoDollar[2].rngs.ranges, protoDollar[2].rngs.commas, protoDollar[4].cmpctOpts)
		}
	case 151:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rngs = &rangeSlices{ranges: []*ast.RangeNode{protoDollar[1].rng}}
		}
	case 152:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].rngs.ranges = append(protoDollar[1].rngs.ranges, protoDollar[3].rng)
			protoDollar[1].rngs.commas = append(protoDollar[1].rngs.commas, protoDollar[2].b)
			protoVAL.rngs = protoDollar[1].rngs
		}
	case 153:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].i, nil, nil, nil)
		}
	case 154:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].i, protoDollar[2].id.ToKeyword(), protoDollar[3].i, nil)
		}
	case 155:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].i, protoDollar[2].id.ToKeyword(), nil, protoDollar[3].id.ToKeyword())
		}
	case 156:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rngs = &rangeSlices{ranges: []*ast.RangeNode{protoDollar[1].rng}}
		}
	case 157:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].rngs.ranges = append(protoDollar[1].rngs.ranges, protoDollar[3].rng)
			protoDollar[1].rngs.commas = append(protoDollar[1].rngs.commas, protoDollar[2].b)
			protoVAL.rngs = protoDollar[1].rngs
		}
	case 158:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].il, nil, nil, nil)
		}
	case 159:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].il, protoDollar[2].id.ToKeyword(), protoDollar[3].il, nil)
		}
	case 160:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].il, protoDollar[2].id.ToKeyword(), nil, protoDollar[3].id.ToKeyword())
		}
	case 161:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.il = protoDollar[1].i
		}
	case 162:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.il = ast.NewNegativeIntLiteralNode(protoDollar[1].b, protoDollar[2].i)
		}
	case 163:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].rngs.commas = append(protoDollar[2].rngs.commas, protoDollar[3].b)
			}
			protoVAL.resvd = ast.NewReservedRangesNode(protoDollar[1].id.ToKeyword(), protoDollar[2].rngs.ranges, protoDollar[2].rngs.commas)
		}
	case 165:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].rngs.commas = append(protoDollar[2].rngs.commas, protoDollar[3].b)
			}
			protoVAL.resvd = ast.NewReservedRangesNode(protoDollar[1].id.ToKeyword(), protoDollar[2].rngs.ranges, protoDollar[2].rngs.commas)
		}
	case 167:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].names.commas = append(protoDollar[2].names.commas, protoDollar[3].b)
			}
			protoVAL.resvd = ast.NewReservedNamesNode(protoDollar[1].id.ToKeyword(), protoDollar[2].names.names, protoDollar[2].names.commas)
		}
	case 168:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.resvd = ast.NewReservedIdentifiersNode(protoDollar[1].id.ToKeyword(), protoDollar[2].names.idents, protoDollar[2].names.commas)
		}
	case 169:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.names = &nameSlices{names: []ast.StringValueNode{protoDollar[1].sv}}
		}
	case 170:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].names.names = append(protoDollar[1].names.names, protoDollar[3].sv)
			protoDollar[1].names.commas = append(protoDollar[1].names.commas, protoDollar[2].b)
			protoVAL.names = protoDollar[1].names
		}
	case 171:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.names = &nameSlices{idents: []*ast.IdentNode{protoDollar[1].id}}
		}
	case 172:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].names.idents = append(protoDollar[1].names.idents, protoDollar[3].id)
			protoDollar[1].names.commas = append(protoDollar[1].names.commas, protoDollar[2].b)
			protoVAL.names = protoDollar[1].names
		}
	case 173:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.en = ast.NewEnumNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].enElements, protoDollar[5].b)
		}
	case 174:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.enElements = nil
		}
	case 176:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].enElement != nil {
				protoVAL.enElements = append(protoDollar[1].enElements, protoDollar[2].enElement)
			} else {
				protoVAL.enElements = protoDollar[1].enElements
			}
		}
	case 177:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].enElement != nil {
				protoVAL.enElements = []ast.EnumElement{protoDollar[1].enElement}
			} else {
				protoVAL.enElements = nil
			}
		}
	case 178:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].opt.AddSemicolon(protoDollar[2].b)
			protoVAL.enElement = protoDollar[1].opt
		}
	case 179:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].env.AddSemicolon(protoDollar[2].b)
			protoVAL.enElement = protoDollar[1].env
		}
	case 180:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].resvd.AddSemicolon(protoDollar[2].b)
			protoVAL.enElement = protoDollar[1].resvd
		}
	case 181:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.enElement = nil
		}
	case 182:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.env = ast.NewEnumValueNode(protoDollar[1].id, protoDollar[2].b, protoDollar[3].il, nil)
		}
	case 183:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.env = ast.NewEnumValueNode(protoDollar[1].id, protoDollar[2].b, protoDollar[3].il, protoDollar[4].cmpctOpts)
		}
	case 184:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.msg = ast.NewMessageNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].msgElements, protoDollar[5].b)
		}
	case 185:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.msgElements = nil
		}
	case 187:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].msgElement != nil {
				protoVAL.msgElements = append(protoDollar[1].msgElements, protoDollar[2].msgElement)
			} else {
				protoVAL.msgElements = protoDollar[1].msgElements
			}
		}
	case 188:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].msgElement != nil {
				protoVAL.msgElements = []ast.MessageElement{protoDollar[1].msgElement}
			} else {
				protoVAL.msgElements = nil
			}
		}
	case 189:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].fld.AddSemicolon(protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].fld
		}
	case 190:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].en, protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].en
		}
	case 191:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].msg, protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].msg
		}
	case 192:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].extend, protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].extend
		}
	case 193:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].ext.AddSemicolon(protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].ext
		}
	case 194:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].grp, protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].grp
		}
	case 195:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].opt.AddSemicolon(protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].opt
		}
	case 196:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].oo, protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].oo
		}
	case 197:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].mapFld.AddSemicolon(protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].mapFld
		}
	case 198:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].resvd.AddSemicolon(protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].resvd
		}
	case 199:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = ast.NewEmptyDeclNode(protoDollar[1].b)
		}
	case 200:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].idv, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil)
		}
	case 201:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].idv, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts)
		}
	case 202:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].idv, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil)
		}
	case 203:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].idv, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts)
		}
	case 204:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing field number after '='", CategoryIncompleteDecl)
			protoVAL.fld = ast.NewIncompleteFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].idv, protoDollar[3].id, protoDollar[4].b, nil, nil)
		}
	case 205:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing '=' after field name", CategoryIncompleteDecl)
			protoVAL.fld = ast.NewIncompleteFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].idv, protoDollar[3].id, nil, nil, nil)
		}
	case 206:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing field name", CategoryIncompleteDecl)
			protoVAL.fld = ast.NewIncompleteFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].idv, nil, nil, nil, nil)
		}
	case 207:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing field number after '='", CategoryIncompleteDecl)
			protoVAL.fld = ast.NewIncompleteFieldNode(nil, protoDollar[1].idv, protoDollar[2].id, protoDollar[3].b, nil, nil)
		}
	case 208:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing '=' after field name", CategoryIncompleteDecl)
			protoVAL.fld = ast.NewIncompleteFieldNode(nil, protoDollar[1].idv, protoDollar[2].id, nil, nil, nil)
		}
	case 209:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing field name", CategoryIncompleteDecl)
			protoVAL.fld = ast.NewIncompleteFieldNode(nil, protoDollar[1].idv, nil, nil, nil, nil)
		}
	case 210:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing field type", CategoryIncompleteDecl)
			protoVAL.fld = ast.NewIncompleteFieldNode(protoDollar[1].id.ToKeyword(), nil, nil, nil, nil, nil)
		}
	case 211:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.extend = ast.NewExtendNode(protoDollar[1].id.ToKeyword(), protoDollar[2].idv, protoDollar[3].b, protoDollar[4].extElements, protoDollar[5].b)
		}
	case 212:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.extElements = nil
		}
	case 214:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].extElement != nil {
				protoVAL.extElements = append(protoDollar[1].extElements, protoDollar[2].extElement)
			} else {
				protoVAL.extElements = protoDollar[1].extElements
			}
		}
	case 215:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].extElement != nil {
				protoVAL.extElements = []ast.ExtendElement{protoDollar[1].extElement}
			} else {
				protoVAL.extElements = nil
			}
		}
	case 216:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].fld.AddSemicolon(protoDollar[2].b)
			protoVAL.extElement = protoDollar[1].fld
		}
	case 217:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].grp, protoDollar[2].b)
			protoVAL.extElement = protoDollar[1].grp
		}
	case 218:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.extElement = nil
		}
	case 219:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].idv, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil)
		}
	case 220:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].idv, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts)
		}
	case 221:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].idv, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil)
		}
	case 222:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].idv, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts)
		}
	case 223:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.svc = ast.NewServiceNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].svcElements, protoDollar[5].b)
		}
	case 224:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.svcElements = nil
		}
	case 226:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].svcElement != nil {
				protoVAL.svcElements = append(protoDollar[1].svcElements, protoDollar[2].svcElement)
			} else {
				protoVAL.svcElements = protoDollar[1].svcElements
			}
		}
	case 227:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].svcElement != nil {
				protoVAL.svcElements = []ast.ServiceElement{protoDollar[1].svcElement}
			} else {
				protoVAL.svcElements = nil
			}
		}
	case 228:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].opt.AddSemicolon(protoDollar[2].b)
			protoVAL.svcElement = protoDollar[1].opt
		}
	case 229:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].mtd.AddSemicolon(protoDollar[2].b)
			protoVAL.svcElement = protoDollar[1].mtd
		}
	case 230:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].mtd, protoDollar[2].b)
			protoVAL.svcElement = protoDollar[1].mtd
		}
	case 231:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.svcElement = nil
		}
	case 232:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.mtd = ast.NewRPCNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].mtdMsgType, protoDollar[4].id.ToKeyword(), protoDollar[5].mtdMsgType)
		}
	case 233:
		protoDollar = protoS[protopt-8 : protopt+1]
		{
			protoVAL.mtd = ast.NewRPCNodeWithBody(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].mtdMsgType, protoDollar[4].id.ToKeyword(), protoDollar[5].mtdMsgType, protoDollar[6].b, protoDollar[7].mtdElements, protoDollar[8].b)
		}
	case 234:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.mtdMsgType = ast.NewRPCTypeNode(protoDollar[1].b, protoDollar[2].id.ToKeyword(), protoDollar[3].idv, protoDollar[4].b)
		}
	case 235:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.mtdMsgType = ast.NewRPCTypeNode(protoDollar[1].b, nil, protoDollar[2].idv, protoDollar[3].b)
		}
	case 236:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.mtdElements = nil
		}
	case 238:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].mtdElement != nil {
				protoVAL.mtdElements = append(protoDollar[1].mtdElements, protoDollar[2].mtdElement)
			} else {
				protoVAL.mtdElements = protoDollar[1].mtdElements
			}
		}
	case 239:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].mtdElement != nil {
				protoVAL.mtdElements = []ast.RPCElement{protoDollar[1].mtdElement}
			} else {
				protoVAL.mtdElements = nil
			}
		}
	case 240:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].opt.AddSemicolon(protoDollar[2].b)
			protoVAL.mtdElement = protoDollar[1].opt
		}
	case 241:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.mtdElement = nil
		}
	case 519:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntaxAt("unexpected trailing comma", protoDollar[1].b, CategoryExtraTokens)
			protoVAL.b = protoDollar[1].b
		}
	case 520:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.b = nil
		}
	case 521:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.b = protoDollar[1].b
		}
	case 522:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntaxAt("expected ';', found ','", protoDollar[1].b, CategoryIncorrectToken)
			protoVAL.b = protoDollar[1].b
		}
	case 523:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].b.Virtual {
				protolex.(*protoLex).ErrExtendedSyntaxAt("expected ';'", protoDollar[1].b, CategoryMissingToken)
			}
			protoVAL.b = protoDollar[1].b
		}
	case 524:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.b = protoDollar[1].b
		}
	case 525:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.b = protoDollar[1].b
		}
	case 526:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.b = protoDollar[1].b
		}
	case 527:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.b = protoDollar[1].b
		}
	}
	goto protostack /* stack new state and value */
}
