// Code generated by goyacc -o proto.y.go -l -p proto proto.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

//lint:file-ignore SA4006 generated parser has unused values

import (
	"math"

	"github.com/kralicky/protocompile/ast"
)

type protoSymType struct {
	yys          int
	file         *ast.FileNode
	syn          *ast.SyntaxNode
	ed           *ast.EditionNode
	fileElement  ast.FileElement
	fileElements []ast.FileElement
	pkg          *ast.PackageNode
	imprt        *ast.ImportNode
	msg          *ast.MessageNode
	msgElement   ast.MessageElement
	msgElements  []ast.MessageElement
	fld          *ast.FieldNode
	mapFld       *ast.MapFieldNode
	mapType      *ast.MapTypeNode
	grp          *ast.GroupNode
	oo           *ast.OneofNode
	ooElement    ast.OneofElement
	ooElements   []ast.OneofElement
	ext          *ast.ExtensionRangeNode
	resvd        *ast.ReservedNode
	en           *ast.EnumNode
	enElement    ast.EnumElement
	enElements   []ast.EnumElement
	env          *ast.EnumValueNode
	extend       *ast.ExtendNode
	extElement   ast.ExtendElement
	extElements  []ast.ExtendElement
	svc          *ast.ServiceNode
	svcElement   ast.ServiceElement
	svcElements  []ast.ServiceElement
	mtd          *ast.RPCNode
	mtdMsgType   *ast.RPCTypeNode
	mtdElement   ast.RPCElement
	mtdElements  []ast.RPCElement
	opt          *ast.OptionNode
	opts         *compactOptionSlices
	ref          *ast.FieldReferenceNode
	refp         *fieldRefParens
	optName      *ast.OptionNameNode
	cmpctOpts    *ast.CompactOptionsNode
	rng          *ast.RangeNode
	rngs         *rangeSlices
	names        *nameSlices
	cid          *identSlices
	xid          *identSlices
	idv          ast.IdentValueNode
	sl           *valueSlices
	msgLitFlds   *messageFieldList
	msgLitFld    *ast.MessageFieldNode
	v            ast.ValueNode
	il           ast.IntValueNode
	sv           ast.StringValueNode
	i            *ast.UintLiteralNode
	f            *ast.FloatLiteralNode
	id           *ast.IdentNode
	b            *ast.RuneNode
	err          error
}

const _STRING_LIT = 57346
const _INT_LIT = 57347
const _FLOAT_LIT = 57348
const _EXTENSION_IDENT = 57349
const _SYNTAX = 57350
const _EDITION = 57351
const _IMPORT = 57352
const _WEAK = 57353
const _PUBLIC = 57354
const _PACKAGE = 57355
const _OPTION = 57356
const _TRUE = 57357
const _FALSE = 57358
const _INF = 57359
const _NAN = 57360
const _REPEATED = 57361
const _OPTIONAL = 57362
const _REQUIRED = 57363
const _DOUBLE = 57364
const _FLOAT = 57365
const _INT32 = 57366
const _INT64 = 57367
const _UINT32 = 57368
const _UINT64 = 57369
const _SINT32 = 57370
const _SINT64 = 57371
const _FIXED32 = 57372
const _FIXED64 = 57373
const _SFIXED32 = 57374
const _SFIXED64 = 57375
const _BOOL = 57376
const _STRING = 57377
const _BYTES = 57378
const _GROUP = 57379
const _ONEOF = 57380
const _MAP = 57381
const _EXTENSIONS = 57382
const _TO = 57383
const _MAX = 57384
const _RESERVED = 57385
const _ENUM = 57386
const _MESSAGE = 57387
const _EXTEND = 57388
const _SERVICE = 57389
const _RPC = 57390
const _STREAM = 57391
const _RETURNS = 57392
const _SINGULAR_IDENT = 57393
const _QUALIFIED_IDENT = 57394
const _FULLY_QUALIFIED_IDENT = 57395
const _ERROR = 57396

var protoToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"_STRING_LIT",
	"_INT_LIT",
	"_FLOAT_LIT",
	"_EXTENSION_IDENT",
	"_SYNTAX",
	"_EDITION",
	"_IMPORT",
	"_WEAK",
	"_PUBLIC",
	"_PACKAGE",
	"_OPTION",
	"_TRUE",
	"_FALSE",
	"_INF",
	"_NAN",
	"_REPEATED",
	"_OPTIONAL",
	"_REQUIRED",
	"_DOUBLE",
	"_FLOAT",
	"_INT32",
	"_INT64",
	"_UINT32",
	"_UINT64",
	"_SINT32",
	"_SINT64",
	"_FIXED32",
	"_FIXED64",
	"_SFIXED32",
	"_SFIXED64",
	"_BOOL",
	"_STRING",
	"_BYTES",
	"_GROUP",
	"_ONEOF",
	"_MAP",
	"_EXTENSIONS",
	"_TO",
	"_MAX",
	"_RESERVED",
	"_ENUM",
	"_MESSAGE",
	"_EXTEND",
	"_SERVICE",
	"_RPC",
	"_STREAM",
	"_RETURNS",
	"_SINGULAR_IDENT",
	"_QUALIFIED_IDENT",
	"_FULLY_QUALIFIED_IDENT",
	"_ERROR",
	"'='",
	"';'",
	"':'",
	"'{'",
	"'}'",
	"'\\\\'",
	"'/'",
	"'?'",
	"','",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'('",
	"')'",
	"'['",
	"']'",
	"'*'",
	"'&'",
	"'^'",
	"'%'",
	"'$'",
	"'#'",
	"'@'",
	"'!'",
	"'~'",
	"'`'",
}

var protoStatenames = [...]string{}

const protoEofCode = 1
const protoErrCode = 2
const protoInitialStackSize = 16

var protoExca = [...]int16{
	-1, 0,
	1, 6,
	-2, 0,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 4,
	1, 3,
	-2, 0,
	-1, 23,
	1, 1,
	-2, 0,
	-1, 25,
	1, 2,
	-2, 0,
	-1, 96,
	1, 4,
	-2, 0,
	-1, 97,
	1, 5,
	-2, 0,
	-1, 104,
	59, 175,
	-2, 0,
	-1, 105,
	59, 213,
	-2, 0,
	-1, 106,
	59, 225,
	-2, 0,
	-1, 179,
	59, 176,
	-2, 0,
	-1, 232,
	59, 214,
	-2, 0,
	-1, 283,
	59, 226,
	-2, 0,
	-1, 293,
	59, 46,
	64, 46,
	-2, 0,
	-1, 424,
	59, 123,
	-2, 0,
	-1, 478,
	59, 124,
	-2, 0,
	-1, 641,
	59, 237,
	-2, 0,
	-1, 660,
	59, 238,
	-2, 0,
}

const protoPrivate = 57344

const protoLast = 1610

var protoAct = [...]int16{
	10, 472, 13, 661, 12, 607, 11, 421, 118, 91,
	453, 413, 454, 540, 131, 450, 88, 23, 25, 592,
	112, 479, 290, 29, 30, 31, 386, 40, 40, 387,
	367, 40, 452, 292, 39, 284, 318, 126, 94, 233,
	90, 93, 132, 95, 138, 180, 366, 120, 467, 7,
	664, 651, 646, 630, 26, 110, 117, 114, 466, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 92, 464, 127, 181, 124, 285, 122, 113,
	123, 669, 644, 108, 109, 628, 414, 116, 115, 631,
	127, 456, 124, 473, 122, 625, 123, 643, 598, 468,
	627, 473, 473, 642, 297, 622, 307, 388, 451, 388,
	311, 376, 313, 235, 315, 316, 26, 26, 237, 187,
	639, 595, 409, 113, 365, 113, 369, 370, 375, 113,
	414, 405, 414, 407, 408, 415, 414, 306, 404, 24,
	406, 635, 463, 624, 535, 597, 382, 531, 444, 429,
	181, 428, 422, 681, 371, 678, 677, 671, 665, 609,
	402, 380, 396, 676, 390, 377, 379, 381, 383, 389,
	305, 389, 679, 666, 641, 424, 106, 375, 105, 104,
	103, 24, 667, 658, 650, 648, 647, 626, 613, 602,
	600, 599, 588, 587, 187, 378, 459, 458, 400, 393,
	314, 312, 310, 309, 308, 35, 34, 33, 32, 638,
	637, 636, 536, 470, 15, 469, 449, 425, 420, 392,
	5, 6, 16, 384, 102, 17, 18, 28, 27, 395,
	538, 417, 446, 423, 608, 663, 288, 475, 4, 529,
	235, 657, 391, 656, 394, 237, 618, 18, 18, 604,
	603, 304, 302, 87, 285, 537, 20, 19, 21, 22,
	36, 15, 96, 303, 97, 301, 299, 37, 38, 16,
	398, 399, 17, 18, 476, 528, 368, 300, 471, 411,
	401, 416, 289, 447, 297, 101, 100, 99, 98, 397,
	659, 660, 287, 286, 282, 283, 14, 403, 231, 232,
	182, 178, 179, 20, 19, 21, 22, 125, 418, 419,
	431, 432, 433, 434, 435, 436, 437, 438, 439, 440,
	441, 442, 385, 183, 130, 373, 372, 477, 478, 119,
	136, 129, 482, 128, 234, 481, 121, 294, 293, 462,
	589, 484, 238, 133, 188, 185, 541, 319, 486, 426,
	427, 239, 142, 430, 410, 412, 455, 111, 653, 107,
	296, 606, 9, 445, 8, 3, 2, 1, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 443, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 480, 0, 0, 465, 0,
	0, 0, 0, 0, 0, 297, 0, 460, 0, 0,
	0, 0, 457, 0, 0, 532, 0, 0, 0, 0,
	530, 0, 0, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 593, 0, 594,
	596, 533, 0, 605, 0, 0, 534, 40, 0, 480,
	0, 0, 0, 40, 601, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 611, 612, 0, 0, 0,
	610, 0, 0, 0, 0, 614, 615, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	616, 0, 0, 0, 0, 0, 0, 0, 0, 619,
	0, 40, 0, 0, 0, 0, 0, 0, 617, 0,
	0, 0, 0, 621, 620, 0, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 554, 555, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 585, 623, 586, 542,
	543, 544, 0, 0, 0, 632, 633, 0, 0, 0,
	629, 0, 0, 0, 634, 0, 0, 0, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 0, 124, 593, 122, 594, 123, 0,
	649, 652, 662, 0, 645, 40, 0, 654, 655, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 668, 670,
	0, 662, 0, 0, 672, 0, 0, 127, 0, 124,
	127, 122, 124, 123, 122, 674, 123, 673, 675, 0,
	127, 0, 124, 0, 122, 0, 123, 591, 680, 110,
	117, 114, 0, 44, 45, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 82, 83, 84, 85, 86, 92, 0, 0, 0,
	0, 0, 0, 113, 0, 0, 0, 0, 0, 0,
	414, 116, 115, 110, 117, 114, 590, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 81, 82, 83, 84, 85, 86,
	92, 0, 0, 0, 0, 0, 0, 113, 0, 0,
	0, 0, 0, 0, 414, 116, 115, 110, 117, 114,
	0, 44, 45, 46, 47, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
	83, 84, 85, 86, 92, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 295, 0, 0, 0, 116,
	115, 44, 45, 46, 47, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
	83, 84, 85, 86, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 461, 295, 0,
	0, 0, 0, 298, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 92, 0, 0,
	0, 0, 0, 0, 0, 291, 0, 0, 0, 0,
	0, 295, 0, 0, 0, 0, 298, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 81, 82, 83, 84, 85, 86,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 374, 388, 0, 298,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 81, 82, 83,
	84, 85, 86, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 389,
	147, 148, 149, 150, 151, 152, 18, 153, 154, 155,
	156, 141, 140, 139, 157, 158, 159, 160, 161, 162,
	163, 164, 165, 166, 167, 168, 169, 170, 171, 0,
	135, 146, 134, 172, 173, 137, 20, 19, 21, 174,
	175, 176, 177, 143, 144, 145, 0, 0, 24, 89,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 81, 82, 83,
	84, 85, 86, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 80, 81, 82, 83, 84, 85, 86, 41,
	42, 43, 545, 546, 547, 548, 549, 550, 551, 552,
	553, 554, 555, 556, 557, 558, 559, 560, 561, 562,
	563, 564, 565, 566, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 577, 578, 579, 580, 581, 582,
	583, 584, 585, 539, 586, 542, 543, 544, 323, 324,
	325, 326, 327, 328, 329, 330, 331, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 349, 350, 351, 317, 352, 353,
	354, 355, 356, 357, 358, 359, 360, 361, 362, 363,
	364, 320, 321, 322, 236, 0, 0, 0, 0, 0,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 141, 140, 139, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 0,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 280, 281, 240, 241, 242, 483, 0, 0, 0,
	0, 0, 490, 491, 492, 493, 494, 495, 18, 496,
	497, 498, 499, 0, 0, 0, 500, 501, 502, 503,
	504, 505, 506, 507, 508, 509, 510, 511, 512, 513,
	514, 485, 515, 516, 517, 518, 519, 520, 521, 522,
	523, 524, 525, 526, 527, 487, 488, 489, 374, 368,
	0, 0, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 92, 184, 0, 0, 0,
	0, 0, 190, 191, 192, 193, 194, 195, 18, 196,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
	207, 208, 209, 210, 211, 212, 213, 214, 215, 216,
	217, 218, 219, 220, 221, 222, 223, 186, 224, 225,
	226, 227, 228, 229, 230, 189, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 80, 81, 82, 83, 84, 85, 86, 92,
}

var protoPact = [...]int16{
	242, -1000, 155, 155, 289, 203, 202, -1000, 155, 155,
	155, 182, 181, 180, 179, -1000, 286, 1218, 1172, 1558,
	1558, 1218, 1558, 289, -1000, 289, -1000, 314, 313, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 312, 311, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 199, -1000, -1000,
	152, -1000, -1000, 151, 150, 148, 289, 289, -1000, -1000,
	-1000, -1000, 813, 1122, 1514, 1362, 264, -1000, -1000, -1000,
	-1000, -1000, -1000, 936, -1000, 290, 276, -1000, 141, 1122,
	-1000, 155, 178, 177, 176, 155, 175, 155, 174, 155,
	155, -1000, 1310, 1558, 301, 1558, 1558, 1464, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 76, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 136, 1514,
	-1000, 155, 113, 155, -1000, 198, 1062, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 135, 1362, -1000, 155, 173, -1000, 1310, 1558, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 133, 264, -1000, 155, 155, 172, -1000, 1558,
	131, -1000, -1000, 999, 105, 107, 95, -1000, 259, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1558, 1558, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 193, 119, -1000, 222, 147,
	192, 119, 118, 116, -1000, -1000, 316, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 134, 115, -1000, 221, -1000, 308,
	-1000, -1000, -1000, -1000, 1558, 191, -1000, -1000, -1000, -1000,
	-1000, 70, -1000, -1000, -1000, -1000, -1000, -1000, 51, 51,
	-1000, 171, 170, -1000, 873, 101, -13, 58, 190, 188,
	303, 62, 301, 262, 1414, 300, -1000, -1000, 265, 1558,
	114, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 62, 134, -1000, 132, -1000, 187, 280,
	210, 1264, -1000, -1000, 167, 166, 685, -1000, -1000, -1000,
	87, -1000, 112, -1000, 57, 165, 164, 1218, 163, 275,
	274, 62, -1000, 1172, -1000, -1000, -1000, 130, 1414, -1000,
	155, 155, 162, -1000, 1558, 1558, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 62, -1000,
	-1000, 1218, -1000, -1000, -1000, -1000, 271, 62, 70, 548,
	66, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 110,
	-1000, 54, -1000, -1000, 161, -1000, 59, 97, -1000, -1000,
	-1000, -18, -1000, 61, 62, -1000, 108, -1000, 186, -1000,
	-1000, -1000, -1000, -1000, 185, 184, -1000, 86, 62, -1000,
	146, 64, -1000, 56, 749, -1000, -1000, -1000, -19, 160,
	159, 1122, 158, -1000, -20, 1172, 813, 268, 266, 157,
	-1000, 263, -1000, -1000, -21, -1000, -1000, -1000, -1000, 129,
	145, -1000, -1000, -1000, -1000, 156, 62, 53, -1000, 128,
	263, -1000, 155, -1000, -1000, -1000, 1122, -1000, -1000, 1122,
	137, -1000, -1000, -1000, 127, 126, 144, -1000, -1000, 1122,
	124, -1000,
}

var protoPgo = [...]int16{
	0, 397, 396, 395, 49, 268, 394, 392, 0, 5,
	391, 390, 264, 1, 32, 389, 388, 10, 11, 12,
	387, 386, 19, 385, 384, 29, 20, 9, 383, 42,
	382, 381, 378, 377, 376, 375, 374, 16, 373, 372,
	371, 36, 13, 370, 369, 368, 33, 22, 367, 366,
	365, 364, 363, 37, 362, 361, 360, 6, 47, 359,
	8, 21, 358, 357, 356, 355, 354, 353, 44, 30,
	26, 46, 352, 337, 4, 45, 332, 331, 330, 2,
	39, 329, 328, 326, 35, 325, 324, 323, 322, 3,
	321, 320, 15, 191, 7, 14,
}

var protoR1 = [...]int8{
	0, 1, 1, 1, 1, 1, 1, 5, 5, 4,
	4, 4, 4, 4, 4, 4, 4, 2, 3, 6,
	6, 6, 7, 8, 8, 8, 12, 12, 15, 15,
	16, 16, 17, 17, 17, 20, 20, 20, 20, 20,
	20, 20, 20, 18, 18, 47, 46, 46, 45, 45,
	45, 45, 45, 45, 48, 48, 48, 26, 26, 37,
	37, 37, 37, 11, 11, 11, 11, 14, 14, 14,
	24, 24, 19, 19, 19, 21, 21, 21, 21, 43,
	43, 22, 22, 23, 23, 23, 23, 44, 44, 38,
	38, 38, 38, 39, 39, 39, 39, 40, 40, 40,
	40, 41, 41, 41, 41, 42, 42, 42, 42, 35,
	35, 29, 29, 29, 13, 10, 10, 10, 9, 9,
	53, 53, 52, 63, 63, 62, 62, 61, 61, 61,
	61, 50, 50, 54, 54, 55, 55, 56, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	73, 73, 71, 71, 69, 69, 69, 72, 72, 70,
	70, 70, 25, 25, 66, 66, 67, 67, 68, 68,
	64, 64, 65, 65, 74, 77, 77, 76, 76, 75,
	75, 75, 75, 78, 78, 57, 60, 60, 59, 59,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 49, 49, 49, 49, 49, 49, 49, 49, 49,
	49, 49, 79, 82, 82, 81, 81, 80, 80, 80,
	51, 51, 51, 51, 83, 86, 86, 85, 85, 84,
	84, 84, 84, 87, 88, 92, 92, 91, 91, 90,
	90, 89, 89, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	94, 94, 93, 93, 95,
}

var protoR2 = [...]int8{
	0, 2, 2, 1, 3, 3, 0, 2, 1, 2,
	2, 2, 2, 2, 2, 2, 1, 3, 3, 2,
	3, 3, 2, 4, 2, 1, 1, 1, 1, 1,
	1, 2, 1, 1, 1, 1, 2, 2, 2, 2,
	1, 2, 2, 3, 2, 1, 1, 2, 1, 2,
	2, 2, 2, 1, 3, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 4, 6, 4, 1, 2, 2,
	2, 2, 1, 3, 2, 4, 5, 2, 3, 1,
	3, 1, 2, 4, 5, 2, 3, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 1, 3, 0, 3, 1,
	8, 10, 5, 0, 1, 2, 1, 2, 2, 2,
	1, 4, 5, 7, 9, 4, 5, 7, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 4, 1, 3, 1, 3, 3, 1, 3, 1,
	3, 3, 1, 2, 3, 1, 3, 1, 3, 2,
	1, 3, 1, 3, 5, 0, 1, 2, 1, 2,
	2, 2, 1, 3, 4, 5, 0, 1, 2, 1,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 5, 6, 4, 5, 4, 3, 2, 3, 2,
	1, 1, 5, 0, 1, 2, 1, 2, 2, 1,
	5, 6, 4, 5, 5, 0, 1, 2, 1, 2,
	2, 2, 1, 5, 8, 4, 3, 0, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1,
}

var protoChk = [...]int16{
	-1000, -1, -2, -3, -5, 8, 9, -4, -6, -7,
	-8, -57, -74, -79, -83, 2, 10, 13, 14, 45,
	44, 46, 47, -95, 56, -95, -4, 55, 55, -95,
	-95, -95, 56, 56, 56, 56, 4, 11, 12, -37,
	-27, 51, 52, 53, 8, 9, 10, 11, 12, 13,
	14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, -12, -37, 7,
	-26, -27, 51, -26, -37, -26, -5, -5, 4, 4,
	4, 4, 55, 58, 58, 58, 58, -15, -17, -18,
	4, -20, -26, 58, 6, 67, 66, 5, -60, -59,
	-58, -49, -74, -57, -79, -73, -53, -8, -52, -55,
	-66, -95, -29, -38, 40, 38, -56, 43, -68, 21,
	20, 19, -30, 51, 52, 53, 39, 8, 9, 10,
	11, 12, 13, 15, 16, 17, 18, 22, 23, 24,
	25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
	35, 36, 41, 42, 47, 48, 49, 50, -77, -76,
	-75, -8, -78, -67, 2, -35, 43, -68, -36, 51,
	8, 9, 10, 11, 12, 13, 15, 16, 17, 18,
	19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
	29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
	39, 40, 41, 42, 44, 45, 46, 47, 48, 49,
	50, -82, -81, -80, -51, -53, 2, -29, -39, -31,
	51, 52, 53, 8, 9, 10, 11, 12, 13, 14,
	15, 16, 17, 18, 22, 23, 24, 25, 26, 27,
	28, 29, 30, 31, 32, 33, 34, 35, 36, 38,
	39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
	49, 50, -86, -85, -84, -8, -87, -88, 2, 48,
	-47, 59, -46, -45, -48, 2, -11, -26, 70, 6,
	17, 5, 6, 17, 5, 59, -58, -95, 56, 56,
	56, -95, 56, -95, 56, -95, -95, 37, -41, -33,
	51, 52, 53, 8, 9, 10, 11, 12, 13, 14,
	15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
	25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
	35, 36, 38, 39, 40, 41, 42, 43, 44, 45,
	46, 47, 48, 49, 50, -26, -71, -69, 5, -26,
	-26, -71, -64, -65, 4, -26, 65, 59, -75, -95,
	-93, -95, 63, -95, 55, -72, -70, -25, 5, 67,
	59, -80, -95, 56, -41, -26, 59, -84, -95, -95,
	56, -26, 59, -46, 63, 56, 63, 56, 57, 57,
	-24, -19, -23, -18, 65, 70, 52, 2, -26, -26,
	55, -94, 63, 41, 58, 55, -94, -94, 63, 63,
	-28, 24, 25, 26, 27, 28, 29, 30, 31, 32,
	33, 34, 35, -25, 63, -94, 41, 5, -26, 55,
	-92, 68, -14, -17, -19, -21, 70, -14, 56, 56,
	-47, 64, -44, 71, 2, -19, 71, 61, 71, 55,
	55, 5, -13, 70, -69, 5, 42, -63, -62, -61,
	-8, -50, -54, 2, -40, 37, -32, 51, 52, 53,
	8, 9, 10, 11, 12, 13, 15, 16, 17, 18,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 38, 39, 40, 41, 42,
	43, 44, 45, 46, 47, 48, 49, 50, 5, 4,
	-26, 63, -13, -70, -25, 42, 55, 5, 50, 49,
	-42, -34, 51, 52, 53, 8, 9, 10, 11, 12,
	13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
	23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
	33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
	43, 44, 45, 46, 47, 48, 50, 56, 56, -43,
	71, 2, -22, -17, -19, 64, -94, 63, 71, 56,
	56, -37, 56, 5, 5, -13, -10, -9, -12, 59,
	-61, -95, -95, 56, -26, -26, -13, -37, 5, -13,
	-92, -42, 69, -94, 63, 71, 56, 71, 56, -19,
	71, 58, -13, -13, -94, 63, 55, 55, 55, 64,
	-13, 58, 69, 71, 56, -22, 71, 56, 56, -60,
	56, 71, -9, -16, -17, -18, 5, 5, 56, -91,
	-90, -89, -8, 2, 71, 59, 58, 56, -13, 58,
	-13, 59, -89, -95, -60, -60, 56, 59, 59, 58,
	-60, 59,
}

var protoDef = [...]int16{
	-2, -2, 0, 0, -2, 0, 0, 8, 0, 0,
	0, 0, 0, 0, 0, 16, 0, 0, 25, 0,
	0, 0, 0, -2, 524, -2, 7, 0, 0, 9,
	10, 11, 12, 13, 14, 15, 19, 0, 0, 22,
	59, 60, 61, 62, 477, 478, 479, 480, 481, 482,
	483, 484, 485, 486, 487, 488, 489, 490, 491, 492,
	493, 494, 495, 496, 497, 498, 499, 500, 501, 502,
	503, 504, 505, 506, 507, 508, 509, 510, 511, 512,
	513, 514, 515, 516, 517, 518, 519, 24, 26, 27,
	0, 57, 58, 0, 0, 0, -2, -2, 17, 18,
	20, 21, 0, 186, -2, -2, -2, 23, 28, 29,
	32, 33, 34, 0, 35, 0, 0, 40, 0, 187,
	189, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 200, 211, 210, 0, 0, 0, 0, 165, 111,
	112, 113, 89, 90, 91, 92, 268, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 269, 270, 271, 272, 273, 274, 0, -2,
	178, 0, 0, 0, 182, 0, 0, 167, 109, 110,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 323,
	324, 325, 326, 327, 328, 329, 330, 331, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 0, -2, 216, 0, 0, 219, 0, 0, 93,
	94, 95, 96, 275, 276, 277, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 288, 289, 290, 291,
	292, 293, 294, 295, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 306, 307, 308, 309, 310, 311,
	312, 313, 0, -2, 228, 0, 0, 0, 232, 0,
	0, 44, 45, -2, 48, 53, 0, 63, 0, 36,
	39, 42, 37, 38, 41, 185, 188, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 199, 0, 207, 101,
	102, 103, 104, 393, 394, 395, 396, 397, 398, 399,
	400, 401, 402, 403, 404, 405, 406, 407, 408, 409,
	410, 411, 412, 413, 414, 415, 416, 417, 418, 419,
	420, 421, 422, 423, 424, 425, 426, 427, 428, 429,
	430, 431, 432, 433, 434, 209, 521, 152, 154, 0,
	0, 521, 521, 169, 170, 172, 0, 174, 177, 179,
	180, 522, 523, 181, 0, 521, 157, 159, 162, 0,
	212, 215, 217, 218, 0, 0, 224, 227, 229, 230,
	231, 0, 43, 47, 49, 50, 51, 52, 0, 0,
	55, 0, 0, 72, 0, 0, 0, 0, 0, 206,
	208, 150, 520, 0, -2, 0, 164, 168, 520, 0,
	0, 138, 139, 140, 141, 142, 143, 144, 145, 146,
	147, 148, 149, 183, 520, 166, 0, 163, 0, 0,
	0, 0, 56, 67, 0, 0, 0, 54, 70, 71,
	0, 74, 521, 85, 0, 0, 0, 0, 0, 0,
	205, 203, 151, 117, 153, 155, 156, 0, -2, 126,
	0, 0, 0, 130, 0, 0, 97, 98, 99, 100,
	355, 356, 357, 358, 359, 360, 361, 362, 363, 364,
	365, 366, 367, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 380, 381, 382, 383, 384,
	385, 386, 387, 388, 389, 390, 391, 392, 135, 171,
	173, 0, 184, 158, 160, 161, 0, 222, 0, 0,
	0, 105, 106, 107, 108, 435, 436, 437, 438, 439,
	440, 441, 442, 443, 444, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 457, 458, 459,
	460, 461, 462, 463, 464, 465, 466, 467, 468, 469,
	470, 471, 472, 473, 474, 475, 476, 68, 69, 521,
	77, 0, 79, 81, 0, 73, 0, 520, 86, 87,
	64, 0, 66, 0, 201, 204, 521, 115, 119, 122,
	125, 127, 128, 129, 0, 0, 136, 0, 220, 223,
	233, 0, 236, 0, 520, 78, 82, 83, 0, 0,
	0, 186, 0, 202, 0, 520, 0, 0, 0, 0,
	221, -2, 235, 75, 0, 80, 84, 88, 65, 0,
	0, 114, 116, 118, 30, 0, 131, 0, 137, 0,
	-2, 240, 0, 242, 76, 120, 186, 31, 132, 186,
	0, 234, 239, 241, 0, 0, 0, 121, 133, 186,
	0, 134,
}

var protoTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 77, 76, 75, 73, 3,
	68, 69, 72, 66, 63, 67, 3, 61, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 57, 56,
	65, 55, 64, 62, 78, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 70, 60, 71, 74, 3, 81, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 58, 3, 59, 80,
}

var protoTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54,
}

var protoTok3 = [...]int8{
	0,
}

var protoErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	protoDebug        = 0
	protoErrorVerbose = false
)

type protoLexer interface {
	Lex(lval *protoSymType) int
	Error(s string)
}

type protoParser interface {
	Parse(protoLexer) int
	Lookahead() int
}

type protoParserImpl struct {
	lval  protoSymType
	stack [protoInitialStackSize]protoSymType
	char  int
}

func (p *protoParserImpl) Lookahead() int {
	return p.char
}

func protoNewParser() protoParser {
	return &protoParserImpl{}
}

const protoFlag = -1000

func protoTokname(c int) string {
	if c >= 1 && c-1 < len(protoToknames) {
		if protoToknames[c-1] != "" {
			return protoToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func protoStatname(s int) string {
	if s >= 0 && s < len(protoStatenames) {
		if protoStatenames[s] != "" {
			return protoStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func protoErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !protoErrorVerbose {
		return "syntax error"
	}

	for _, e := range protoErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + protoTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(protoPact[state])
	for tok := TOKSTART; tok-1 < len(protoToknames); tok++ {
		if n := base + tok; n >= 0 && n < protoLast && int(protoChk[int(protoAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if protoDef[state] == -2 {
		i := 0
		for protoExca[i] != -1 || int(protoExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; protoExca[i] >= 0; i += 2 {
			tok := int(protoExca[i])
			if tok < TOKSTART || protoExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if protoExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += protoTokname(tok)
	}
	return res
}

func protolex1(lex protoLexer, lval *protoSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(protoTok1[0])
		goto out
	}
	if char < len(protoTok1) {
		token = int(protoTok1[char])
		goto out
	}
	if char >= protoPrivate {
		if char < protoPrivate+len(protoTok2) {
			token = int(protoTok2[char-protoPrivate])
			goto out
		}
	}
	for i := 0; i < len(protoTok3); i += 2 {
		token = int(protoTok3[i+0])
		if token == char {
			token = int(protoTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(protoTok2[1]) /* unknown char */
	}
	if protoDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", protoTokname(token), uint(char))
	}
	return char, token
}

func protoParse(protolex protoLexer) int {
	return protoNewParser().Parse(protolex)
}

func (protorcvr *protoParserImpl) Parse(protolex protoLexer) int {
	var proton int
	var protoVAL protoSymType
	var protoDollar []protoSymType
	_ = protoDollar // silence set and not used
	protoS := protorcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	protostate := 0
	protorcvr.char = -1
	prototoken := -1 // protorcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		protostate = -1
		protorcvr.char = -1
		prototoken = -1
	}()
	protop := -1
	goto protostack

ret0:
	return 0

ret1:
	return 1

protostack:
	/* put a state and value onto the stack */
	if protoDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", protoTokname(prototoken), protoStatname(protostate))
	}

	protop++
	if protop >= len(protoS) {
		nyys := make([]protoSymType, len(protoS)*2)
		copy(nyys, protoS)
		protoS = nyys
	}
	protoS[protop] = protoVAL
	protoS[protop].yys = protostate

protonewstate:
	proton = int(protoPact[protostate])
	if proton <= protoFlag {
		goto protodefault /* simple state */
	}
	if protorcvr.char < 0 {
		protorcvr.char, prototoken = protolex1(protolex, &protorcvr.lval)
	}
	proton += prototoken
	if proton < 0 || proton >= protoLast {
		goto protodefault
	}
	proton = int(protoAct[proton])
	if int(protoChk[proton]) == prototoken { /* valid shift */
		protorcvr.char = -1
		prototoken = -1
		protoVAL = protorcvr.lval
		protostate = proton
		if Errflag > 0 {
			Errflag--
		}
		goto protostack
	}

protodefault:
	/* default state action */
	proton = int(protoDef[protostate])
	if proton == -2 {
		if protorcvr.char < 0 {
			protorcvr.char, prototoken = protolex1(protolex, &protorcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if protoExca[xi+0] == -1 && int(protoExca[xi+1]) == protostate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			proton = int(protoExca[xi+0])
			if proton < 0 || proton == prototoken {
				break
			}
		}
		proton = int(protoExca[xi+1])
		if proton < 0 {
			goto ret0
		}
	}
	if proton == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			protolex.Error(protoErrorMessage(protostate, prototoken))
			Nerrs++
			if protoDebug >= 1 {
				__yyfmt__.Printf("%s", protoStatname(protostate))
				__yyfmt__.Printf(" saw %s\n", protoTokname(prototoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for protop >= 0 {
				proton = int(protoPact[protoS[protop].yys]) + protoErrCode
				if proton >= 0 && proton < protoLast {
					protostate = int(protoAct[proton]) /* simulate a shift of "error" */
					if int(protoChk[protostate]) == protoErrCode {
						goto protostack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if protoDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", protoS[protop].yys)
				}
				protop--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if protoDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", protoTokname(prototoken))
			}
			if prototoken == protoEofCode {
				goto ret1
			}
			protorcvr.char = -1
			prototoken = -1
			goto protonewstate /* try again in the same state */
		}
	}

	/* reduction by production proton */
	if protoDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", proton, protoStatname(protostate))
	}

	protont := proton
	protopt := protop
	_ = protopt // guard against "declared and not used"

	protop -= int(protoR2[proton])
	// protop is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if protop+1 >= len(protoS) {
		nyys := make([]protoSymType, len(protoS)*2)
		copy(nyys, protoS)
		protoS = nyys
	}
	protoVAL = protoS[protop+1]

	/* consult goto table to find next state */
	proton = int(protoR1[proton])
	protog := int(protoPgo[proton])
	protoj := protog + protoS[protop].yys + 1

	if protoj >= protoLast {
		protostate = int(protoAct[protog])
	} else {
		protostate = int(protoAct[protoj])
		if int(protoChk[protostate]) != -proton {
			protostate = int(protoAct[protog])
		}
	}
	// dummy call; replaced with literal code
	switch protont {

	case 1:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].syn.AddSemicolon(protoDollar[2].b)
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, protoDollar[1].syn, nil, lex.eof)
			lex.res = protoVAL.file
		}
	case 2:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].ed.AddSemicolon(protoDollar[2].b)
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNodeWithEdition(lex.info, protoDollar[1].ed, nil, lex.eof)
			lex.res = protoVAL.file
		}
	case 3:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, nil, protoDollar[1].fileElements, lex.eof)
			lex.res = protoVAL.file
		}
	case 4:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].syn.AddSemicolon(protoDollar[2].b)
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, protoDollar[1].syn, protoDollar[3].fileElements, lex.eof)
			lex.res = protoVAL.file
		}
	case 5:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].ed.AddSemicolon(protoDollar[2].b)
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNodeWithEdition(lex.info, protoDollar[1].ed, protoDollar[3].fileElements, lex.eof)
			lex.res = protoVAL.file
		}
	case 6:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, nil, nil, lex.eof)
			lex.res = protoVAL.file
		}
	case 7:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].fileElement != nil {
				protoVAL.fileElements = append(protoDollar[1].fileElements, protoDollar[2].fileElement)
			} else {
				protoVAL.fileElements = protoDollar[1].fileElements
			}
		}
	case 8:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].fileElement != nil {
				protoVAL.fileElements = []ast.FileElement{protoDollar[1].fileElement}
			} else {
				protoVAL.fileElements = nil
			}
		}
	case 9:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].imprt.AddSemicolon(protoDollar[2].b)
			protoVAL.fileElement = protoDollar[1].imprt
		}
	case 10:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].pkg.AddSemicolon(protoDollar[2].b)
			protoVAL.fileElement = protoDollar[1].pkg
		}
	case 11:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].opt.AddSemicolon(protoDollar[2].b)
			protoVAL.fileElement = protoDollar[1].opt
		}
	case 12:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].msg, protoDollar[2].b)
			protoVAL.fileElement = protoDollar[1].msg
		}
	case 13:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].en, protoDollar[2].b)
			protoVAL.fileElement = protoDollar[1].en
		}
	case 14:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].extend, protoDollar[2].b)
			protoVAL.fileElement = protoDollar[1].extend
		}
	case 15:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].svc, protoDollar[2].b)
			protoVAL.fileElement = protoDollar[1].svc
		}
	case 16:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElement = nil
		}
	case 17:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.syn = ast.NewSyntaxNode(protoDollar[1].id.ToKeyword(), protoDollar[2].b, protoDollar[3].sv)
		}
	case 18:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.ed = ast.NewEditionNode(protoDollar[1].id.ToKeyword(), protoDollar[2].b, protoDollar[3].sv)
		}
	case 19:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.imprt = ast.NewImportNode(protoDollar[1].id.ToKeyword(), nil, nil, protoDollar[2].sv)
		}
	case 20:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.imprt = ast.NewImportNode(protoDollar[1].id.ToKeyword(), nil, protoDollar[2].id.ToKeyword(), protoDollar[3].sv)
		}
	case 21:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.imprt = ast.NewImportNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), nil, protoDollar[3].sv)
		}
	case 22:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.pkg = ast.NewPackageNode(protoDollar[1].id.ToKeyword(), protoDollar[2].idv)
		}
	case 23:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.opt = ast.NewOptionNode(protoDollar[1].id.ToKeyword(), protoDollar[2].optName, protoDollar[3].b, protoDollar[4].v)
		}
	case 24:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expected '='", CategoryIncompleteDecl)
			protoVAL.opt = ast.NewIncompleteOptionNode(protoDollar[1].id.ToKeyword(), protoDollar[2].optName, nil, nil)
		}
	case 25:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expected option name", CategoryIncompleteDecl)
			protoVAL.opt = ast.NewIncompleteOptionNode(protoDollar[1].id.ToKeyword(), nil, nil, nil)
		}
	case 26:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.optName = ast.OptionNameNodeFromIdentValue(protoDollar[1].idv)
		}
	case 27:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.optName = protoDollar[1].optName
		}
	case 31:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].v.(*ast.MessageLiteralNode), protoDollar[2].b)
			protoVAL.v = protoDollar[1].v
		}
	case 32:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].sv
		}
	case 34:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].id
		}
	case 35:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].f
		}
	case 36:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, protoDollar[2].f)
		}
	case 37:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, protoDollar[2].f)
		}
	case 38:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			f := ast.NewSpecialFloatLiteralNode(protoDollar[2].id.ToKeyword())
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, f)
		}
	case 39:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			f := ast.NewSpecialFloatLiteralNode(protoDollar[2].id.ToKeyword())
			protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, f)
		}
	case 40:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].i
		}
	case 41:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewPositiveUintLiteralNode(protoDollar[1].b, protoDollar[2].i)
		}
	case 42:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].i.Val > math.MaxInt64+1 {
				// can't represent as int so treat as float literal
				protoVAL.v = ast.NewSignedFloatLiteralNode(protoDollar[1].b, protoDollar[2].i)
			} else {
				protoVAL.v = ast.NewNegativeIntLiteralNode(protoDollar[1].b, protoDollar[2].i)
			}
		}
	case 43:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[2].msgLitFlds == nil {
				protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, nil, nil, protoDollar[3].b)
			} else {
				fields, delimiters := protoDollar[2].msgLitFlds.toNodes()
				protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, fields, delimiters, protoDollar[3].b)
			}
		}
	case 44:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, nil, nil, protoDollar[2].b)
		}
	case 47:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].msgLitFlds != nil {
				protoDollar[1].msgLitFlds.next = protoDollar[2].msgLitFlds
				protoVAL.msgLitFlds = protoDollar[1].msgLitFlds
			} else {
				protoVAL.msgLitFlds = protoDollar[2].msgLitFlds
			}
		}
	case 48:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].msgLitFld != nil {
				protoVAL.msgLitFlds = &messageFieldList{field: protoDollar[1].msgLitFld}
			} else {
				protoVAL.msgLitFlds = nil
			}
		}
	case 49:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].msgLitFld != nil {
				protoVAL.msgLitFlds = &messageFieldList{field: protoDollar[1].msgLitFld, delimiter: protoDollar[2].b}
			} else {
				protoVAL.msgLitFlds = nil
			}
		}
	case 50:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].msgLitFld != nil {
				protoVAL.msgLitFlds = &messageFieldList{field: protoDollar[1].msgLitFld, delimiter: protoDollar[2].b}
			} else {
				protoVAL.msgLitFlds = nil
			}
		}
	case 51:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.msgLitFlds = nil
		}
	case 52:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.msgLitFlds = nil
		}
	case 53:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgLitFlds = nil
		}
	case 54:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[1].ref != nil && protoDollar[2].b != nil {
				protoVAL.msgLitFld = ast.NewMessageFieldNode(protoDollar[1].ref, protoDollar[2].b, protoDollar[3].v)
			} else {
				protoVAL.msgLitFld = nil
			}
		}
	case 55:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].ref != nil && protoDollar[2].v != nil {
				protoVAL.msgLitFld = ast.NewMessageFieldNode(protoDollar[1].ref, nil, protoDollar[2].v)
			} else {
				protoVAL.msgLitFld = nil
			}
		}
	case 56:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.msgLitFld = nil
		}
	case 57:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.id = protoDollar[1].id
		}
	case 59:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 60:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 63:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ref = ast.NewFieldReferenceNode(protoDollar[1].id)
		}
	case 64:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.ref = ast.NewExtensionFieldReferenceNode(protoDollar[1].b, protoDollar[2].idv, protoDollar[3].b)
		}
	case 65:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.ref = ast.NewAnyTypeReferenceNode(protoDollar[1].b, protoDollar[2].idv, protoDollar[3].b, protoDollar[4].idv, protoDollar[5].b)
		}
	case 66:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.ref = nil
		}
	case 68:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].v.(*ast.MessageLiteralNode), protoDollar[2].b)
			protoVAL.v = protoDollar[1].v
		}
	case 69:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].v.(*ast.ArrayLiteralNode), protoDollar[2].b)
			protoVAL.v = protoDollar[1].v
		}
	case 70:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].v.(*ast.MessageLiteralNode), protoDollar[2].b)
			protoVAL.v = protoDollar[1].v
		}
	case 71:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].v.(*ast.ArrayLiteralNode), protoDollar[2].b)
			protoVAL.v = protoDollar[1].v
		}
	case 73:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[2].msgLitFlds == nil {
				protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, nil, nil, protoDollar[3].b)
			} else {
				fields, delimiters := protoDollar[2].msgLitFlds.toNodes()
				protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, fields, delimiters, protoDollar[3].b)
			}
		}
	case 74:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewMessageLiteralNode(protoDollar[1].b, nil, nil, protoDollar[2].b)
		}
	case 75:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			if protoDollar[2].sl == nil {
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[4].b)
			} else {
				if protoDollar[3].b != nil {
					protoDollar[2].sl.commas = append(protoDollar[2].sl.commas, protoDollar[3].b)
				}
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, protoDollar[2].sl.vals, protoDollar[2].sl.commas, protoDollar[4].b)
			}
		}
	case 76:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			if protoDollar[2].sl == nil {
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[5].b)
			} else {
				if protoDollar[3].b != nil {
					protoDollar[2].sl.commas = append(protoDollar[2].sl.commas, protoDollar[3].b)
				}
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, protoDollar[2].sl.vals, protoDollar[2].sl.commas, protoDollar[5].b)
			}
		}
	case 77:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[2].b)
		}
	case 78:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[3].b)
		}
	case 79:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.sl = &valueSlices{vals: []ast.ValueNode{protoDollar[1].v}}
		}
	case 80:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].sl.vals = append(protoDollar[1].sl.vals, protoDollar[3].v)
			protoDollar[1].sl.commas = append(protoDollar[1].sl.commas, protoDollar[2].b)
			protoVAL.sl = protoDollar[1].sl
		}
	case 82:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].v.(*ast.MessageLiteralNode), protoDollar[2].b)
			protoVAL.v = protoDollar[1].v
		}
	case 83:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			if protoDollar[2].sl == nil {
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[4].b)
			} else {
				if protoDollar[3].b != nil {
					protoDollar[2].sl.commas = append(protoDollar[2].sl.commas, protoDollar[3].b)
				}
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, protoDollar[2].sl.vals, protoDollar[2].sl.commas, protoDollar[4].b)
			}
		}
	case 84:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			if protoDollar[2].sl == nil {
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[5].b)
			} else {
				if protoDollar[3].b != nil {
					protoDollar[2].sl.commas = append(protoDollar[2].sl.commas, protoDollar[3].b)
				}
				protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, protoDollar[2].sl.vals, protoDollar[2].sl.commas, protoDollar[5].b)
			}
		}
	case 85:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[2].b)
		}
	case 86:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.v = ast.NewArrayLiteralNode(protoDollar[1].b, nil, nil, protoDollar[3].b)
		}
	case 87:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].v.(*ast.MessageLiteralNode), protoDollar[2].b)
			protoVAL.sl = &valueSlices{vals: []ast.ValueNode{protoDollar[1].v}}
		}
	case 88:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[3].v.(*ast.MessageLiteralNode), protoDollar[4].b)
			protoDollar[1].sl.vals = append(protoDollar[1].sl.vals, protoDollar[3].v)
			protoDollar[1].sl.commas = append(protoDollar[1].sl.commas, protoDollar[2].b)
			protoVAL.sl = protoDollar[1].sl
		}
	case 89:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 90:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 93:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 94:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 97:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 98:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 101:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 102:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 105:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 106:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id
		}
	case 110:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.id = protoDollar[1].id
		}
	case 114:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].opts.commas = append(protoDollar[2].opts.commas, protoDollar[3].b)
			}
			if len(protoDollar[2].opts.options) == 0 {
				protolex.(*protoLex).ErrExtendedSyntax("compact options list cannot be empty", CategoryEmptyDecl)
			}
			protoVAL.cmpctOpts = ast.NewCompactOptionsNode(protoDollar[1].b, protoDollar[2].opts.options, protoDollar[2].opts.commas, protoDollar[4].b)
		}
	case 115:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.opts = &compactOptionSlices{options: []*ast.OptionNode{protoDollar[1].opt}}
		}
	case 116:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if len(protoDollar[1].opts.options) == 0 {
				protolex.(*protoLex).ErrExtendedSyntaxAt("expected option before ','", protoDollar[2].b, CategoryExtraTokens)
			}
			protoDollar[1].opts.options = append(protoDollar[1].opts.options, protoDollar[3].opt)
			protoDollar[1].opts.commas = append(protoDollar[1].opts.commas, protoDollar[2].b)
			protoVAL.opts = protoDollar[1].opts
		}
	case 117:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.opts = &compactOptionSlices{options: []*ast.OptionNode{}}
		}
	case 118:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.opt = ast.NewCompactOptionNode(protoDollar[1].optName, protoDollar[2].b, protoDollar[3].v)
		}
	case 119:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expected '='", CategoryIncompleteDecl)
			protoVAL.opt = ast.NewIncompleteCompactOptionNode(protoDollar[1].optName, nil, nil)
		}
	case 120:
		protoDollar = protoS[protopt-8 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil, protoDollar[6].b, protoDollar[7].msgElements, protoDollar[8].b)
		}
	case 121:
		protoDollar = protoS[protopt-10 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id.ToKeyword(), protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts, protoDollar[8].b, protoDollar[9].msgElements, protoDollar[10].b)
		}
	case 122:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.oo = ast.NewOneofNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].ooElements, protoDollar[5].b)
		}
	case 123:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.ooElements = nil
		}
	case 125:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].ooElement != nil {
				protoVAL.ooElements = append(protoDollar[1].ooElements, protoDollar[2].ooElement)
			} else {
				protoVAL.ooElements = protoDollar[1].ooElements
			}
		}
	case 126:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].ooElement != nil {
				protoVAL.ooElements = []ast.OneofElement{protoDollar[1].ooElement}
			} else {
				protoVAL.ooElements = nil
			}
		}
	case 127:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].opt.AddSemicolon(protoDollar[2].b)
			protoVAL.ooElement = protoDollar[1].opt
		}
	case 128:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].fld.AddSemicolon(protoDollar[2].b)
			protoVAL.ooElement = protoDollar[1].fld
		}
	case 129:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].grp, protoDollar[2].b)
			protoVAL.ooElement = protoDollar[1].grp
		}
	case 130:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ooElement = nil
		}
	case 131:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].idv, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil)
		}
	case 132:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].idv, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts)
		}
	case 133:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(nil, protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil, protoDollar[5].b, protoDollar[6].msgElements, protoDollar[7].b)
		}
	case 134:
		protoDollar = protoS[protopt-9 : protopt+1]
		{
			protoVAL.grp = ast.NewGroupNode(nil, protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts, protoDollar[7].b, protoDollar[8].msgElements, protoDollar[9].b)
		}
	case 135:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.mapFld = ast.NewMapFieldNode(protoDollar[1].mapType, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil)
		}
	case 136:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.mapFld = ast.NewMapFieldNode(protoDollar[1].mapType, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts)
		}
	case 137:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			protoVAL.mapType = ast.NewMapTypeNode(protoDollar[1].id.ToKeyword(), protoDollar[2].b, protoDollar[3].id, protoDollar[4].b, protoDollar[5].idv, protoDollar[6].b)
			ast.AddVirtualSemicolon(protoVAL.mapType, protoDollar[7].b)
		}
	case 150:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].rngs.commas = append(protoDollar[2].rngs.commas, protoDollar[3].b)
			}
			protoVAL.ext = ast.NewExtensionRangeNode(protoDollar[1].id.ToKeyword(), protoDollar[2].rngs.ranges, protoDollar[2].rngs.commas, nil)
		}
	case 151:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].rngs.commas = append(protoDollar[2].rngs.commas, protoDollar[3].b)
			}
			protoVAL.ext = ast.NewExtensionRangeNode(protoDollar[1].id.ToKeyword(), protoDollar[2].rngs.ranges, protoDollar[2].rngs.commas, protoDollar[4].cmpctOpts)
		}
	case 152:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rngs = &rangeSlices{ranges: []*ast.RangeNode{protoDollar[1].rng}}
		}
	case 153:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].rngs.ranges = append(protoDollar[1].rngs.ranges, protoDollar[3].rng)
			protoDollar[1].rngs.commas = append(protoDollar[1].rngs.commas, protoDollar[2].b)
			protoVAL.rngs = protoDollar[1].rngs
		}
	case 154:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].i, nil, nil, nil)
		}
	case 155:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].i, protoDollar[2].id.ToKeyword(), protoDollar[3].i, nil)
		}
	case 156:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].i, protoDollar[2].id.ToKeyword(), nil, protoDollar[3].id.ToKeyword())
		}
	case 157:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rngs = &rangeSlices{ranges: []*ast.RangeNode{protoDollar[1].rng}}
		}
	case 158:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].rngs.ranges = append(protoDollar[1].rngs.ranges, protoDollar[3].rng)
			protoDollar[1].rngs.commas = append(protoDollar[1].rngs.commas, protoDollar[2].b)
			protoVAL.rngs = protoDollar[1].rngs
		}
	case 159:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].il, nil, nil, nil)
		}
	case 160:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].il, protoDollar[2].id.ToKeyword(), protoDollar[3].il, nil)
		}
	case 161:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = ast.NewRangeNode(protoDollar[1].il, protoDollar[2].id.ToKeyword(), nil, protoDollar[3].id.ToKeyword())
		}
	case 162:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.il = protoDollar[1].i
		}
	case 163:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.il = ast.NewNegativeIntLiteralNode(protoDollar[1].b, protoDollar[2].i)
		}
	case 164:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].rngs.commas = append(protoDollar[2].rngs.commas, protoDollar[3].b)
			}
			protoVAL.resvd = ast.NewReservedRangesNode(protoDollar[1].id.ToKeyword(), protoDollar[2].rngs.ranges, protoDollar[2].rngs.commas)
		}
	case 166:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].rngs.commas = append(protoDollar[2].rngs.commas, protoDollar[3].b)
			}
			protoVAL.resvd = ast.NewReservedRangesNode(protoDollar[1].id.ToKeyword(), protoDollar[2].rngs.ranges, protoDollar[2].rngs.commas)
		}
	case 168:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].names.commas = append(protoDollar[2].names.commas, protoDollar[3].b)
			}
			protoVAL.resvd = ast.NewReservedNamesNode(protoDollar[1].id.ToKeyword(), protoDollar[2].names.names, protoDollar[2].names.commas)
		}
	case 169:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.resvd = ast.NewReservedIdentifiersNode(protoDollar[1].id.ToKeyword(), protoDollar[2].names.idents, protoDollar[2].names.commas)
		}
	case 170:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.names = &nameSlices{names: []ast.StringValueNode{protoDollar[1].sv}}
		}
	case 171:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].names.names = append(protoDollar[1].names.names, protoDollar[3].sv)
			protoDollar[1].names.commas = append(protoDollar[1].names.commas, protoDollar[2].b)
			protoVAL.names = protoDollar[1].names
		}
	case 172:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.names = &nameSlices{idents: []*ast.IdentNode{protoDollar[1].id}}
		}
	case 173:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].names.idents = append(protoDollar[1].names.idents, protoDollar[3].id)
			protoDollar[1].names.commas = append(protoDollar[1].names.commas, protoDollar[2].b)
			protoVAL.names = protoDollar[1].names
		}
	case 174:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.en = ast.NewEnumNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].enElements, protoDollar[5].b)
		}
	case 175:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.enElements = nil
		}
	case 177:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].enElement != nil {
				protoVAL.enElements = append(protoDollar[1].enElements, protoDollar[2].enElement)
			} else {
				protoVAL.enElements = protoDollar[1].enElements
			}
		}
	case 178:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].enElement != nil {
				protoVAL.enElements = []ast.EnumElement{protoDollar[1].enElement}
			} else {
				protoVAL.enElements = nil
			}
		}
	case 179:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].opt.AddSemicolon(protoDollar[2].b)
			protoVAL.enElement = protoDollar[1].opt
		}
	case 180:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].env.AddSemicolon(protoDollar[2].b)
			protoVAL.enElement = protoDollar[1].env
		}
	case 181:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].resvd.AddSemicolon(protoDollar[2].b)
			protoVAL.enElement = protoDollar[1].resvd
		}
	case 182:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.enElement = nil
		}
	case 183:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.env = ast.NewEnumValueNode(protoDollar[1].id, protoDollar[2].b, protoDollar[3].il, nil)
		}
	case 184:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.env = ast.NewEnumValueNode(protoDollar[1].id, protoDollar[2].b, protoDollar[3].il, protoDollar[4].cmpctOpts)
		}
	case 185:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.msg = ast.NewMessageNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].msgElements, protoDollar[5].b)
		}
	case 186:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.msgElements = nil
		}
	case 188:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].msgElement != nil {
				protoVAL.msgElements = append(protoDollar[1].msgElements, protoDollar[2].msgElement)
			} else {
				protoVAL.msgElements = protoDollar[1].msgElements
			}
		}
	case 189:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].msgElement != nil {
				protoVAL.msgElements = []ast.MessageElement{protoDollar[1].msgElement}
			} else {
				protoVAL.msgElements = nil
			}
		}
	case 190:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].fld.AddSemicolon(protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].fld
		}
	case 191:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].en, protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].en
		}
	case 192:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].msg, protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].msg
		}
	case 193:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].extend, protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].extend
		}
	case 194:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].ext.AddSemicolon(protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].ext
		}
	case 195:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].grp, protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].grp
		}
	case 196:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].opt.AddSemicolon(protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].opt
		}
	case 197:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].oo, protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].oo
		}
	case 198:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].mapFld.AddSemicolon(protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].mapFld
		}
	case 199:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].resvd.AddSemicolon(protoDollar[2].b)
			protoVAL.msgElement = protoDollar[1].resvd
		}
	case 200:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = ast.NewEmptyDeclNode(protoDollar[1].b)
		}
	case 201:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].idv, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil)
		}
	case 202:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].idv, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts)
		}
	case 203:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].idv, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil)
		}
	case 204:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].idv, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts)
		}
	case 205:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing field number after '='", CategoryIncompleteDecl)
			protoVAL.fld = ast.NewIncompleteFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].idv, protoDollar[3].id, protoDollar[4].b, nil, nil)
		}
	case 206:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing '=' after field name", CategoryIncompleteDecl)
			protoVAL.fld = ast.NewIncompleteFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].idv, protoDollar[3].id, nil, nil, nil)
		}
	case 207:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing field name", CategoryIncompleteDecl)
			protoVAL.fld = ast.NewIncompleteFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].idv, nil, nil, nil, nil)
		}
	case 208:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing field number after '='", CategoryIncompleteDecl)
			protoVAL.fld = ast.NewIncompleteFieldNode(nil, protoDollar[1].idv, protoDollar[2].id, protoDollar[3].b, nil, nil)
		}
	case 209:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing '=' after field name", CategoryIncompleteDecl)
			protoVAL.fld = ast.NewIncompleteFieldNode(nil, protoDollar[1].idv, protoDollar[2].id, nil, nil, nil)
		}
	case 210:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing field name", CategoryIncompleteDecl)
			protoVAL.fld = ast.NewIncompleteFieldNode(nil, protoDollar[1].idv, nil, nil, nil, nil)
		}
	case 211:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing field type", CategoryIncompleteDecl)
			protoVAL.fld = ast.NewIncompleteFieldNode(protoDollar[1].id.ToKeyword(), nil, nil, nil, nil, nil)
		}
	case 212:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.extend = ast.NewExtendNode(protoDollar[1].id.ToKeyword(), protoDollar[2].idv, protoDollar[3].b, protoDollar[4].extElements, protoDollar[5].b)
		}
	case 213:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.extElements = nil
		}
	case 215:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].extElement != nil {
				protoVAL.extElements = append(protoDollar[1].extElements, protoDollar[2].extElement)
			} else {
				protoVAL.extElements = protoDollar[1].extElements
			}
		}
	case 216:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].extElement != nil {
				protoVAL.extElements = []ast.ExtendElement{protoDollar[1].extElement}
			} else {
				protoVAL.extElements = nil
			}
		}
	case 217:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].fld.AddSemicolon(protoDollar[2].b)
			protoVAL.extElement = protoDollar[1].fld
		}
	case 218:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].grp, protoDollar[2].b)
			protoVAL.extElement = protoDollar[1].grp
		}
	case 219:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.extElement = nil
		}
	case 220:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].idv, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, nil)
		}
	case 221:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(protoDollar[1].id.ToKeyword(), protoDollar[2].idv, protoDollar[3].id, protoDollar[4].b, protoDollar[5].i, protoDollar[6].cmpctOpts)
		}
	case 222:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].idv, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, nil)
		}
	case 223:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = ast.NewFieldNode(nil, protoDollar[1].idv, protoDollar[2].id, protoDollar[3].b, protoDollar[4].i, protoDollar[5].cmpctOpts)
		}
	case 224:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.svc = ast.NewServiceNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].b, protoDollar[4].svcElements, protoDollar[5].b)
		}
	case 225:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.svcElements = nil
		}
	case 227:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].svcElement != nil {
				protoVAL.svcElements = append(protoDollar[1].svcElements, protoDollar[2].svcElement)
			} else {
				protoVAL.svcElements = protoDollar[1].svcElements
			}
		}
	case 228:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].svcElement != nil {
				protoVAL.svcElements = []ast.ServiceElement{protoDollar[1].svcElement}
			} else {
				protoVAL.svcElements = nil
			}
		}
	case 229:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].opt.AddSemicolon(protoDollar[2].b)
			protoVAL.svcElement = protoDollar[1].opt
		}
	case 230:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].mtd.AddSemicolon(protoDollar[2].b)
			protoVAL.svcElement = protoDollar[1].mtd
		}
	case 231:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			ast.AddVirtualSemicolon(protoDollar[1].mtd, protoDollar[2].b)
			protoVAL.svcElement = protoDollar[1].mtd
		}
	case 232:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.svcElement = nil
		}
	case 233:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.mtd = ast.NewRPCNode(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].mtdMsgType, protoDollar[4].id.ToKeyword(), protoDollar[5].mtdMsgType)
		}
	case 234:
		protoDollar = protoS[protopt-8 : protopt+1]
		{
			protoVAL.mtd = ast.NewRPCNodeWithBody(protoDollar[1].id.ToKeyword(), protoDollar[2].id, protoDollar[3].mtdMsgType, protoDollar[4].id.ToKeyword(), protoDollar[5].mtdMsgType, protoDollar[6].b, protoDollar[7].mtdElements, protoDollar[8].b)
		}
	case 235:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.mtdMsgType = ast.NewRPCTypeNode(protoDollar[1].b, protoDollar[2].id.ToKeyword(), protoDollar[3].idv, protoDollar[4].b)
		}
	case 236:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.mtdMsgType = ast.NewRPCTypeNode(protoDollar[1].b, nil, protoDollar[2].idv, protoDollar[3].b)
		}
	case 237:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.mtdElements = nil
		}
	case 239:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].mtdElement != nil {
				protoVAL.mtdElements = append(protoDollar[1].mtdElements, protoDollar[2].mtdElement)
			} else {
				protoVAL.mtdElements = protoDollar[1].mtdElements
			}
		}
	case 240:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].mtdElement != nil {
				protoVAL.mtdElements = []ast.RPCElement{protoDollar[1].mtdElement}
			} else {
				protoVAL.mtdElements = nil
			}
		}
	case 241:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].opt.AddSemicolon(protoDollar[2].b)
			protoVAL.mtdElement = protoDollar[1].opt
		}
	case 242:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.mtdElement = nil
		}
	case 520:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntaxAt("unexpected trailing comma", protoDollar[1].b, CategoryExtraTokens)
			protoVAL.b = protoDollar[1].b
		}
	case 521:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.b = nil
		}
	case 522:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.b = protoDollar[1].b
		}
	case 523:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntaxAt("expected ';', found ','", protoDollar[1].b, CategoryIncorrectToken)
			protoVAL.b = protoDollar[1].b
		}
	case 524:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].b.Virtual {
				protolex.(*protoLex).ErrExtendedSyntaxAt("expected ';'", protoDollar[1].b, CategoryMissingToken)
			}
			protoVAL.b = protoDollar[1].b
		}
	}
	goto protostack /* stack new state and value */
}
