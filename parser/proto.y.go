// Code generated by goyacc -o proto.y.go -l -p proto proto.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

//lint:file-ignore SA4006 generated parser has unused values

import (
	"math"

	"github.com/kralicky/protocompile/ast"
)

type protoSymType struct {
	yys          int
	file         *ast.FileNode
	syn          *ast.SyntaxNode
	ed           *ast.EditionNode
	fileElement  *ast.FileElement
	fileElements []*ast.FileElement
	pkg          *ast.PackageNode
	imprt        *ast.ImportNode
	msg          *ast.MessageNode
	msgElement   *ast.MessageElement
	msgElements  []*ast.MessageElement
	fld          *ast.FieldNode
	mapFld       *ast.MapFieldNode
	mapType      *ast.MapTypeNode
	grp          *ast.GroupNode
	oo           *ast.OneofNode
	ooElement    *ast.OneofElement
	ooElements   []*ast.OneofElement
	ext          *ast.ExtensionRangeNode
	resvd        *ast.ReservedNode
	en           *ast.EnumNode
	enElement    *ast.EnumElement
	enElements   []*ast.EnumElement
	env          *ast.EnumValueNode
	extend       *ast.ExtendNode
	extElement   *ast.ExtendElement
	extElements  []*ast.ExtendElement
	svc          *ast.ServiceNode
	svcElement   *ast.ServiceElement
	svcElements  []*ast.ServiceElement
	mtd          *ast.RPCNode
	mtdMsgType   *ast.RPCTypeNode
	mtdElement   *ast.RPCElement
	mtdElements  []*ast.RPCElement
	opt          *ast.OptionNode
	opts         *compactOptionSlices
	ref          *ast.FieldReferenceNode
	refp         *fieldRefParens
	optName      *ast.OptionNameNode
	cmpctOpts    *ast.CompactOptionsNode
	rng          *ast.RangeNode
	rngs         *rangeSlices
	names        *nameSlices
	cid          *identSlices
	xid          *identSlices
	idv          *ast.IdentValueNode
	sl           *valueSlices
	msgLitFlds   *messageFieldList
	msgLitFld    *ast.MessageFieldNode
	v            *ast.ValueNode
	il           *ast.IntValueNode
	sv           *ast.StringValueNode
	i            *ast.UintLiteralNode
	f            *ast.FloatLiteralNode
	id           *ast.IdentNode
	b            *ast.RuneNode
	err          error
}

const _STRING_LIT = 57346
const _INT_LIT = 57347
const _FLOAT_LIT = 57348
const _EXTENSION_IDENT = 57349
const _SYNTAX = 57350
const _EDITION = 57351
const _IMPORT = 57352
const _WEAK = 57353
const _PUBLIC = 57354
const _PACKAGE = 57355
const _OPTION = 57356
const _TRUE = 57357
const _FALSE = 57358
const _INF = 57359
const _NAN = 57360
const _REPEATED = 57361
const _OPTIONAL = 57362
const _REQUIRED = 57363
const _DOUBLE = 57364
const _FLOAT = 57365
const _INT32 = 57366
const _INT64 = 57367
const _UINT32 = 57368
const _UINT64 = 57369
const _SINT32 = 57370
const _SINT64 = 57371
const _FIXED32 = 57372
const _FIXED64 = 57373
const _SFIXED32 = 57374
const _SFIXED64 = 57375
const _BOOL = 57376
const _STRING = 57377
const _BYTES = 57378
const _GROUP = 57379
const _ONEOF = 57380
const _MAP = 57381
const _EXTENSIONS = 57382
const _TO = 57383
const _MAX = 57384
const _RESERVED = 57385
const _ENUM = 57386
const _MESSAGE = 57387
const _EXTEND = 57388
const _SERVICE = 57389
const _RPC = 57390
const _STREAM = 57391
const _RETURNS = 57392
const _SINGULAR_IDENT = 57393
const _QUALIFIED_IDENT = 57394
const _FULLY_QUALIFIED_IDENT = 57395
const _ERROR = 57396

var protoToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"_STRING_LIT",
	"_INT_LIT",
	"_FLOAT_LIT",
	"_EXTENSION_IDENT",
	"_SYNTAX",
	"_EDITION",
	"_IMPORT",
	"_WEAK",
	"_PUBLIC",
	"_PACKAGE",
	"_OPTION",
	"_TRUE",
	"_FALSE",
	"_INF",
	"_NAN",
	"_REPEATED",
	"_OPTIONAL",
	"_REQUIRED",
	"_DOUBLE",
	"_FLOAT",
	"_INT32",
	"_INT64",
	"_UINT32",
	"_UINT64",
	"_SINT32",
	"_SINT64",
	"_FIXED32",
	"_FIXED64",
	"_SFIXED32",
	"_SFIXED64",
	"_BOOL",
	"_STRING",
	"_BYTES",
	"_GROUP",
	"_ONEOF",
	"_MAP",
	"_EXTENSIONS",
	"_TO",
	"_MAX",
	"_RESERVED",
	"_ENUM",
	"_MESSAGE",
	"_EXTEND",
	"_SERVICE",
	"_RPC",
	"_STREAM",
	"_RETURNS",
	"_SINGULAR_IDENT",
	"_QUALIFIED_IDENT",
	"_FULLY_QUALIFIED_IDENT",
	"_ERROR",
	"'='",
	"';'",
	"':'",
	"'{'",
	"'}'",
	"'\\\\'",
	"'/'",
	"'?'",
	"','",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'('",
	"')'",
	"'['",
	"']'",
	"'*'",
	"'&'",
	"'^'",
	"'%'",
	"'$'",
	"'#'",
	"'@'",
	"'!'",
	"'~'",
	"'`'",
}

var protoStatenames = [...]string{}

const protoEofCode = 1
const protoErrCode = 2
const protoInitialStackSize = 16

var protoExca = [...]int16{
	-1, 0,
	1, 6,
	-2, 0,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 4,
	1, 3,
	-2, 0,
	-1, 24,
	1, 1,
	-2, 0,
	-1, 26,
	1, 2,
	-2, 0,
	-1, 98,
	1, 4,
	-2, 0,
	-1, 99,
	1, 5,
	-2, 0,
	-1, 106,
	59, 181,
	-2, 0,
	-1, 107,
	59, 221,
	-2, 0,
	-1, 108,
	59, 235,
	-2, 0,
	-1, 183,
	59, 182,
	-2, 0,
	-1, 236,
	59, 222,
	-2, 0,
	-1, 248,
	59, 236,
	-2, 0,
	-1, 260,
	59, 51,
	64, 51,
	-2, 0,
	-1, 390,
	59, 129,
	-2, 0,
	-1, 446,
	59, 130,
	-2, 0,
	-1, 613,
	59, 247,
	-2, 0,
	-1, 628,
	59, 248,
	-2, 0,
}

const protoPrivate = 57344

const protoLast = 1702

var protoAct = [...]int16{
	33, 440, 10, 629, 110, 422, 12, 577, 561, 429,
	11, 13, 605, 35, 36, 37, 135, 122, 93, 24,
	26, 506, 447, 414, 352, 30, 31, 32, 351, 332,
	562, 90, 257, 387, 563, 256, 249, 42, 42, 129,
	237, 42, 142, 184, 124, 134, 133, 424, 331, 130,
	41, 132, 125, 618, 96, 637, 7, 377, 120, 615,
	600, 27, 596, 594, 593, 121, 569, 441, 92, 95,
	381, 97, 441, 341, 567, 566, 436, 441, 614, 590,
	415, 353, 353, 120, 612, 607, 258, 435, 376, 433,
	121, 259, 606, 374, 25, 375, 433, 592, 565, 499,
	373, 347, 431, 410, 395, 394, 388, 649, 131, 185,
	113, 250, 126, 646, 245, 645, 127, 128, 244, 503,
	639, 633, 579, 365, 355, 342, 131, 273, 274, 275,
	126, 277, 270, 279, 127, 128, 647, 634, 613, 111,
	390, 335, 272, 354, 354, 108, 276, 243, 278, 191,
	280, 281, 115, 242, 240, 27, 27, 239, 120, 241,
	238, 107, 106, 433, 264, 121, 16, 105, 271, 34,
	25, 430, 5, 6, 17, 571, 369, 18, 19, 364,
	16, 363, 362, 361, 360, 330, 185, 334, 17, 340,
	336, 18, 19, 359, 610, 609, 608, 496, 438, 437,
	386, 349, 344, 346, 348, 104, 29, 28, 21, 20,
	22, 23, 383, 504, 412, 15, 443, 389, 253, 4,
	267, 266, 21, 20, 22, 23, 191, 343, 626, 15,
	19, 625, 555, 556, 578, 586, 267, 266, 340, 573,
	358, 572, 333, 245, 98, 631, 99, 244, 268, 269,
	439, 250, 38, 444, 89, 357, 413, 19, 497, 39,
	40, 103, 382, 102, 254, 101, 100, 367, 368, 116,
	345, 627, 628, 252, 251, 247, 243, 356, 248, 14,
	235, 236, 242, 240, 186, 366, 239, 182, 241, 238,
	183, 371, 350, 372, 187, 338, 337, 445, 379, 446,
	123, 140, 370, 450, 449, 261, 255, 260, 264, 428,
	557, 283, 451, 452, 137, 192, 189, 507, 458, 459,
	460, 461, 462, 463, 19, 464, 465, 466, 467, 284,
	384, 385, 468, 469, 470, 471, 472, 473, 474, 475,
	476, 477, 478, 479, 480, 481, 482, 453, 483, 484,
	485, 486, 487, 488, 489, 490, 491, 492, 493, 494,
	495, 455, 456, 457, 454, 146, 136, 396, 378, 380,
	392, 393, 420, 114, 409, 622, 109, 416, 417, 263,
	426, 427, 575, 391, 411, 9, 8, 3, 2, 1,
	0, 0, 434, 448, 397, 398, 399, 400, 401, 402,
	403, 404, 405, 406, 407, 408, 0, 0, 418, 0,
	0, 500, 419, 0, 0, 0, 432, 0, 442, 0,
	553, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 568, 0, 558, 0, 502, 564, 501,
	0, 574, 0, 498, 0, 0, 0, 0, 0, 448,
	0, 583, 0, 0, 42, 0, 0, 0, 0, 0,
	42, 0, 0, 0, 0, 581, 582, 570, 0, 580,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 585, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 42, 0,
	0, 0, 0, 0, 0, 0, 0, 589, 588, 0,
	0, 587, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 595, 0, 0, 591, 0, 0,
	598, 0, 0, 0, 601, 602, 0, 0, 0, 0,
	599, 0, 0, 604, 0, 0, 0, 0, 611, 0,
	0, 0, 0, 0, 42, 0, 0, 0, 617, 0,
	597, 616, 620, 131, 0, 0, 0, 126, 0, 0,
	0, 127, 128, 623, 113, 0, 630, 621, 619, 632,
	0, 0, 0, 0, 0, 635, 0, 636, 638, 0,
	0, 630, 640, 0, 0, 0, 0, 131, 0, 644,
	131, 126, 0, 624, 126, 127, 128, 641, 127, 128,
	131, 0, 642, 0, 126, 643, 115, 0, 127, 128,
	560, 0, 421, 119, 117, 648, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 87, 88, 94,
	0, 0, 0, 0, 0, 0, 120, 0, 0, 0,
	0, 433, 0, 121, 0, 423, 421, 119, 117, 559,
	46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
	86, 87, 88, 94, 0, 0, 0, 0, 34, 0,
	120, 0, 0, 0, 0, 0, 0, 121, 0, 423,
	0, 0, 425, 91, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 43, 44, 45,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 603, 91, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 81, 82, 83, 84, 85, 86,
	87, 88, 43, 44, 45, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 262, 0, 0,
	0, 0, 576, 46, 47, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
	83, 84, 85, 86, 87, 88, 94, 0, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 0, 0, 259,
	0, 0, 112, 119, 117, 265, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 87, 88, 94,
	0, 0, 0, 0, 0, 0, 120, 0, 0, 0,
	0, 0, 0, 121, 0, 118, 421, 119, 117, 0,
	46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
	86, 87, 88, 94, 0, 0, 0, 0, 0, 0,
	120, 0, 0, 0, 262, 0, 0, 121, 0, 423,
	46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
	86, 87, 88, 94, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 339,
	353, 0, 265, 46, 47, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
	83, 84, 85, 86, 87, 88, 94, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 354, 151, 152, 153, 154, 155, 156, 19,
	157, 158, 159, 160, 145, 144, 143, 161, 162, 163,
	164, 165, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 0, 139, 150, 138, 176, 177, 141, 21,
	20, 22, 178, 179, 180, 181, 147, 148, 149, 0,
	0, 25, 91, 46, 47, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
	83, 84, 85, 86, 87, 88, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 81, 82, 83, 84, 85, 86,
	87, 88, 43, 44, 45, 511, 512, 513, 514, 515,
	516, 517, 518, 519, 520, 521, 522, 523, 524, 525,
	526, 527, 528, 529, 530, 531, 532, 533, 534, 535,
	536, 537, 538, 539, 540, 541, 542, 543, 544, 545,
	546, 547, 548, 549, 550, 551, 505, 552, 508, 509,
	510, 288, 289, 290, 291, 292, 293, 294, 295, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 306,
	307, 308, 309, 310, 311, 312, 313, 314, 315, 316,
	282, 317, 318, 319, 320, 321, 322, 323, 324, 325,
	326, 327, 328, 329, 285, 286, 287, 511, 512, 513,
	514, 515, 516, 517, 518, 519, 520, 521, 522, 523,
	524, 525, 526, 527, 528, 529, 530, 531, 532, 533,
	534, 535, 536, 537, 538, 539, 540, 541, 542, 543,
	544, 545, 546, 547, 548, 549, 550, 551, 246, 552,
	508, 509, 510, 0, 151, 152, 153, 154, 155, 156,
	0, 157, 158, 159, 160, 145, 144, 143, 161, 162,
	163, 164, 165, 166, 167, 168, 169, 170, 171, 172,
	173, 174, 175, 0, 139, 150, 138, 176, 177, 141,
	21, 20, 0, 178, 179, 180, 181, 147, 148, 149,
	339, 333, 0, 0, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 94, 188, 0,
	0, 0, 0, 0, 194, 195, 196, 197, 198, 199,
	19, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 190,
	228, 229, 230, 231, 232, 233, 234, 193, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 80, 81, 82, 83, 84, 85, 86, 87,
	88, 94,
}

var protoPact = [...]int16{
	164, -1000, 114, 114, 178, 152, 151, -1000, 114, 114,
	114, 113, 113, 113, 113, -1000, -1000, 248, 1321, 1275,
	1650, 1650, 1321, 1650, 178, -1000, 178, -1000, 262, 261,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 259,
	257, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 150,
	-1000, -1000, 109, -1000, -1000, 104, 103, 87, 178, 178,
	-1000, -1000, -1000, -1000, 978, 1225, 1606, 1506, 216, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 915, -1000, 231, -1000,
	-1000, -1000, 73, 1225, -1000, 114, 113, 113, 113, 114,
	113, 114, 113, 114, 114, -1000, 1413, 1650, 237, 1650,
	113, 1556, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	8, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 66, 1606, -1000, 114, 38, 114, -1000, 146,
	1165, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 65, 1506, -1000, 114, 113,
	137, 128, 127, 126, 125, 123, -1000, 64, 216, -1000,
	114, 114, 120, -1000, 1650, 27, -1000, -1000, -1000, -1000,
	1102, 37, 32, 0, -1000, 210, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1650, 1650, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	145, 43, -1000, 176, 82, 1650, 43, 42, 41, -1000,
	-1000, 370, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 76,
	40, -1000, 173, -1000, 251, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	12, -1000, -1000, -1000, -1000, -1000, -1000, 722, -1000, 113,
	113, 100, 26, 5, 144, 143, 245, 7, 237, 211,
	310, 142, -1000, -1000, 254, 1650, 36, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 7,
	76, -1000, 77, -1000, 163, 1367, -1000, -1000, -1000, 113,
	113, -1000, -1000, 215, -1000, 658, -1000, -1000, 35, 4,
	-1000, 3, 113, -1000, -5, 1321, 119, 236, 234, 7,
	-1000, 851, -1000, -1000, -1000, 63, 310, -1000, 114, 114,
	113, -1000, 1650, 1650, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 230, -1000, -1000, 1321,
	-1000, -1000, -1000, -1000, 12, 1459, 10, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 34, -7, -1000,
	-8, -1000, -1000, 113, -9, 25, -1000, -1000, -1000, 113,
	33, -1000, 2, 7, -1000, 786, -1000, 29, 141, -1000,
	-1000, -1000, -1000, -1000, 140, 139, 7, 20, 80, 9,
	-1000, -12, 1042, -1000, -1000, -1000, -1000, 113, -1000, -18,
	1225, 113, -1000, -1000, 29, -1000, -1000, -1000, 978, 226,
	223, -1000, -1000, 243, -1000, -1000, -1000, -1000, 113, 62,
	79, -1000, -1000, -1000, 113, 7, -3, 61, 243, -1000,
	114, -1000, -1000, -1000, 1225, -1000, -1000, 1225, 113, -1000,
	-1000, -1000, 56, 54, 78, -1000, -1000, 1225, 48, -1000,
}

var protoPgo = [...]int16{
	0, 389, 388, 387, 56, 219, 386, 385, 2, 7,
	382, 379, 234, 1, 377, 376, 375, 4, 30, 34,
	5, 373, 372, 8, 369, 368, 24, 47, 18, 367,
	366, 365, 364, 329, 317, 316, 315, 31, 314, 313,
	311, 21, 310, 309, 307, 32, 306, 305, 52, 304,
	51, 49, 303, 46, 301, 10, 44, 300, 17, 22,
	299, 297, 296, 295, 45, 294, 42, 29, 28, 48,
	292, 39, 6, 43, 290, 287, 284, 11, 40, 281,
	280, 279, 36, 278, 275, 274, 273, 3, 272, 271,
	23, 270, 33, 9, 16, 0, 12, 269, 35,
}

var protoR1 = [...]int8{
	0, 1, 1, 1, 1, 1, 1, 5, 5, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 2, 3,
	6, 6, 6, 6, 6, 6, 7, 7, 8, 8,
	8, 8, 12, 12, 15, 15, 16, 16, 17, 17,
	17, 17, 20, 20, 20, 20, 21, 21, 19, 19,
	46, 45, 45, 44, 44, 44, 44, 44, 44, 47,
	47, 47, 27, 27, 37, 37, 37, 37, 11, 11,
	11, 11, 14, 14, 14, 18, 18, 18, 18, 18,
	25, 25, 22, 22, 22, 22, 42, 42, 23, 23,
	24, 24, 24, 24, 43, 43, 38, 38, 38, 38,
	39, 39, 39, 39, 40, 40, 40, 40, 41, 41,
	41, 41, 41, 35, 35, 30, 30, 30, 13, 13,
	10, 10, 9, 9, 9, 9, 51, 51, 50, 61,
	61, 60, 60, 59, 59, 59, 59, 49, 49, 52,
	52, 53, 53, 54, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 71, 71, 69, 69,
	67, 67, 67, 70, 70, 68, 68, 68, 26, 26,
	64, 64, 65, 65, 66, 66, 62, 62, 63, 63,
	72, 75, 75, 74, 74, 73, 73, 73, 73, 76,
	76, 55, 58, 58, 57, 57, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 48, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 48, 77, 77,
	77, 80, 80, 79, 79, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 81, 84, 84, 83, 83, 82,
	82, 82, 82, 85, 86, 90, 90, 89, 89, 88,
	88, 87, 87, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 92, 92, 91, 91, 94, 95, 93, 96, 96,
	97, 97, 98, 98,
}

var protoR2 = [...]int8{
	0, 2, 2, 1, 3, 3, 0, 2, 1, 2,
	2, 2, 2, 2, 2, 2, 1, 1, 3, 3,
	2, 3, 3, 1, 2, 2, 2, 1, 4, 3,
	2, 1, 1, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 2, 2, 3, 2,
	1, 1, 2, 1, 2, 2, 2, 2, 1, 3,
	3, 2, 1, 1, 1, 1, 1, 1, 1, 5,
	7, 4, 1, 2, 2, 1, 1, 2, 2, 1,
	2, 2, 4, 3, 2, 3, 1, 3, 1, 2,
	4, 3, 2, 3, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 3, 2,
	2, 3, 3, 2, 1, 0, 8, 10, 5, 0,
	1, 2, 1, 2, 2, 2, 1, 4, 5, 7,
	9, 5, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 4, 1, 3,
	1, 3, 3, 1, 3, 1, 3, 3, 1, 2,
	3, 1, 3, 1, 3, 2, 1, 3, 1, 3,
	5, 0, 1, 2, 1, 2, 2, 2, 1, 3,
	4, 5, 0, 1, 2, 1, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 1, 5, 6, 4,
	5, 4, 3, 2, 3, 2, 1, 1, 5, 2,
	1, 0, 1, 2, 1, 2, 2, 2, 2, 2,
	2, 2, 2, 1, 5, 0, 1, 2, 1, 2,
	2, 2, 1, 5, 8, 4, 3, 0, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}

var protoChk = [...]int16{
	-1000, -1, -2, -3, -5, 8, 9, -4, -6, -7,
	-8, -55, -72, -77, -81, 51, 2, 10, 13, 14,
	45, 44, 46, 47, -94, 56, -94, -4, 55, 55,
	-94, -94, -94, -95, 56, -95, -95, -95, 4, 11,
	12, -37, -28, 51, 52, 53, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, -12,
	-37, 7, -27, -28, 51, -27, -37, -27, -5, -5,
	4, 4, 4, 4, 55, 58, 58, 58, 58, -15,
	-17, -19, 4, -20, -21, -27, -97, 6, 67, 5,
	58, 65, -58, -57, -56, -48, -72, -55, -77, -71,
	-51, -8, -50, -53, -64, -94, -30, -38, 40, 38,
	-54, 43, -66, 21, 20, 19, -31, 51, 52, 53,
	39, 8, 9, 10, 11, 12, 13, 15, 16, 17,
	18, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 36, 41, 42, 47, 48,
	49, 50, -75, -74, -73, -8, -76, -65, 2, -35,
	43, -66, -36, 51, 8, 9, 10, 11, 12, 13,
	15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
	25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
	35, 36, 37, 38, 39, 40, 41, 42, 44, 45,
	46, 47, 48, 49, 50, -80, -79, -78, -48, -51,
	-53, -50, -64, -71, -55, -72, 2, -84, -83, -82,
	-8, -85, -86, 2, 48, -46, -98, -45, 59, 64,
	-44, -47, 2, -11, -27, 70, 6, 5, 17, 18,
	59, -56, -94, -95, -95, -95, -94, -95, -94, -95,
	-94, -94, 37, -40, -33, 51, 52, 53, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
	-27, -69, -67, 5, -27, -95, -69, -62, -63, 4,
	-27, 65, 59, -73, -94, -91, -94, 63, -94, 55,
	-70, -68, -26, 5, 67, 59, -78, -94, -95, 56,
	56, 56, 56, 56, 56, 59, -82, -94, -94, 56,
	-27, -98, -45, 63, 56, 63, 56, 57, -25, -19,
	-24, 70, 52, 2, -27, -27, 55, -92, 63, 41,
	58, -27, -92, -92, 63, 63, -29, 24, 25, 26,
	27, 28, 29, 30, 31, 32, 33, 34, 35, -26,
	63, -92, 41, 5, -90, 68, -14, -95, -18, -19,
	-22, 4, -20, 67, -27, 70, -95, -95, -43, -93,
	71, 2, -19, 63, -93, 61, 71, 55, 55, 5,
	-13, 70, -67, 5, 42, -61, -60, -59, -8, -49,
	-52, 2, -39, 37, -32, 51, 52, 53, 8, 9,
	10, 11, 12, 13, 15, 16, 17, 18, 22, 23,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 55, 4, -27, 63,
	-13, -68, -26, 42, 50, 49, -41, -34, 51, 52,
	53, 8, 9, 10, 11, 12, 13, 14, 15, 16,
	17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
	27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 50, -95, -95, 17, 18, -42, -93, 71,
	2, -23, -18, -19, -93, 63, 71, 71, -95, 71,
	-37, 56, 5, 5, -13, -10, 71, -9, -12, 59,
	-59, -94, -94, -95, -27, -27, 5, -37, -90, -41,
	69, -93, 63, 71, 71, -95, 71, -19, -95, -93,
	58, -13, -13, 71, -9, -96, 63, 56, 55, 55,
	55, -13, 64, 58, 69, 71, -23, -95, 71, -58,
	-95, -96, -16, -17, -19, 5, 5, -89, -88, -87,
	-8, 2, -95, 59, 58, -95, -13, 58, -13, 59,
	-87, -94, -58, -58, -95, 59, 59, 58, -58, 59,
}

var protoDef = [...]int16{
	-2, -2, 0, 0, -2, 0, 0, 8, 0, 0,
	0, 0, 0, 0, 0, 16, 17, 23, 27, 31,
	0, 0, 220, 0, -2, 495, -2, 7, 0, 0,
	9, 10, 11, 12, 496, 13, 14, 15, 20, 24,
	25, 26, 64, 65, 66, 67, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 457, 458, 459, 460, 461,
	462, 463, 464, 465, 466, 467, 468, 469, 470, 471,
	472, 473, 474, 475, 476, 477, 478, 479, 480, 481,
	482, 483, 484, 485, 486, 487, 488, 489, 490, 30,
	32, 33, 0, 62, 63, 0, 219, 0, -2, -2,
	18, 19, 21, 22, 29, 192, -2, -2, -2, 28,
	34, 35, 38, 39, 40, 41, 0, 42, 0, 44,
	500, 501, 0, 193, 195, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 217, 216, 0, 0,
	0, 0, 171, 115, 116, 117, 96, 97, 98, 99,
	278, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 279, 280, 281, 282,
	283, 284, 0, -2, 184, 0, 0, 0, 188, 0,
	0, 173, 113, 114, 285, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 296, 297, 298, 299, 300,
	301, 302, 303, 304, 305, 306, 307, 308, 309, 310,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 322, 323, 324, 325, 0, -2, 224, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, -2, 238,
	0, 0, 0, 242, 0, 0, 49, 50, 502, 503,
	-2, 53, 58, 0, 68, 0, 43, 45, 46, 47,
	191, 194, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 0, 213, 104, 105, 106, 107, 364, 365,
	366, 367, 368, 369, 370, 371, 372, 373, 374, 375,
	376, 377, 378, 379, 380, 381, 382, 383, 384, 385,
	386, 387, 388, 389, 390, 391, 392, 393, 394, 395,
	396, 397, 398, 399, 400, 401, 402, 403, 404, 405,
	215, 492, 158, 160, 0, 0, 492, 492, 175, 176,
	178, 0, 180, 183, 185, 186, 493, 494, 187, 0,
	492, 163, 165, 168, 0, 218, 223, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 237, 239, 240, 241,
	0, 48, 52, 54, 55, 56, 57, 0, 61, 0,
	0, 0, 0, 0, 0, 212, 214, 156, 491, 0,
	-2, 0, 170, 174, 491, 0, 0, 144, 145, 146,
	147, 148, 149, 150, 151, 152, 153, 154, 155, 189,
	491, 172, 0, 169, 0, 112, 59, 60, 72, 0,
	0, 75, 76, 0, 79, 0, 80, 81, 0, 0,
	92, 0, 0, 497, 0, 0, 0, 0, 211, 209,
	157, 125, 159, 161, 162, 0, -2, 132, 0, 0,
	0, 136, 0, 0, 100, 101, 102, 103, 326, 327,
	328, 329, 330, 331, 332, 333, 334, 335, 336, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 360, 361, 362, 363, 0, 177, 179, 0,
	190, 164, 166, 167, 0, 112, 0, 108, 109, 110,
	111, 406, 407, 408, 409, 410, 411, 412, 413, 414,
	415, 416, 417, 418, 419, 420, 421, 422, 423, 424,
	425, 426, 427, 428, 429, 430, 431, 432, 433, 434,
	435, 436, 437, 438, 439, 440, 441, 442, 443, 444,
	445, 446, 447, 73, 74, 77, 78, 0, 0, 84,
	0, 86, 88, 0, 0, 497, 91, 93, 94, 0,
	0, 71, 0, 207, 210, 125, 119, 0, 124, 128,
	131, 133, 134, 135, 0, 0, 141, 0, 243, 0,
	246, 0, 497, 83, 85, 89, 90, 0, 69, 0,
	192, 0, 208, 118, 0, 120, 498, 499, 123, 0,
	0, 142, 143, -2, 245, 82, 87, 95, 0, 0,
	0, 121, 122, 36, 0, 137, 0, 0, -2, 250,
	0, 252, 70, 126, 192, 37, 138, 192, 0, 244,
	249, 251, 0, 0, 0, 127, 139, 192, 0, 140,
}

var protoTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 77, 76, 75, 73, 3,
	68, 69, 72, 66, 63, 67, 3, 61, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 57, 56,
	65, 55, 64, 62, 78, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 70, 60, 71, 74, 3, 81, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 58, 3, 59, 80,
}

var protoTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54,
}

var protoTok3 = [...]int8{
	0,
}

var protoErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	protoDebug        = 0
	protoErrorVerbose = false
)

type protoLexer interface {
	Lex(lval *protoSymType) int
	Error(s string)
}

type protoParser interface {
	Parse(protoLexer) int
	Lookahead() int
}

type protoParserImpl struct {
	lval  protoSymType
	stack [protoInitialStackSize]protoSymType
	char  int
}

func (p *protoParserImpl) Lookahead() int {
	return p.char
}

func protoNewParser() protoParser {
	return &protoParserImpl{}
}

const protoFlag = -1000

func protoTokname(c int) string {
	if c >= 1 && c-1 < len(protoToknames) {
		if protoToknames[c-1] != "" {
			return protoToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func protoStatname(s int) string {
	if s >= 0 && s < len(protoStatenames) {
		if protoStatenames[s] != "" {
			return protoStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func protoErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !protoErrorVerbose {
		return "syntax error"
	}

	for _, e := range protoErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + protoTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(protoPact[state])
	for tok := TOKSTART; tok-1 < len(protoToknames); tok++ {
		if n := base + tok; n >= 0 && n < protoLast && int(protoChk[int(protoAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if protoDef[state] == -2 {
		i := 0
		for protoExca[i] != -1 || int(protoExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; protoExca[i] >= 0; i += 2 {
			tok := int(protoExca[i])
			if tok < TOKSTART || protoExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if protoExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += protoTokname(tok)
	}
	return res
}

func protolex1(lex protoLexer, lval *protoSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(protoTok1[0])
		goto out
	}
	if char < len(protoTok1) {
		token = int(protoTok1[char])
		goto out
	}
	if char >= protoPrivate {
		if char < protoPrivate+len(protoTok2) {
			token = int(protoTok2[char-protoPrivate])
			goto out
		}
	}
	for i := 0; i < len(protoTok3); i += 2 {
		token = int(protoTok3[i+0])
		if token == char {
			token = int(protoTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(protoTok2[1]) /* unknown char */
	}
	if protoDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", protoTokname(token), uint(char))
	}
	return char, token
}

func protoParse(protolex protoLexer) int {
	return protoNewParser().Parse(protolex)
}

func (protorcvr *protoParserImpl) Parse(protolex protoLexer) int {
	var proton int
	var protoVAL protoSymType
	var protoDollar []protoSymType
	_ = protoDollar // silence set and not used
	protoS := protorcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	protostate := 0
	protorcvr.char = -1
	prototoken := -1 // protorcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		protostate = -1
		protorcvr.char = -1
		prototoken = -1
	}()
	protop := -1
	goto protostack

ret0:
	return 0

ret1:
	return 1

protostack:
	/* put a state and value onto the stack */
	if protoDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", protoTokname(prototoken), protoStatname(protostate))
	}

	protop++
	if protop >= len(protoS) {
		nyys := make([]protoSymType, len(protoS)*2)
		copy(nyys, protoS)
		protoS = nyys
	}
	protoS[protop] = protoVAL
	protoS[protop].yys = protostate

protonewstate:
	proton = int(protoPact[protostate])
	if proton <= protoFlag {
		goto protodefault /* simple state */
	}
	if protorcvr.char < 0 {
		protorcvr.char, prototoken = protolex1(protolex, &protorcvr.lval)
	}
	proton += prototoken
	if proton < 0 || proton >= protoLast {
		goto protodefault
	}
	proton = int(protoAct[proton])
	if int(protoChk[proton]) == prototoken { /* valid shift */
		protorcvr.char = -1
		prototoken = -1
		protoVAL = protorcvr.lval
		protostate = proton
		if Errflag > 0 {
			Errflag--
		}
		goto protostack
	}

protodefault:
	/* default state action */
	proton = int(protoDef[protostate])
	if proton == -2 {
		if protorcvr.char < 0 {
			protorcvr.char, prototoken = protolex1(protolex, &protorcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if protoExca[xi+0] == -1 && int(protoExca[xi+1]) == protostate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			proton = int(protoExca[xi+0])
			if proton < 0 || proton == prototoken {
				break
			}
		}
		proton = int(protoExca[xi+1])
		if proton < 0 {
			goto ret0
		}
	}
	if proton == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			protolex.Error(protoErrorMessage(protostate, prototoken))
			Nerrs++
			if protoDebug >= 1 {
				__yyfmt__.Printf("%s", protoStatname(protostate))
				__yyfmt__.Printf(" saw %s\n", protoTokname(prototoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for protop >= 0 {
				proton = int(protoPact[protoS[protop].yys]) + protoErrCode
				if proton >= 0 && proton < protoLast {
					protostate = int(protoAct[proton]) /* simulate a shift of "error" */
					if int(protoChk[protostate]) == protoErrCode {
						goto protostack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if protoDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", protoS[protop].yys)
				}
				protop--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if protoDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", protoTokname(prototoken))
			}
			if prototoken == protoEofCode {
				goto ret1
			}
			protorcvr.char = -1
			prototoken = -1
			goto protonewstate /* try again in the same state */
		}
	}

	/* reduction by production proton */
	if protoDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", proton, protoStatname(protostate))
	}

	protont := proton
	protopt := protop
	_ = protopt // guard against "declared and not used"

	protop -= int(protoR2[proton])
	// protop is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if protop+1 >= len(protoS) {
		nyys := make([]protoSymType, len(protoS)*2)
		copy(nyys, protoS)
		protoS = nyys
	}
	protoVAL = protoS[protop+1]

	/* consult goto table to find next state */
	proton = int(protoR1[proton])
	protog := int(protoPgo[proton])
	protoj := protog + protoS[protop].yys + 1

	if protoj >= protoLast {
		protostate = int(protoAct[protog])
	} else {
		protostate = int(protoAct[protoj])
		if int(protoChk[protostate]) != -proton {
			protostate = int(protoAct[protog])
		}
	}
	// dummy call; replaced with literal code
	switch protont {

	case 1:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].syn.Semicolon = protoDollar[2].b
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, protoDollar[1].syn, nil, lex.eof)
			lex.res = protoVAL.file
		}
	case 2:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].ed.Semicolon = protoDollar[2].b
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNodeWithEdition(lex.info, protoDollar[1].ed, nil, lex.eof)
			lex.res = protoVAL.file
		}
	case 3:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, nil, protoDollar[1].fileElements, lex.eof)
			lex.res = protoVAL.file
		}
	case 4:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].syn.Semicolon = protoDollar[2].b
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, protoDollar[1].syn, protoDollar[3].fileElements, lex.eof)
			lex.res = protoVAL.file
		}
	case 5:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].ed.Semicolon = protoDollar[2].b
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNodeWithEdition(lex.info, protoDollar[1].ed, protoDollar[3].fileElements, lex.eof)
			lex.res = protoVAL.file
		}
	case 6:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			lex := protolex.(*protoLex)
			protoVAL.file = ast.NewFileNode(lex.info, nil, nil, lex.eof)
			lex.res = protoVAL.file
		}
	case 7:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].fileElement != nil {
				protoVAL.fileElements = append(protoDollar[1].fileElements, protoDollar[2].fileElement)
			} else {
				protoVAL.fileElements = protoDollar[1].fileElements
			}
		}
	case 8:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].fileElement != nil {
				protoVAL.fileElements = []*ast.FileElement{protoDollar[1].fileElement}
			} else {
				protoVAL.fileElements = nil
			}
		}
	case 9:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].imprt.Semicolon = protoDollar[2].b
			protoVAL.fileElement = protoDollar[1].imprt.AsFileElement()
		}
	case 10:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].pkg.Semicolon = protoDollar[2].b
			protoVAL.fileElement = protoDollar[1].pkg.AsFileElement()
		}
	case 11:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].opt.Semicolon = protoDollar[2].b
			protoVAL.fileElement = protoDollar[1].opt.AsFileElement()
		}
	case 12:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].msg.Semicolon = protoDollar[2].b
			protoVAL.fileElement = protoDollar[1].msg.AsFileElement()
		}
	case 13:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].en.Semicolon = protoDollar[2].b
			protoVAL.fileElement = protoDollar[1].en.AsFileElement()
		}
	case 14:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].extend.Semicolon = protoDollar[2].b
			protoVAL.fileElement = protoDollar[1].extend.AsFileElement()
		}
	case 15:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].svc.Semicolon = protoDollar[2].b
			protoVAL.fileElement = protoDollar[1].svc.AsFileElement()
		}
	case 16:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntaxAt("unexpected identifier", protoDollar[1].id, CategoryIncompleteDecl)
			protoVAL.fileElement = (&ast.ErrorNode{Err: protoDollar[1].id}).AsFileElement()
		}
	case 17:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.fileElement = nil
		}
	case 18:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.syn = &ast.SyntaxNode{Keyword: protoDollar[1].id, Equals: protoDollar[2].b, Syntax: protoDollar[3].sv}
		}
	case 19:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.ed = &ast.EditionNode{Keyword: protoDollar[1].id, Equals: protoDollar[2].b, Edition: protoDollar[3].sv}
		}
	case 20:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.imprt = &ast.ImportNode{Keyword: protoDollar[1].id, Name: protoDollar[2].sv}
		}
	case 21:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.imprt = &ast.ImportNode{Keyword: protoDollar[1].id, Weak: protoDollar[2].id, Name: protoDollar[3].sv}
		}
	case 22:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.imprt = &ast.ImportNode{Keyword: protoDollar[1].id, Public: protoDollar[2].id, Name: protoDollar[3].sv}
		}
	case 23:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expecting string literal or \"weak\" or \"public\"", CategoryIncompleteDecl)
			protoVAL.imprt = &ast.ImportNode{Keyword: protoDollar[1].id}
		}
	case 24:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expecting string literal", CategoryIncompleteDecl)
			protoVAL.imprt = &ast.ImportNode{Keyword: protoDollar[1].id, Weak: protoDollar[2].id}
		}
	case 25:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expecting string literal", CategoryIncompleteDecl)
			protoVAL.imprt = &ast.ImportNode{Keyword: protoDollar[1].id, Public: protoDollar[2].id}
		}
	case 26:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.pkg = &ast.PackageNode{Keyword: protoDollar[1].id, Name: protoDollar[2].idv}
		}
	case 27:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expected package name", CategoryIncompleteDecl)
			protoVAL.pkg = &ast.PackageNode{Keyword: protoDollar[1].id}
		}
	case 28:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.opt = &ast.OptionNode{Keyword: protoDollar[1].id, Name: protoDollar[2].optName, Equals: protoDollar[3].b, Val: protoDollar[4].v}
		}
	case 29:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expected value", CategoryIncompleteDecl)
			protoVAL.opt = &ast.OptionNode{Keyword: protoDollar[1].id, Name: protoDollar[2].optName, Equals: protoDollar[3].b}
		}
	case 30:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expected '='", CategoryIncompleteDecl)
			protoVAL.opt = &ast.OptionNode{Keyword: protoDollar[1].id, Name: protoDollar[2].optName}
		}
	case 31:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expected option name", CategoryIncompleteDecl)
			protoVAL.opt = &ast.OptionNode{Keyword: protoDollar[1].id}
		}
	case 32:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.optName = ast.OptionNameNodeFromIdentValue(protoDollar[1].idv)
		}
	case 33:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.optName = protoDollar[1].optName
		}
	case 37:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].v.GetMessageLiteral().Semicolon = protoDollar[2].b
			protoVAL.v = protoDollar[1].v
		}
	case 38:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].sv.AsValueNode()
		}
	case 41:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].id.AsValueNode()
		}
	case 42:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].f.AsValueNode()
		}
	case 43:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = (&ast.SignedFloatLiteralNode{Sign: protoDollar[1].b, Float: protoDollar[2].f.AsFloatValueNode()}).AsValueNode()
		}
	case 44:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].i.AsValueNode()
		}
	case 45:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].i.Val > math.MaxInt64+1 {
				// can't represent as int so treat as float literal
				protoVAL.v = (&ast.SignedFloatLiteralNode{Sign: protoDollar[1].b, Float: protoDollar[2].i.AsFloatValueNode()}).AsValueNode()
			} else {
				protoVAL.v = (&ast.NegativeIntLiteralNode{Minus: protoDollar[1].b, Uint: protoDollar[2].i}).AsValueNode()
			}
		}
	case 46:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			f := ast.NewSpecialFloatLiteralNode(protoDollar[2].id.ToKeyword())
			protoVAL.v = (&ast.SignedFloatLiteralNode{Sign: protoDollar[1].b, Float: f.AsFloatValueNode()}).AsValueNode()
		}
	case 47:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			f := ast.NewSpecialFloatLiteralNode(protoDollar[2].id.ToKeyword())
			protoVAL.v = (&ast.SignedFloatLiteralNode{Sign: protoDollar[1].b, Float: f.AsFloatValueNode()}).AsValueNode()
		}
	case 48:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[2].msgLitFlds == nil {
				protoVAL.v = (&ast.MessageLiteralNode{Open: protoDollar[1].b, Close: protoDollar[3].b}).AsValueNode()
			} else {
				fields, delimiters := protoDollar[2].msgLitFlds.toNodes()
				protoVAL.v = (&ast.MessageLiteralNode{Open: protoDollar[1].b, Elements: fields, Seps: delimiters, Close: protoDollar[3].b}).AsValueNode()
			}
		}
	case 49:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = (&ast.MessageLiteralNode{Open: protoDollar[1].b, Close: protoDollar[2].b}).AsValueNode()
		}
	case 52:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].msgLitFlds != nil {
				protoDollar[1].msgLitFlds.next = protoDollar[2].msgLitFlds
				protoVAL.msgLitFlds = protoDollar[1].msgLitFlds
			} else {
				protoVAL.msgLitFlds = protoDollar[2].msgLitFlds
			}
		}
	case 53:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].msgLitFld != nil {
				protoVAL.msgLitFlds = &messageFieldList{field: protoDollar[1].msgLitFld}
			} else {
				protoVAL.msgLitFlds = nil
			}
		}
	case 54:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].msgLitFld != nil {
				protoVAL.msgLitFlds = &messageFieldList{field: protoDollar[1].msgLitFld, delimiter: protoDollar[2].b}
			} else {
				protoVAL.msgLitFlds = nil
			}
		}
	case 55:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].msgLitFld != nil {
				protoVAL.msgLitFlds = &messageFieldList{field: protoDollar[1].msgLitFld, delimiter: protoDollar[2].b}
			} else {
				protoVAL.msgLitFlds = nil
			}
		}
	case 56:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.msgLitFlds = nil
		}
	case 57:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.msgLitFlds = nil
		}
	case 58:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgLitFlds = nil
		}
	case 59:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[1].ref != nil && protoDollar[2].b != nil {
				protoVAL.msgLitFld = &ast.MessageFieldNode{Name: protoDollar[1].ref, Sep: protoDollar[2].b, Val: protoDollar[3].v}
			} else {
				protoVAL.msgLitFld = nil
			}
		}
	case 60:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expected value", CategoryIncompleteDecl)
			n := &ast.MessageFieldNode{Name: protoDollar[1].ref, Sep: protoDollar[2].b, Semicolon: protoDollar[3].b}
			protoVAL.msgLitFld = n
		}
	case 61:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[1].ref != nil && protoDollar[2].v != nil {
				protoVAL.msgLitFld = &ast.MessageFieldNode{Name: protoDollar[1].ref, Val: protoDollar[2].v}
			} else {
				protoVAL.msgLitFld = nil
			}
		}
	case 62:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.id = protoDollar[1].id
		}
	case 64:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id.AsIdentValueNode()
		}
	case 65:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id.AsIdentValueNode()
		}
	case 68:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ref = &ast.FieldReferenceNode{Name: protoDollar[1].id.AsIdentValueNode()}
		}
	case 69:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.ref = &ast.FieldReferenceNode{Open: protoDollar[1].b, Name: protoDollar[2].idv, Comma: protoDollar[3].b, Close: protoDollar[4].b, Semicolon: protoDollar[5].b}
		}
	case 70:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			protoVAL.ref = &ast.FieldReferenceNode{Open: protoDollar[1].b, UrlPrefix: protoDollar[2].idv, Slash: protoDollar[3].b, Name: protoDollar[4].idv, Comma: protoDollar[5].b, Close: protoDollar[6].b, Semicolon: protoDollar[7].b}
		}
	case 71:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.ref = nil
		}
	case 73:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].v.GetMessageLiteral().Semicolon = protoDollar[2].b
			protoVAL.v = protoDollar[1].v
		}
	case 74:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].v.GetArrayLiteral().Semicolon = protoDollar[2].b
			protoVAL.v = protoDollar[1].v
		}
	case 75:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].sv.AsValueNode()
		}
	case 77:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			kw := protoDollar[2].id.ToKeyword()
			f := ast.NewSpecialFloatLiteralNode(kw)
			protoVAL.v = (&ast.SignedFloatLiteralNode{Sign: protoDollar[1].b, Float: f.AsFloatValueNode()}).AsValueNode()
		}
	case 78:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			kw := protoDollar[2].id.ToKeyword()
			f := ast.NewSpecialFloatLiteralNode(kw)
			protoVAL.v = (&ast.SignedFloatLiteralNode{Sign: protoDollar[1].b, Float: f.AsFloatValueNode()}).AsValueNode()
		}
	case 79:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.v = protoDollar[1].id.AsValueNode()
		}
	case 80:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].v.GetMessageLiteral().Semicolon = protoDollar[2].b
			protoVAL.v = protoDollar[1].v
		}
	case 81:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].v.GetArrayLiteral().Semicolon = protoDollar[2].b
			protoVAL.v = protoDollar[1].v
		}
	case 82:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].sl.commas = append(protoDollar[2].sl.commas, protoDollar[3].b)
			}
			protoVAL.v = (&ast.ArrayLiteralNode{OpenBracket: protoDollar[1].b, Elements: protoDollar[2].sl.vals, Commas: protoDollar[2].sl.commas, CloseBracket: protoDollar[4].b}).AsValueNode()
		}
	case 83:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.v = (&ast.ArrayLiteralNode{OpenBracket: protoDollar[1].b, Commas: []*ast.RuneNode{protoDollar[2].b}, CloseBracket: protoDollar[3].b}).AsValueNode()
		}
	case 84:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = (&ast.ArrayLiteralNode{OpenBracket: protoDollar[1].b, CloseBracket: protoDollar[2].b}).AsValueNode()
		}
	case 85:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.v = (&ast.ArrayLiteralNode{OpenBracket: protoDollar[1].b, CloseBracket: protoDollar[3].b}).AsValueNode()
		}
	case 86:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.sl = &valueSlices{vals: []*ast.ValueNode{protoDollar[1].v}}
		}
	case 87:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].sl.vals = append(protoDollar[1].sl.vals, protoDollar[3].v)
			protoDollar[1].sl.commas = append(protoDollar[1].sl.commas, protoDollar[2].b)
			protoVAL.sl = protoDollar[1].sl
		}
	case 89:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].v.GetMessageLiteral().Semicolon = protoDollar[2].b
			protoVAL.v = protoDollar[1].v
		}
	case 90:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].sl.commas = append(protoDollar[2].sl.commas, protoDollar[3].b)
			}
			protoVAL.v = (&ast.ArrayLiteralNode{OpenBracket: protoDollar[1].b, Elements: protoDollar[2].sl.vals, Commas: protoDollar[2].sl.commas, CloseBracket: protoDollar[4].b}).AsValueNode()
		}
	case 91:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.v = (&ast.ArrayLiteralNode{OpenBracket: protoDollar[1].b, Commas: []*ast.RuneNode{protoDollar[2].b}, CloseBracket: protoDollar[3].b}).AsValueNode()
		}
	case 92:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.v = (&ast.ArrayLiteralNode{OpenBracket: protoDollar[1].b, CloseBracket: protoDollar[2].b}).AsValueNode()
		}
	case 93:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.v = (&ast.ArrayLiteralNode{OpenBracket: protoDollar[1].b, CloseBracket: protoDollar[3].b}).AsValueNode()
		}
	case 94:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].v.GetMessageLiteral().Semicolon = protoDollar[2].b
			protoVAL.sl = &valueSlices{vals: []*ast.ValueNode{protoDollar[1].v}}
		}
	case 95:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoDollar[3].v.GetMessageLiteral().Semicolon = protoDollar[4].b
			protoDollar[1].sl.vals = append(protoDollar[1].sl.vals, protoDollar[3].v)
			protoDollar[1].sl.commas = append(protoDollar[1].sl.commas, protoDollar[2].b)
			protoVAL.sl = protoDollar[1].sl
		}
	case 96:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id.AsIdentValueNode()
		}
	case 97:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id.AsIdentValueNode()
		}
	case 100:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id.AsIdentValueNode()
		}
	case 101:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id.AsIdentValueNode()
		}
	case 104:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id.AsIdentValueNode()
		}
	case 105:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id.AsIdentValueNode()
		}
	case 108:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id.AsIdentValueNode()
		}
	case 109:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.idv = protoDollar[1].id.AsIdentValueNode()
		}
	case 112:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expected message type", CategoryIncompleteDecl)
			protoVAL.idv = nil
		}
	case 114:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.id = protoDollar[1].id
		}
	case 118:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if r := protoDollar[2].opts.options[len(protoDollar[2].opts.options)-1].Semicolon; r != nil && !r.Virtual {
				protolex.(*protoLex).ErrExtendedSyntax("unexpected trailing '"+string(r.Rune)+"'", CategoryExtraTokens)
			}
			protoVAL.cmpctOpts = &ast.CompactOptionsNode{OpenBracket: protoDollar[1].b, Options: protoDollar[2].opts.options, CloseBracket: protoDollar[3].b}
		}
	case 119:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("compact options list cannot be empty", CategoryEmptyDecl)
			protoVAL.cmpctOpts = &ast.CompactOptionsNode{OpenBracket: protoDollar[1].b, CloseBracket: protoDollar[2].b}
		}
	case 120:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].opt.Semicolon = protoDollar[2].b
			protoVAL.opts = &compactOptionSlices{options: []*ast.OptionNode{protoDollar[1].opt}}
		}
	case 121:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[2].opt.Semicolon = protoDollar[3].b
			protoDollar[1].opts.options = append(protoDollar[1].opts.options, protoDollar[2].opt)
			protoVAL.opts = protoDollar[1].opts
		}
	case 122:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.opt = &ast.OptionNode{Name: protoDollar[1].optName, Equals: protoDollar[2].b, Val: protoDollar[3].v}
		}
	case 123:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expected value", CategoryIncompleteDecl)
			protoVAL.opt = &ast.OptionNode{Name: protoDollar[1].optName, Equals: protoDollar[2].b}
		}
	case 124:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expected '='", CategoryIncompleteDecl)
			protoVAL.opt = &ast.OptionNode{Name: protoDollar[1].optName}
		}
	case 125:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expected option name", CategoryIncompleteDecl)
			protoVAL.opt = &ast.OptionNode{}
		}
	case 126:
		protoDollar = protoS[protopt-8 : protopt+1]
		{
			protoVAL.grp = &ast.GroupNode{Label: protoDollar[1].id.ToKeyword(), Keyword: protoDollar[2].id.ToKeyword(), Name: protoDollar[3].id, Equals: protoDollar[4].b, Tag: protoDollar[5].i, OpenBrace: protoDollar[6].b, Decls: protoDollar[7].msgElements, CloseBrace: protoDollar[8].b}
		}
	case 127:
		protoDollar = protoS[protopt-10 : protopt+1]
		{
			protoDollar[6].cmpctOpts.Semicolon = protoDollar[7].b
			protoVAL.grp = &ast.GroupNode{Label: protoDollar[1].id.ToKeyword(), Keyword: protoDollar[2].id.ToKeyword(), Name: protoDollar[3].id, Equals: protoDollar[4].b, Tag: protoDollar[5].i, Options: protoDollar[6].cmpctOpts, OpenBrace: protoDollar[8].b, Decls: protoDollar[9].msgElements, CloseBrace: protoDollar[10].b}
		}
	case 128:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.oo = &ast.OneofNode{Keyword: protoDollar[1].id.ToKeyword(), Name: protoDollar[2].id, OpenBrace: protoDollar[3].b, Decls: protoDollar[4].ooElements, CloseBrace: protoDollar[5].b}
		}
	case 129:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.ooElements = nil
		}
	case 131:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].ooElement != nil {
				protoVAL.ooElements = append(protoDollar[1].ooElements, protoDollar[2].ooElement)
			} else {
				protoVAL.ooElements = protoDollar[1].ooElements
			}
		}
	case 132:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].ooElement != nil {
				protoVAL.ooElements = []*ast.OneofElement{protoDollar[1].ooElement}
			} else {
				protoVAL.ooElements = nil
			}
		}
	case 133:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].opt.Semicolon = protoDollar[2].b
			protoVAL.ooElement = protoDollar[1].opt.AsOneofElement()
		}
	case 134:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].fld.Semicolon = protoDollar[2].b
			protoVAL.ooElement = protoDollar[1].fld.AsOneofElement()
		}
	case 135:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].grp.Semicolon = protoDollar[2].b
			protoVAL.ooElement = protoDollar[1].grp.AsOneofElement()
		}
	case 136:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.ooElement = nil
		}
	case 137:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.fld = &ast.FieldNode{FieldType: protoDollar[1].idv, Name: protoDollar[2].id, Equals: protoDollar[3].b, Tag: protoDollar[4].i}
		}
	case 138:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = &ast.FieldNode{FieldType: protoDollar[1].idv, Name: protoDollar[2].id, Equals: protoDollar[3].b, Tag: protoDollar[4].i, Options: protoDollar[5].cmpctOpts}
		}
	case 139:
		protoDollar = protoS[protopt-7 : protopt+1]
		{
			protoVAL.grp = &ast.GroupNode{Keyword: protoDollar[1].id.ToKeyword(), Name: protoDollar[2].id, Equals: protoDollar[3].b, Tag: protoDollar[4].i, OpenBrace: protoDollar[5].b, Decls: protoDollar[6].msgElements, CloseBrace: protoDollar[7].b}
		}
	case 140:
		protoDollar = protoS[protopt-9 : protopt+1]
		{
			protoDollar[5].cmpctOpts.Semicolon = protoDollar[6].b
			protoVAL.grp = &ast.GroupNode{Keyword: protoDollar[1].id.ToKeyword(), Name: protoDollar[2].id, Equals: protoDollar[3].b, Tag: protoDollar[4].i, Options: protoDollar[5].cmpctOpts, OpenBrace: protoDollar[7].b, Decls: protoDollar[8].msgElements, CloseBrace: protoDollar[9].b}
		}
	case 141:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoDollar[1].mapType.Semicolon = protoDollar[2].b
			protoVAL.mapFld = &ast.MapFieldNode{MapType: protoDollar[1].mapType, Name: protoDollar[3].id, Equals: protoDollar[4].b, Tag: protoDollar[5].i}
		}
	case 142:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoDollar[1].mapType.Semicolon = protoDollar[2].b
			protoVAL.mapFld = &ast.MapFieldNode{MapType: protoDollar[1].mapType, Name: protoDollar[3].id, Equals: protoDollar[4].b, Tag: protoDollar[5].i, Options: protoDollar[6].cmpctOpts}
		}
	case 143:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.mapType = &ast.MapTypeNode{Keyword: protoDollar[1].id.ToKeyword(), OpenAngle: protoDollar[2].b, KeyType: protoDollar[3].id, Comma: protoDollar[4].b, ValueType: protoDollar[5].idv, CloseAngle: protoDollar[6].b}
		}
	case 156:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].rngs.commas = append(protoDollar[2].rngs.commas, protoDollar[3].b)
			}
			protoVAL.ext = &ast.ExtensionRangeNode{Keyword: protoDollar[1].id.ToKeyword(), Ranges: protoDollar[2].rngs.ranges, Commas: protoDollar[2].rngs.commas}
		}
	case 157:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].rngs.commas = append(protoDollar[2].rngs.commas, protoDollar[3].b)
			}
			protoVAL.ext = &ast.ExtensionRangeNode{Keyword: protoDollar[1].id.ToKeyword(), Ranges: protoDollar[2].rngs.ranges, Commas: protoDollar[2].rngs.commas, Options: protoDollar[4].cmpctOpts}
		}
	case 158:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rngs = &rangeSlices{ranges: []*ast.RangeNode{protoDollar[1].rng}}
		}
	case 159:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].rngs.ranges = append(protoDollar[1].rngs.ranges, protoDollar[3].rng)
			protoDollar[1].rngs.commas = append(protoDollar[1].rngs.commas, protoDollar[2].b)
			protoVAL.rngs = protoDollar[1].rngs
		}
	case 160:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rng = &ast.RangeNode{StartVal: protoDollar[1].i.AsIntValueNode()}
		}
	case 161:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = &ast.RangeNode{StartVal: protoDollar[1].i.AsIntValueNode(), To: protoDollar[2].id.ToKeyword(), EndVal: protoDollar[3].i.AsIntValueNode()}
		}
	case 162:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = &ast.RangeNode{StartVal: protoDollar[1].i.AsIntValueNode(), To: protoDollar[2].id.ToKeyword(), Max: protoDollar[3].id}
		}
	case 163:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rngs = &rangeSlices{ranges: []*ast.RangeNode{protoDollar[1].rng}}
		}
	case 164:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].rngs.ranges = append(protoDollar[1].rngs.ranges, protoDollar[3].rng)
			protoDollar[1].rngs.commas = append(protoDollar[1].rngs.commas, protoDollar[2].b)
			protoVAL.rngs = protoDollar[1].rngs
		}
	case 165:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.rng = &ast.RangeNode{StartVal: protoDollar[1].il}
		}
	case 166:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = &ast.RangeNode{StartVal: protoDollar[1].il, To: protoDollar[2].id.ToKeyword(), EndVal: protoDollar[3].il}
		}
	case 167:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.rng = &ast.RangeNode{StartVal: protoDollar[1].il, To: protoDollar[2].id.ToKeyword(), Max: protoDollar[3].id}
		}
	case 168:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.il = protoDollar[1].i.AsIntValueNode()
		}
	case 169:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.il = (&ast.NegativeIntLiteralNode{Minus: protoDollar[1].b, Uint: protoDollar[2].i}).AsIntValueNode()
		}
	case 170:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].rngs.commas = append(protoDollar[2].rngs.commas, protoDollar[3].b)
			}
			protoVAL.resvd = &ast.ReservedNode{Keyword: protoDollar[1].id.ToKeyword(), Ranges: protoDollar[2].rngs.ranges, Commas: protoDollar[2].rngs.commas}
		}
	case 172:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].rngs.commas = append(protoDollar[2].rngs.commas, protoDollar[3].b)
			}
			protoVAL.resvd = &ast.ReservedNode{Keyword: protoDollar[1].id.ToKeyword(), Ranges: protoDollar[2].rngs.ranges, Commas: protoDollar[2].rngs.commas}
		}
	case 174:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			if protoDollar[3].b != nil {
				protoDollar[2].names.commas = append(protoDollar[2].names.commas, protoDollar[3].b)
			}
			protoVAL.resvd = &ast.ReservedNode{Keyword: protoDollar[1].id.ToKeyword(), Names: protoDollar[2].names.names, Commas: protoDollar[2].names.commas}
		}
	case 175:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoVAL.resvd = &ast.ReservedNode{Keyword: protoDollar[1].id.ToKeyword(), Identifiers: protoDollar[2].names.idents, Commas: protoDollar[2].names.commas}
		}
	case 176:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.names = &nameSlices{names: []*ast.StringValueNode{protoDollar[1].sv}}
		}
	case 177:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].names.names = append(protoDollar[1].names.names, protoDollar[3].sv)
			protoDollar[1].names.commas = append(protoDollar[1].names.commas, protoDollar[2].b)
			protoVAL.names = protoDollar[1].names
		}
	case 178:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.names = &nameSlices{idents: []*ast.IdentNode{protoDollar[1].id}}
		}
	case 179:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoDollar[1].names.idents = append(protoDollar[1].names.idents, protoDollar[3].id)
			protoDollar[1].names.commas = append(protoDollar[1].names.commas, protoDollar[2].b)
			protoVAL.names = protoDollar[1].names
		}
	case 180:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.en = &ast.EnumNode{Keyword: protoDollar[1].id.ToKeyword(), Name: protoDollar[2].id, OpenBrace: protoDollar[3].b, Decls: protoDollar[4].enElements, CloseBrace: protoDollar[5].b}
		}
	case 181:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.enElements = nil
		}
	case 183:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].enElement != nil {
				protoVAL.enElements = append(protoDollar[1].enElements, protoDollar[2].enElement)
			} else {
				protoVAL.enElements = protoDollar[1].enElements
			}
		}
	case 184:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].enElement != nil {
				protoVAL.enElements = []*ast.EnumElement{protoDollar[1].enElement}
			} else {
				protoVAL.enElements = nil
			}
		}
	case 185:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].opt.Semicolon = protoDollar[2].b
			protoVAL.enElement = protoDollar[1].opt.AsEnumElement()
		}
	case 186:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].env.Semicolon = protoDollar[2].b
			protoVAL.enElement = protoDollar[1].env.AsEnumElement()
		}
	case 187:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].resvd.Semicolon = protoDollar[2].b
			protoVAL.enElement = protoDollar[1].resvd.AsEnumElement()
		}
	case 188:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.enElement = nil
		}
	case 189:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.env = &ast.EnumValueNode{Name: protoDollar[1].id, Equals: protoDollar[2].b, Number: protoDollar[3].il}
		}
	case 190:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.env = &ast.EnumValueNode{Name: protoDollar[1].id, Equals: protoDollar[2].b, Number: protoDollar[3].il, Options: protoDollar[4].cmpctOpts}
		}
	case 191:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.msg = &ast.MessageNode{Keyword: protoDollar[1].id.ToKeyword(), Name: protoDollar[2].id, OpenBrace: protoDollar[3].b, Decls: protoDollar[4].msgElements, CloseBrace: protoDollar[5].b}
		}
	case 192:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.msgElements = nil
		}
	case 194:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].msgElement != nil {
				protoVAL.msgElements = append(protoDollar[1].msgElements, protoDollar[2].msgElement)
			} else {
				protoVAL.msgElements = protoDollar[1].msgElements
			}
		}
	case 195:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].msgElement != nil {
				protoVAL.msgElements = []*ast.MessageElement{protoDollar[1].msgElement}
			} else {
				protoVAL.msgElements = nil
			}
		}
	case 196:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].fld.Semicolon = protoDollar[2].b
			protoVAL.msgElement = protoDollar[1].fld.AsMessageElement()
		}
	case 197:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].en.Semicolon = protoDollar[2].b
			protoVAL.msgElement = protoDollar[1].en.AsMessageElement()
		}
	case 198:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].msg.Semicolon = protoDollar[2].b
			protoVAL.msgElement = protoDollar[1].msg.AsMessageElement()
		}
	case 199:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].extend.Semicolon = protoDollar[2].b
			protoVAL.msgElement = protoDollar[1].extend.AsMessageElement()
		}
	case 200:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].ext.Semicolon = protoDollar[2].b
			protoVAL.msgElement = protoDollar[1].ext.AsMessageElement()
		}
	case 201:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].grp.Semicolon = protoDollar[2].b
			protoVAL.msgElement = protoDollar[1].grp.AsMessageElement()
		}
	case 202:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].opt.Semicolon = protoDollar[2].b
			protoVAL.msgElement = protoDollar[1].opt.AsMessageElement()
		}
	case 203:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].oo.Semicolon = protoDollar[2].b
			protoVAL.msgElement = protoDollar[1].oo.AsMessageElement()
		}
	case 204:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].mapFld.Semicolon = protoDollar[2].b
			protoVAL.msgElement = protoDollar[1].mapFld.AsMessageElement()
		}
	case 205:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].resvd.Semicolon = protoDollar[2].b
			protoVAL.msgElement = protoDollar[1].resvd.AsMessageElement()
		}
	case 206:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.msgElement = (&ast.EmptyDeclNode{Semicolon: protoDollar[1].b}).AsMessageElement()
		}
	case 207:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = &ast.FieldNode{Label: protoDollar[1].id.ToKeyword(), FieldType: protoDollar[2].idv, Name: protoDollar[3].id, Equals: protoDollar[4].b, Tag: protoDollar[5].i}
		}
	case 208:
		protoDollar = protoS[protopt-6 : protopt+1]
		{
			protoVAL.fld = &ast.FieldNode{Label: protoDollar[1].id.ToKeyword(), FieldType: protoDollar[2].idv, Name: protoDollar[3].id, Equals: protoDollar[4].b, Tag: protoDollar[5].i, Options: protoDollar[6].cmpctOpts}
		}
	case 209:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.fld = &ast.FieldNode{FieldType: protoDollar[1].idv, Name: protoDollar[2].id, Equals: protoDollar[3].b, Tag: protoDollar[4].i}
		}
	case 210:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.fld = &ast.FieldNode{FieldType: protoDollar[1].idv, Name: protoDollar[2].id, Equals: protoDollar[3].b, Tag: protoDollar[4].i, Options: protoDollar[5].cmpctOpts}
		}
	case 211:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing field number after '='", CategoryIncompleteDecl)
			protoVAL.fld = &ast.FieldNode{Label: protoDollar[1].id.ToKeyword(), FieldType: protoDollar[2].idv, Name: protoDollar[3].id}
		}
	case 212:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing '=' after field name", CategoryIncompleteDecl)
			protoVAL.fld = &ast.FieldNode{Label: protoDollar[1].id.ToKeyword(), FieldType: protoDollar[2].idv, Name: protoDollar[3].id}
		}
	case 213:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing field name", CategoryIncompleteDecl)
			protoVAL.fld = &ast.FieldNode{Label: protoDollar[1].id.ToKeyword(), FieldType: protoDollar[2].idv}
		}
	case 214:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing field number after '='", CategoryIncompleteDecl)
			protoVAL.fld = &ast.FieldNode{FieldType: protoDollar[1].idv, Name: protoDollar[2].id}
		}
	case 215:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing '=' after field name", CategoryIncompleteDecl)
			protoVAL.fld = &ast.FieldNode{FieldType: protoDollar[1].idv, Name: protoDollar[2].id}
		}
	case 216:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing field name", CategoryIncompleteDecl)
			protoVAL.fld = &ast.FieldNode{FieldType: protoDollar[1].idv}
		}
	case 217:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("missing field type", CategoryIncompleteDecl)
			protoVAL.fld = &ast.FieldNode{Label: protoDollar[1].id.ToKeyword()}
		}
	case 218:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.extend = &ast.ExtendNode{Keyword: protoDollar[1].id.ToKeyword(), Extendee: protoDollar[2].idv, OpenBrace: protoDollar[3].b, Decls: protoDollar[4].extElements, CloseBrace: protoDollar[5].b}
		}
	case 219:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expected '{'", CategoryIncompleteDecl)
			protoVAL.extend = &ast.ExtendNode{Keyword: protoDollar[1].id.ToKeyword(), Extendee: protoDollar[2].idv}
		}
	case 220:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntax("expected message name", CategoryIncompleteDecl)
			protoVAL.extend = &ast.ExtendNode{Keyword: protoDollar[1].id.ToKeyword()}
		}
	case 221:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.extElements = nil
		}
	case 223:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].extElement != nil {
				protoVAL.extElements = append(protoDollar[1].extElements, protoDollar[2].extElement)
			} else {
				protoVAL.extElements = protoDollar[1].extElements
			}
		}
	case 224:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].extElement != nil {
				protoVAL.extElements = []*ast.ExtendElement{protoDollar[1].extElement}
			} else {
				protoVAL.extElements = nil
			}
		}
	case 225:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].fld.Semicolon = protoDollar[2].b
			protoVAL.extElement = protoDollar[1].fld.AsExtendElement()
		}
	case 226:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].grp.Semicolon = protoDollar[2].b
			protoVAL.extElement = protoDollar[1].grp.AsExtendElement()
		}
	case 227:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].mapFld.Semicolon = protoDollar[2].b
			protolex.(*protoLex).ErrExtendedSyntaxAt("map fields not allowed in extend declarations", protoDollar[1].mapFld, CategoryDeclNotAllowed)
			protoVAL.extElement = nil
		}
	case 228:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].oo.Semicolon = protoDollar[2].b
			protolex.(*protoLex).ErrExtendedSyntaxAt("\"oneof\" not allowed in extend declarations", protoDollar[1].oo, CategoryDeclNotAllowed)
			protoVAL.extElement = nil
		}
	case 229:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].resvd.Semicolon = protoDollar[2].b
			protolex.(*protoLex).ErrExtendedSyntaxAt("\"reserved\" not allowed in extend declarations", protoDollar[1].resvd, CategoryDeclNotAllowed)
			protoVAL.extElement = nil
		}
	case 230:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].ext.Semicolon = protoDollar[2].b
			protolex.(*protoLex).ErrExtendedSyntaxAt("extension ranges not allowed in extend declarations", protoDollar[1].ext, CategoryDeclNotAllowed)
			protoVAL.extElement = nil
		}
	case 231:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].msg.Semicolon = protoDollar[2].b
			protolex.(*protoLex).ErrExtendedSyntaxAt("nested messages not allowed in extend declarations", protoDollar[1].msg, CategoryDeclNotAllowed)
			protoVAL.extElement = nil
		}
	case 232:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].en.Semicolon = protoDollar[2].b
			protolex.(*protoLex).ErrExtendedSyntaxAt("nested enums not allowed in extend declarations", protoDollar[1].en, CategoryDeclNotAllowed)
			protoVAL.extElement = nil
		}
	case 233:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.extElement = nil
		}
	case 234:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.svc = &ast.ServiceNode{Keyword: protoDollar[1].id.ToKeyword(), Name: protoDollar[2].id, OpenBrace: protoDollar[3].b, Decls: protoDollar[4].svcElements, CloseBrace: protoDollar[5].b}
		}
	case 235:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.svcElements = nil
		}
	case 237:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].svcElement != nil {
				protoVAL.svcElements = append(protoDollar[1].svcElements, protoDollar[2].svcElement)
			} else {
				protoVAL.svcElements = protoDollar[1].svcElements
			}
		}
	case 238:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].svcElement != nil {
				protoVAL.svcElements = []*ast.ServiceElement{protoDollar[1].svcElement}
			} else {
				protoVAL.svcElements = nil
			}
		}
	case 239:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].opt.Semicolon = protoDollar[2].b
			protoVAL.svcElement = protoDollar[1].opt.AsServiceElement()
		}
	case 240:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].mtd.Semicolon = protoDollar[2].b
			protoVAL.svcElement = protoDollar[1].mtd.AsServiceElement()
		}
	case 241:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].mtd.Semicolon = protoDollar[2].b
			protoVAL.svcElement = protoDollar[1].mtd.AsServiceElement()
		}
	case 242:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.svcElement = nil
		}
	case 243:
		protoDollar = protoS[protopt-5 : protopt+1]
		{
			protoVAL.mtd = &ast.RPCNode{Keyword: protoDollar[1].id.ToKeyword(), Name: protoDollar[2].id, Input: protoDollar[3].mtdMsgType, Returns: protoDollar[4].id.ToKeyword(), Output: protoDollar[5].mtdMsgType}
		}
	case 244:
		protoDollar = protoS[protopt-8 : protopt+1]
		{
			protoVAL.mtd = &ast.RPCNode{Keyword: protoDollar[1].id.ToKeyword(), Name: protoDollar[2].id, Input: protoDollar[3].mtdMsgType, Returns: protoDollar[4].id.ToKeyword(), Output: protoDollar[5].mtdMsgType, OpenBrace: protoDollar[6].b, Decls: protoDollar[7].mtdElements, CloseBrace: protoDollar[8].b}
		}
	case 245:
		protoDollar = protoS[protopt-4 : protopt+1]
		{
			protoVAL.mtdMsgType = &ast.RPCTypeNode{OpenParen: protoDollar[1].b, Stream: protoDollar[2].id.ToKeyword(), MessageType: protoDollar[3].idv, CloseParen: protoDollar[4].b}
		}
	case 246:
		protoDollar = protoS[protopt-3 : protopt+1]
		{
			protoVAL.mtdMsgType = &ast.RPCTypeNode{OpenParen: protoDollar[1].b, MessageType: protoDollar[2].idv, CloseParen: protoDollar[3].b}
		}
	case 247:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.mtdElements = nil
		}
	case 249:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			if protoDollar[2].mtdElement != nil {
				protoVAL.mtdElements = append(protoDollar[1].mtdElements, protoDollar[2].mtdElement)
			} else {
				protoVAL.mtdElements = protoDollar[1].mtdElements
			}
		}
	case 250:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].mtdElement != nil {
				protoVAL.mtdElements = []*ast.RPCElement{protoDollar[1].mtdElement}
			} else {
				protoVAL.mtdElements = nil
			}
		}
	case 251:
		protoDollar = protoS[protopt-2 : protopt+1]
		{
			protoDollar[1].opt.Semicolon = protoDollar[2].b
			protoVAL.mtdElement = protoDollar[1].opt.AsRPCElement()
		}
	case 252:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.mtdElement = nil
		}
	case 491:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntaxAt("unexpected trailing comma", protoDollar[1].b, CategoryExtraTokens)
			protoVAL.b = protoDollar[1].b
		}
	case 492:
		protoDollar = protoS[protopt-0 : protopt+1]
		{
			protoVAL.b = nil
		}
	case 493:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.b = protoDollar[1].b
		}
	case 494:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protolex.(*protoLex).ErrExtendedSyntaxAt("expected ';', found ','", protoDollar[1].b, CategoryIncorrectToken)
			protoVAL.b = protoDollar[1].b
		}
	case 495:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].b.Virtual {
				protolex.(*protoLex).ErrExtendedSyntaxAt("expected ';'", protoDollar[1].b, CategoryMissingToken)
			}
			protoVAL.b = protoDollar[1].b
		}
	case 496:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if !protoDollar[1].b.Virtual {
				protolex.(*protoLex).ErrExtendedSyntaxAt("unexpected ';'", protoDollar[1].b, CategoryExtraTokens)
			}
			protoVAL.b = protoDollar[1].b
		}
	case 497:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if !protoDollar[1].b.Virtual {
				protolex.(*protoLex).ErrExtendedSyntaxAt("unexpected ','", protoDollar[1].b, CategoryExtraTokens)
			}
			protoVAL.b = protoDollar[1].b
		}
	case 499:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			if protoDollar[1].b.Virtual {
				protolex.(*protoLex).ErrExtendedSyntaxAt("expected ','", protoDollar[1].b, CategoryMissingToken)
			} else {
				protolex.(*protoLex).ErrExtendedSyntaxAt("expected ',', found ';'", protoDollar[1].b, CategoryIncorrectToken)
			}
		}
	case 500:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.b = protoDollar[1].b
		}
	case 501:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.b = protoDollar[1].b
		}
	case 502:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.b = protoDollar[1].b
		}
	case 503:
		protoDollar = protoS[protopt-1 : protopt+1]
		{
			protoVAL.b = protoDollar[1].b
		}
	}
	goto protostack /* stack new state and value */
}
